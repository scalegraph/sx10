help=""
time=""
verbose=""
extra_cp=()
sourcepath=()
ext=""
rtdev=""
java_args=()
args=()
optimize=""

if [ "$CROSS_COMPILE_BGP" = "true" ]; then
    x10rt_impl="pgas_bgp"
elif [ "$CROSS_COMPILE_BGQ" = "true" ]; then
    x10rt_impl="pami"
elif [ "$ENABLE_X10RT_PAMI" = "true" ]; then
    x10rt_impl="pami"
else
    x10rt_impl="sockets"
fi

parse=true
while [ -n "$1" ]; do
    if [ -z "$parse" ]; then
        args=("${args[@]}" "$1")
        shift
        continue
    fi
    case "$1" in
        -h|-help|--help) help="1"; break;;
        -v|-verbose|--verbose) verbose="1";;
        -t|-time) time="time ";;
        -classpath|-cp) shift; extra_cp=("${extra_cp[@]}" "${1}");;
        -sourcepath) shift; sourcepath=("${sourcepath[@]}" "${1}");;
        -x10lib) shift; propfile="$(cd $(dirname "$1") && pwd)/$(basename "$1")"
                 [[ "$UNAME" = CYGWIN* ]] && propfile="$(cygpath -am "$propfile")"
                 args=("${args[@]}" "-x10lib" "$propfile");;
        -profile) profile="-Xrunhprof:cpu=samples";;
        -extclass) shift; ext=$1;;
        -x10rt) shift; x10rt_impl=$1;;
        -O|-optimize) optimize="true";;
        -rtdev) rtdev="true";;
        -J*) java_args=("${java_args[@]}" "${1##-J}");;
        --) parse=;;
        *) args=("${args[@]}" "$1");;
    esac
    shift
done

if [ -n "$help" -o -z "${args[*]}" ]; then
    cat << EOF
Usage: x10c [options] <source-file>.x10 ...
where [options] includes:
    -sourcepath <path>       source path
    -classpath <path>        search path for class files
    -x10lib <lib.properties> use the precompiled x10 library described by <lib.properties>
    -buildx10lib <dir>       generate property file in <dir>
    -version                 print version info
    -x10rt <impl>            select x10rt impl (sockets, standalone, pami, mpi, bgas_bgp)
    -t -time                 display execution time
    -v -verbose --verbose    print verbose debugging information
    -h -help --help          print this message
    -disable <pass>          disable compiler pass <pass>
                             valid passes are: async-elimination
    -O -optimize             generate optimized code

    Use "x10c -- -help" to get more detailed help on compiler options
EOF
    exit 1
fi

[ -z "$DEXT" ] && DEXT="x10c.ExtensionInfo"
[ -z "$ext" ] && ext="$DEXT"

# Set user-specified source path and class path
extra_cp="$(IFS=${PATH_SEP}; echo "${extra_cp[*]}")"
[ -n "$extra_cp" ] && args=("-classpath" "$extra_cp" "${args[@]}")
sourcepath="$(IFS=${PATH_SEP}; echo "${sourcepath[*]}")"
[ -n "$sourcepath" ] && args=("-sourcepath" "$sourcepath" "${args[@]}")

LIB_DIR="${TOP}${FILE_SEP}lib"
STDLIB_DIR="${TOP}${FILE_SEP}stdlib"

# Set X10 compiler class path
COMPILER_JARS=("x10c.jar" "${LPG_JAR}")
WALA_JARS=("${WALA_JAR}" "${WALA2_JAR}" "${WALA3_JAR}" "${WALA4_JAR}" "x10wala.jar" "org.eclipse.equinox.common_3.6.0.v20100503.jar")

classpath=("${COMPILER_JARS[@]}" "${WALA_JARS[@]}")
for ((i=0; i<${#classpath[@]}; ++i)); do classpath[$i]="${LIB_DIR}${FILE_SEP}${classpath[$i]}"; done

[ -n "${CP_OVERRIDE}" ] && classpath=("${CP_OVERRIDE}" "${classpath[@]}")
classpath="$(IFS=${PATH_SEP}; echo "${classpath[*]}")"

# Set flags to generate optimized code if we've been asked to do so.
[ "$optimize" = "true" ] && args=("-OPTIMIZE=true" "${args[@]}")

# include libx10.properties as a x10lib unless rtdev
[ -z "$rtdev" ] && args=("-x10lib" "${STDLIB_DIR}/libx10.properties" "${args[@]}")

# pass x10rt_impl via environment variable
export X10RT_IMPL=$x10rt_impl

[ -z "$MAIN" ] && MAIN="polyglot.main.Main"

command=("$JAVA" "-Xmx1024m" "$profile" "-Dfile.encoding=UTF-8" "-Dx10.dist=$TOP" "-classpath" "$classpath" "${java_args[@]}" "$MAIN" "-extclass" "$ext" "${args[@]}")

[ -n "$verbose" ] && echo "${command[*]}"

exec $time ${command[@]}

exit $?
