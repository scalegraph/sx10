help=""
time=""
verbose=""
extra_cp=""
output_path=""
ext=""
dev=""
rtdev=""
java_args=""
args=""
optimize=""

parse=true
while [ -n "$1" ]; do
    if [ -z "$parse" ]; then
        args="$args '$1'"
        shift
        continue
    fi
    case "$1" in
        -h|-help|--help) help="1"; break;;
        -v|-verbose|--verbose) verbose="1";;
        -t|-time) time="time ";;
        -classpath|-cp) shift; extra_cp="$1";;
        -o) shift; output_path=$1;;
        -profile) profile="-Xrunhprof:cpu=samples";;
        -config) shift; config="$1.cfg";;
        -extclass) shift; ext=$1;;
        -dev) dev="true";;
	-x10rt) shift; export X10RT_IMPL=$1;;
        -O|-optimize) optimize="true";;
        -rtdev) rtdev="true";;
        -J*) java_args="${java_args} '${1##-J}'";;
        --) parse=;;
        *) args="$args '$1'";;
    esac
    shift
done

if [ -n "$help" -o -z "$args" ]; then
    cat << EOF
Usage: x10c [options] <source-file>.x10 ...
where [options] includes:
    -sourcepath <path>       source path
    -classpath <path>        search path for class files
    -d <path>                output path for intermediate files (and class files if -o is omitted)
    -o <path>                output path for class files
    -config <conf>           read configuration <conf> from etc${FILE_SEP}<conf>.cfg
    -version                 print version info
    -x10rt <impl>            select x10rt impl (lapi, pgp, sockets, mpi, standalone)
    -t -time                 display execution time
    -v -verbose --verbose    print verbose debugging information
    -h -help --help          print this message
    -disable <pass>          disable compiler pass <pass>
                             valid passes are: async-elimination
    -dev                     developer mode (use unpackaged X10 libraries)
    -O -optimize             generate optimized code

    Use "x10c -- -help" to get more detailed help on compiler options
EOF
    exit 1
fi

[ -z "$DEXT" ] && DEXT="x10c.ExtensionInfo"
[ -z "$ext" ] && ext="$DEXT"

CONFIG_DIR="${TOP}${FILE_SEP}etc"
LIB_DIR="${TOP}${FILE_SEP}lib"

#[ -z "$config" ] && config="${CONFIG_FILE}"
[ -n "$config" ] && config="-Dx10.configuration=\"${CONFIG_DIR}${FILE_SEP}${config}\""

if [ -n "$extra_cp" ]; then
    extra_cp="${PATH_SEP}${extra_cp}"
fi

extargs=""
# [DC] assert should be off by default
# extargs="$extargs -assert"
#${LIB_DIR}${FILE_SEP}polyglot.jar${PATH_SEP}${LIB_DIR}${FILE_SEP}java_cup.jar${PATH_SEP}
WALA_JARS="${LIB_DIR}${FILE_SEP}wala.jar${PATH_SEP}${LIB_DIR}${FILE_SEP}com.ibm.wala.cast.x10.jar${PATH_SEP}${LIB_DIR}${FILE_SEP}org.eclipse.equinox.common_3.6.0.v20100503.jar"

classpath="${CP_OVERRIDE}"
[ -n "$dev" ] && classpath="${classpath}${TOP}${FILE_SEP}..${FILE_SEP}x10.compiler${FILE_SEP}classes${PATH_SEP}${TOP}${FILE_SEP}..${FILE_SEP}x10.runtime${FILE_SEP}classes${PATH_SEP}"
classpath="${classpath}${LIB_DIR}${FILE_SEP}x10c.jar${PATH_SEP}${LIB_DIR}${FILE_SEP}x10.jar${PATH_SEP}${LIB_DIR}${FILE_SEP}${MATH_JAR}${PATH_SEP}${LIB_DIR}${FILE_SEP}${LPG_JAR}${PATH_SEP}${WALA_JARS}${ext_cp}${extra_cp}"

# include x10.jar in sourcepath
[ -z "$X10SOURCES" ] && export X10SOURCES="${LIB_DIR}${FILE_SEP}x10.jar"
[ -z "$rtdev" ] && extargs="$extargs -sourcepath \"${X10SOURCES}\""

[ -z "$MAIN" ] && MAIN="polyglot.main.Main"

# Set flags to generate optimized code if we've been asked to do so.
if [[ "$optimize" = "true" ]]; then
  args=" -OPTIMIZE=true $args"
fi

if [[ "$ext" = "x10c.ExtensionInfo" ]]; then
  # Java backend
  post='java -jar \"${LIB_DIR}${FILE_SEP}${ECJ_JAR}\" -1.5 -nowarn'
  [ -n "${output_path}" ] && post="$post -d ${output_path}"
  command="\"$JAVA\" -Xmx512m $config $profile -classpath \"$classpath\" ${java_args} $MAIN -post \"$post\" -extclass $ext $extargs $args"
else
  # C++ backend
  command="\"$JAVA\" -Xmx512m $config $profile -classpath \"$classpath\" ${java_args} $MAIN -extclass $ext $extargs $args"
fi

[ -n "$verbose" ] && echo "$command"

eval "$time$command"
exit $?

