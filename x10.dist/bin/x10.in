MAIN_CLASS='$Main'

help=""
time=""
verbose=""
extra_cp=""
extra_lib=""
mx=""
defs=""
dev=""
java_args=()
args=()

PRINT_DIR=""

while [ -n "$1" ]; do
    case "$1" in
        -h|-help|--help) help="1"; break;;
        -v|-verbose|--verbose) verbose="1";;
        -t|-time) time="time ";;
        -mx) shift; mx="$1";;
        -D*) if [[ "${1##-D}" = java.library.path=* ]]; then
                 echo >&2 "Error: Cannot reset java.library.path, use -libpath instead"
                 exit 1
             fi
             # TODO: add tests for more system properties above
             defs="${defs} $1";;
        -classpath|-cp) shift; extra_cp="$1";;
        -libpath) shift; extra_lib="$1";;
        -config) shift; config="$1.cfg";;
        -dev) dev="true";;
        -pkg-conf=) echo "Please use the -help option to get a list of valid options"; exit 1l ;;
        -pkg-conf=*) PRINT_DIR="${1##-pkg-conf=}" ; args=(dummy argument) ;;
        -pkg-conf) echo "Please use the -help option to get a list of valid options"; exit 1 ;;
        -J*) java_args=("${java_args[@]}" "${1##-J}");;
        -*=*) java_args=("${java_args[@]}" "-Dx10.${1##-}");;
        -*) java_args=("${java_args[@]}" "-Dx10.${1##-}=true");;
        *.jar) args=("${args[@]}" -jar "$1"); shift; args=("${args[@]}" "$@"); break;;
        *) if [ -z "$main" ]; then
               main="$1"
           fi
           args=("${args[@]}" "$1\$${MAIN_CLASS}"); shift; args=("${args[@]}" "$@"); break;;
    esac
    shift
done

if [ -n "$help" -o -z "${args[*]}" ]; then
    cat << EOF
Usage: x10 [options] <main-class> [arg0 arg1 ...]
where [options] includes:
    -t -time                 display execution time
    -v -verbose --verbose    print verbose debugging information
    -h -help --help          print this message
    -mx <size>               set max heap size, e.g., -mx 200M
    -D<name>=<value>         set system property <name> to <value>
    -classpath <path>        search path for class files
    -libpath <path>          search path for native libraries
    -config <conf>           (IGNORED) read configuration from etc${FILE_SEP}<conf>.cfg
    -dev                     developer mode (use unpackaged X10 libraries)
    -pkg-conf=dir            Print absolute directory, where dir is one of
                               [bin, etc, include, lib, stdlib]
    -J<arg>                  [USE WITH CAUTION] pass <arg> directly to java.
        e.g., use -J-verbose to make java execution verbose.
EOF
    exit 1
fi

CONFIG_DIR="${TOP}${FILE_SEP}etc"
LIB_DIR="${TOP}${FILE_SEP}lib"
STDLIB_DIR="${TOP}${FILE_SEP}stdlib"

if [ "${PRINT_DIR}XX" != XX ] 
then
    case ${PRINT_DIR} in
	bin) echo ${TOP}${FILE_SEP}bin ;;
	etc) echo ${CONFIG_DIR} ;;
	include) echo ${TOP}${FILE_SEP}include ;;
	lib) echo ${LIB_DIR} ;;
	stdlib) echo ${STDLIB_DIR} ;;
	*) echo "pkg-conf: Unrecognized option (${PRINT_DIR})"; exit 1 ;;
    esac
    exit 0
fi

[ -n "$config" ] && config="-Dx10.configuration=\"${CONFIG_DIR}${FILE_SEP}${config}\""

classpath=""
[ -n "$dev" ] && classpath="${TOP}${FILE_SEP}..${FILE_SEP}x10.runtime${FILE_SEP}classes${PATH_SEP}"
classpath=".${PATH_SEP}${classpath}${STDLIB_DIR}${FILE_SEP}x10.jar${PATH_SEP}${LIB_DIR}${FILE_SEP}${MATH_JAR}"

if [ -z "$dev" ]; then
  if [[ ! -a "${STDLIB_DIR}${FILE_SEP}x10.jar" ]]; then
    echo >&2 "Error: Cannot find x10 runtime" at "${STDLIB_DIR}${FILE_SEP}x10.jar"
    exit 1
  fi
fi

if [ -n "$extra_cp" ]; then
   classpath="$extra_cp${PATH_SEP}$classpath"
fi

externpath="${LIB_DIR}"
if [ -n "$LD_LIBRARY_PATH" ] ; then
    OLD_IFS="$IFS"
    IFS=':'
    for i in $LD_LIBRARY_PATH ; do
       externpath="$i${PATH_SEP}$externpath"
    done
    IFS="$OLD_IFS"
fi
if [ -n "$extra_lib" ]; then
   externpath="$extra_lib${PATH_SEP}$externpath"
fi

if [[ "$UNAME" = CYGWIN* ]]; then 
    if [ -n "$ENABLE_CYGWIN_MULTIVM" ]; then
        JAVA="$(cygpath -au "$TOP/bin/cyglaunch")"
        launcher="${TOP}${FILE_SEP}bin${FILE_SEP}X10Launcher"
    else
        java_args=("-DX10RT_IMPL=disabled" "${java_args[@]}")
    fi
else
    launcher="${TOP}${FILE_SEP}bin${FILE_SEP}X10Launcher"
fi


# TODO: executable jar
# Note: use bootstrap class path instead of user class path to make it visible from jar file
java_args=("-Djava.library.path=$externpath" -ea -classpath "$classpath" "${java_args[@]}")
#java_args=("-Djava.library.path=$externpath" -ea "-Xbootclasspath/a:$classpath" "${java_args[@]}")

if [ -n "$mx" ]; then
   java_args=("-Xmx$mx" "${java_args[@]}")
fi

java_args=("${java_args[@]}" ${defs})

java_version=
# skip loading test in case of executable jar
if [ -n "$main" ]; then
command=("$JAVA" -showversion "${java_args[@]}" x10.runtime.impl.java.TestClassLoading "$main\$${MAIN_CLASS}")
#[ -n "$verbose" ] && echo "${command[*]}"
java_version=`(
unset X10_NPLACES
"${command[@]}" 2>&1
if [ "$?" -ne "0" ]; then
  echo >&2 "Error: Cannot load main class for" "$main" "with classpath" "$classpath"
  exit 1
fi
)`
fi

[ -n "${java_version}" ] || java_version=`"$JAVA" -version 2>&1`
ibmj9vm=
# following pattern matches with bash 3.2 but doesn't match with bash 4.1
#[[ "${java_version}" =~ ".*IBM J9 VM.*" ]] && ibmj9vm=true
case "${java_version}" in
    *IBM\ J9\ VM*) ibmj9vm=true ;;
esac
ibm64bit=
case "${java_version}" in
    *amd64-64*) ibm64bit=true ;;
    *ppc64-64*) ibm64bit=true ;;
esac
if [ -n "${ibmj9vm}" ]; then
    # use normal optlevel in preloading phase
    java_args=("-Xjit:classLoadPhaseThreshold=10000" "${java_args[@]}")
    java_args=("-Xgcpolicy:gencon" "${java_args[@]}")
#    if [ -n "${ibm64bit}" ]; then
#        java_args=("-Xcompressedrefs" "${java_args[@]}")
#    fi
fi

command=("$JAVA" "${java_args[@]}" $config "${args[@]}")
[ -n "$verbose" ] && echo "${command[*]}"
if [[ "$UNAME" = CYGWIN* && -z "$ENABLE_CYGWIN_MULTIVM" ]]; then
    $time "${command[@]}"
else 
    $time$launcher "${command[@]}"
fi

exit $?
