MAIN_CLASS='$Main'

help=""
time=""
verbose=""
extra_cp=""
extra_lib=""
mx=""
defs=""
dev=""
java_args=""
args=""

while [ -n "$1" ]; do
    case "$1" in
        -h|-help|--help) help="1"; break;;
        -v|-verbose|--verbose) verbose="1";;
        -t|-time) time="time ";;
        -mx) shift; mx="$1";;
        -D*) if [[ "${1##-D}" = java.library.path=* ]]; then
                 echo >&2 "Error: Cannot reset java.library.path, use -libpath instead"
                 exit 1
             fi
             # TODO: add tests for more system properties above
             defs="${defs} $1";;
        -classpath|-cp) shift; extra_cp="$1";;
        -libpath) shift; extra_lib="$1";;
        -config) shift; config="$1.cfg";;
        -dev) dev="true";;
        -J*) java_args="${java_args} '${1##-J}'";;
        -*=*) java_args="${java_args} -Dx10.${1##-}";;
        -*) java_args="${java_args} -Dx10.${1##-}=true";;
#        *.x10) args="$args '${1%%.x10}\$${MAIN_CLASS}'"; shift; args="$args $*"; break;;
        *.jar) args="$args -jar '$1'"; shift; args="$args $*"; break;;
        *) if [[ ! -a "$1\$${MAIN_CLASS}.class" ]]; then
               echo >&2 "Error: Main class not found for" "$1"
               if [[ -a "$1.x10" ]]; then
                   echo >&2 "Invoke x10c" "$1.x10" to compile
               fi
               exit 1
           fi
           args="$args '$1\$${MAIN_CLASS}'"; shift; args="$args $*"; break;;
    esac
    shift
done

if [ -n "$help" -o -z "$args" ]; then
    cat << EOF
Usage: x10 [options] <main-class> [arg0 arg1 ...]
where [options] includes:
    -t -time                 display execution time
    -v -verbose --verbose    print verbose debugging information
    -h -help --help          print this message
    -mx <size>               set max heap size, e.g., -mx 200M
    -D<name>=<value>         set system property <name> to <value>
    -classpath <path>        search path for class files
    -libpath <path>          search path for native libraries
    -config <conf>           (IGNORED) read configuration from etc${FILE_SEP}<conf>.cfg
    -dev                     developer mode (use unpackaged X10 libraries)
    -J<arg>                  [USE WITH CAUTION] pass <arg> directly to java.
        e.g., use -J-verbose to make java execution verbose.
EOF
    exit 1
fi


CONFIG_DIR="${TOP}${FILE_SEP}etc"
LIB_DIR="${TOP}${FILE_SEP}lib"
STDLIB_DIR="${TOP}${FILE_SEP}stdlib"

[ -n "$config" ] && config="-Dx10.configuration=\"${CONFIG_DIR}${FILE_SEP}${config}\""

classpath=""
[ -n "$dev" ] && classpath="${TOP}${FILE_SEP}..${FILE_SEP}x10.runtime${FILE_SEP}classes${PATH_SEP}"
classpath=".${PATH_SEP}${classpath}${STDLIB_DIR}${FILE_SEP}x10.jar${PATH_SEP}${LIB_DIR}${FILE_SEP}${MATH_JAR}"

if [ -n "$extra_cp" ]; then
   classpath="$extra_cp${PATH_SEP}$classpath"
fi

externpath="${LIB_DIR}"
if [ -n "$LD_LIBRARY_PATH" ] ; then
    OLD_IFS="$IFS"
    IFS=':'
    for i in $LD_LIBRARY_PATH ; do
       externpath="$i${PATH_SEP}$externpath"
    done
    IFS="$OLD_IFS"
fi
if [ -n "$extra_lib" ]; then
   externpath="$extra_lib${PATH_SEP}$externpath"
fi

# TODO: executable jar
# Note: use bootstrap class path instead of user class path to make it visible from jar file
java_args="-Djava.library.path=\"$externpath\" -ea -classpath \"$classpath\" ${java_args}"
#java_args="-Djava.library.path=\"$externpath\" -ea -Xbootclasspath/a:\"$classpath\" ${java_args}"

if [ -n "$mx" ]; then
   java_args="-Xmx$mx $java_args"
fi

java_args="${java_args} ${defs}"

# HACK: enforce normal compilation in preloading phase
IBMJ9VM=`"$JAVA" -version 2>&1 | grep 'IBM J9 VM'`
if [ -n "$IBMJ9VM" ]; then java_args="-Xjit:classLoadPhaseThreshold=10000 ${java_args}"; fi

if [[ "$UNAME" = CYGWIN* ]]; then 
   if [ -n "$ENABLE_CYGWIN_MULTIVM" ]; then
       JAVA="$(cygpath -au "$TOP/bin/cyglaunch")"
       command="\"$JAVA\" $java_args $config $args"
       [ -n "$verbose" ] && echo "$command"
       launcher="${TOP}${FILE_SEP}bin${FILE_SEP}X10Launcher"
       eval "$time$launcher $command"
   else
       command="\"$JAVA\" -DX10RT_IMPL=disabled $java_args $config $args"
       [ -n "$verbose" ] && echo "$command"
       eval "$time $command"
   fi
else 
    command="\"$JAVA\" $java_args $config $args"
    [ -n "$verbose" ] && echo "$command"
    launcher="${TOP}${FILE_SEP}bin${FILE_SEP}X10Launcher"
    eval "$time$launcher $command"
fi

exit $?
