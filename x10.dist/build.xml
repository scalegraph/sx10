<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [<!ENTITY buildfile SYSTEM "./build-user.xml">]>
<project name="x10.dist" default="dist" basedir=".">
    &buildfile;
    <property name="x10.home" value="${basedir}/.."/>
    <property name="builddir" value="classes"/>
    <property name="bin" location="${basedir}/bin"/>
    <property name="etc" location="${basedir}/etc"/>
    <property name="incdir" location="${basedir}/include"/>
    <property name="lib" location="${basedir}/lib"/>
    <property name="lpg.jar" value="lpg.jar"/>
    <property name="lpg.jar.url" value="http://dist.codehaus.org/x10/dependencies/lpg.runtime.java_2.0.20.jar"/>
    <property name="ecj.jar" value="ecj.jar"/>
    <property name="ecj.jar.url" value="http://dist.codehaus.org/x10/dependencies/ecj-3.5.1.jar"/>
    <property name="wala.jar" value="wala.jar"/>
    <property name="wala.jar.url" value="http://dist.codehaus.org/x10/dependencies/wala.jar"/>
    <property name="equinox.jar" value="org.eclipse.equinox.common_3.6.0.v20100503.jar"/>
    <property name="equinox.jar.url" value="http://dist.codehaus.org/x10/dependencies/org.eclipse.equinox.common_3.6.0.v20100503.jar"/>
    <property name="math.jar" value="commons-math-2.1.jar"/>
    <property name="math.jar.url" value="http://dist.codehaus.org/x10/dependencies/commons-math-2.1.jar"/>
    <property name="x10.bridge.location" location="${x10.home}/x10.wala"/>
    <property name="bridge.jar" value="x10wala.jar" />
    <property name="x10.constraints.location" location="${x10.home}/x10.constraints"/>
    <property name="constraints.jar" value="x10constraints.jar"/>
    <property name="x10.common.location" location="${x10.home}/x10.common"/>
    <property name="common.jar" value="x10common.jar"/>
    <property name="x10.compiler.location" location="${x10.home}/x10.compiler"/>
    <property name="compiler.jar" value="x10c.jar"/>
    <property name="config" value="standard.cfg"/>
    <property name="x10.runtime.location" location="${x10.home}/x10.runtime"/>
    <property name="runtime.jar" value="x10.jar"/>
    <property name="x10.tests.location" location="${x10.home}/x10.tests"/>
    <path id="project.classpath"/>
    <!-- get the environment variables -->
    <property environment="env"/>

    <target name="init">
        <tstamp/>
        <mkdir dir="${etc}" />
        <mkdir dir="${incdir}" />
        <mkdir dir="${lib}" />
        <condition property="local.lpg.jar" value="${env.LOCAL_LPG_JAR}">
            <isset property="env.LOCAL_LPG_JAR"/>
        </condition>
        <condition property="local.ecj.jar" value="${env.LOCAL_ECJ_JAR}">
            <isset property="env.LOCAL_ECJ_JAR"/>
        </condition>
        <condition property="local.wala.jar" value="${env.LOCAL_WALA_JAR}">
            <isset property="env.LOCAL_WALA_JAR"/>
        </condition>
        <condition property="local.equinox.jar" value="${env.LOCAL_EQUINOX_JAR}">
            <isset property="env.LOCAL_EQUINOX_JAR"/>
        </condition>
        <condition property="local.math.jar" value="${env.LOCAL_MATH_JAR}">
            <isset property="env.LOCAL_MATH_JAR"/>
        </condition>
    </target>

    <target name="clean">
        <delete>
            <fileset dir="${bin}">
                <include name="defs"/>
                <include name="setupX10"/>
                <include name="java_x10rt"/>
                <include name="x10"/>
                <include name="x10c"/>
                <include name="precommit"/>
            </fileset>
        </delete>
    </target>

    <target name="clean-java" depends="clean">
        <delete dir="${etc}" failonerror="false"/>
        <mkdir dir="${etc}" />
        <mkdir dir="${lib}" />
        <delete> <!-- TODO: download jars elsewhere and copy -->
            <fileset dir="${lib}">
                <include name="x10*.jar"/>
            </fileset>
        </delete>
        <!-- TODO: remove generated libs, but not downloaded ones
        <delete dir="${lib}" failonerror="false"/>
        <mkdir dir="${lib}" />
        -->
        <ant antfile="${x10.constraints.location}/build.xml" target="clean" inheritAll="false" dir="${x10.constraints.location}"/>
        <ant antfile="${x10.common.location}/build.xml" target="clean" inheritAll="false" dir="${x10.common.location}"/>
        <ant antfile="${x10.runtime.location}/build.xml" target="clean-java" inheritAll="false" dir="${x10.runtime.location}"/>
        <ant antfile="${x10.compiler.location}/build.xml" target="clean" inheritAll="false" dir="${x10.compiler.location}"/>
    </target>

    <target name="clean-cpp" depends="clean-java">
        <delete dir="${incdir}" failonerror="false"/>
        <mkdir dir="${incdir}" />
        <mkdir dir="${lib}" />
        <delete> <!-- TODO: download jars elsewhere and copy -->
            <fileset dir="${lib}">
                <include name="*.a"/>
                <include name="*.la"/>
                <include name="*.so"/>
                <include name="*.dylib"/>
                <include name="*.dll"/>
                <include name="*.mft"/>
            </fileset>
        </delete>
        <!-- TODO: remove generated libs, but not downloaded ones
        <delete dir="${lib}" failonerror="false"/>
        <mkdir dir="${lib}" />
        -->
        <ant antfile="${x10.runtime.location}/build.xml" target="clean" inheritAll="false" dir="${x10.runtime.location}"/>
    </target>

    <target name="squeakyclean" depends="clean-java,clean-cpp,clean-bridge"/>

    <target name="distclean" depends="squeakyclean">
        <delete dir="${lib}" failonerror="false"/>
        <mkdir dir="${lib}" />
        <ant antfile="${x10.runtime.location}/build.xml" target="distclean" inheritAll="false" dir="${x10.runtime.location}"/>
    </target>

    <target name="clean-bridge">
        <delete>
            <fileset dir="${lib}">
                <include name="${bridge.jar}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist-java" depends="init,build,common-jar,constraints-jar,compiler-jar,runtime-java"/>
    <target name="dist-cpp" depends="dist-java,runtime-cpp"/>
    <target name="dist" depends="dist-java,dist-cpp,dist-bridge"/>
    <target name="dist-java-cpp" depends="init,build,common-jar,constraints-jar,compiler-jar">
        <ant antfile="${x10.runtime.location}/build.xml" target="dist-par" inheritAll="false" dir="${x10.runtime.location}"/>
    </target>
    <target name="dist-par" depends="init,build,common-jar,constraints-jar,compiler-jar,dist-java-cpp,dist-bridge"/>
    <target name="dist-bridge" depends="dist-java,bridge-jar"/>

    <target name="check-jar-cache" depends="init">
        <available property="lpg.jar.present" file="${lib}/${lpg.jar}"/>
        <available property="ecj.jar.present" file="${lib}/${ecj.jar}"/>
        <available property="wala.jar.present" file="${lib}/${wala.jar}"/>
        <available property="equinox.jar.present" file="${lib}/${equinox.jar}"/>
        <available property="math.jar.present" file="${lib}/${math.jar}"/>
        <condition property="cache.up-to-date">
            <and>
                <isset property="lpg.jar.present"/>
                <isset property="ecj.jar.present"/>
                <isset property="wala.jar.present"/>
                <isset property="equinox.jar.present"/>
                <isset property="math.jar.present"/>
            </and>
        </condition>
    </target>

    <target name="lpg-jar" depends="init,lpg-local-jar" unless="local.lpg.jar">
        <mkdir dir="${lib}"/>
        <get usetimestamp="true" src="${lpg.jar.url}" dest="${lib}/${lpg.jar}"/>
        <delete file="${lib}/lpgruntime.jar"/>
        <available property="lpg.jar.present" file="${lib}/${lpg.jar}"/>
        <fail message="Unable to get ${lpg.jar} from ${lpg.jar.url}" unless="lpg.jar.present"/>
    </target>
    <target name="lpg-local-jar" depends="init" if="local.lpg.jar">
        <mkdir dir="${lib}"/>
        <copy file="${local.lpg.jar}" tofile="${lib}/${lpg.jar}"/>
        <available property="lpg.jar.present" file="${lib}/${lpg.jar}"/>
        <fail message="Unable to find ${lpg.jar} at ${local.lpg.jar}" unless="lpg.jar.present"/>
    </target>

    <target name="ecj-jar" depends="init,ecj-local-jar" unless="local.ecj.jar">
        <mkdir dir="${lib}"/>
        <get usetimestamp="true" src="${ecj.jar.url}" dest="${lib}/${ecj.jar}"/>
        <available property="ecj.jar.present" file="${lib}/${ecj.jar}"/>
        <fail message="Unable to get ${ecj.jar} from ${ecj.jar.url}" unless="ecj.jar.present"/>
    </target>
    <target name="ecj-local-jar" depends="init" if="local.ecj.jar">
        <mkdir dir="${lib}"/>
        <copy file="${local.ecj.jar}" tofile="${lib}/${ecj.jar}"/>
        <available property="ecj.jar.present" file="${lib}/${ecj.jar}"/>
        <fail message="Unable to find ${ecj.jar} at ${local.ecj.jar}" unless="ecj.jar.present"/>
    </target>

    <target name="wala-jar" depends="init,wala-local-jar" unless="local.wala.jar">
        <mkdir dir="${lib}"/>
        <get usetimestamp="true" src="${wala.jar.url}" dest="${lib}/${wala.jar}"/>
        <available property="wala.jar.present" file="${lib}/${wala.jar}"/>
        <fail message="Unable to get ${wala.jar} from ${wala.jar.url}" unless="wala.jar.present"/>
    </target>
    <target name="wala-local-jar" depends="init" if="local.wala.jar">
        <mkdir dir="${lib}"/>
        <copy file="${local.wala.jar}" tofile="${lib}/${wala.jar}"/>
        <available property="wala.jar.present" file="${lib}/${wala.jar}"/>
        <fail message="Unable to find ${wala.jar} at ${local.wala.jar}" unless="wala.jar.present"/>
    </target>

    <target name="equinox-jar" depends="init,equinox-local-jar" unless="local.equinox.jar">
        <mkdir dir="${lib}"/>
        <get usetimestamp="true" src="${equinox.jar.url}" dest="${lib}/${equinox.jar}"/>
        <available property="equinox.jar.present" file="${lib}/${equinox.jar}"/>
        <fail message="Unable to get ${equinox.jar} from ${equinox.jar.url}" unless="equinox.jar.present"/>
    </target>
    <target name="equinox-local-jar" depends="init" if="local.equinox.jar">
        <mkdir dir="${lib}"/>
        <copy file="${local.equinox.jar}" tofile="${lib}/${equinox.jar}"/>
        <available property="equinox.jar.present" file="${lib}/${equinox.jar}"/>
        <fail message="Unable to find ${equinox.jar} at ${local.equinox.jar}" unless="equinox.jar.present"/>
    </target>

    <target name="math-jar" depends="init,math-local-jar" unless="local.math.jar">
        <mkdir dir="${lib}"/>
        <get usetimestamp="true" src="${math.jar.url}" dest="${lib}/${math.jar}"/>
        <available property="math.jar.present" file="${lib}/${math.jar}"/>
        <fail message="Unable to get ${math.jar} from ${math.jar.url}" unless="math.jar.present"/>
    </target>
    <target name="math-local-jar" depends="init" if="local.math.jar">
        <mkdir dir="${lib}"/>
        <copy file="${local.math.jar}" tofile="${lib}/${math.jar}"/>
        <available property="math.jar.present" file="${lib}/${math.jar}"/>
        <fail message="Unable to find ${math.jar} at ${local.math.jar}" unless="math.jar.present"/>
    </target>

    <target name="update-jar-cache" depends="init,lpg-jar,ecj-jar,wala-jar,equinox-jar,math-jar"/>

    <target name="prereq-jars" depends="init,check-jar-cache" unless="cache.up-to-date">
        <antcall target="update-jar-cache"/>
    </target>

    <target name="build" depends="init,bin,etc,prereq-jars">
        <echo message="${ant.project.name}: ${ant.file}"/>
    </target>

    <target name="runtime-java" depends="init,common-jar,constraints-jar">
        <ant antfile="${x10.runtime.location}/build.xml" target="dist-java" inheritAll="false" dir="${x10.runtime.location}"/>
    </target>

    <target name="runtime-cpp" depends="init">
        <ant antfile="${x10.runtime.location}/build.xml" target="dist-cpp" inheritAll="false" dir="${x10.runtime.location}"/>
    </target>

    <target name="bridge-jar" depends="init,compiler-jar">
        <ant antfile="${x10.bridge.location}/build.xml" target="jar" inheritAll="false" dir="${x10.bridge.location}"/>
        <mkdir dir="${lib}"/>
        <copy todir="${lib}">
            <fileset dir="${x10.bridge.location}/bin" includes="${bridge.jar}"/>
        </copy>
    </target>

    <target name="constraints-jar" depends="init">
        <ant antfile="${x10.constraints.location}/build.xml" target="build" inheritAll="false" dir="${x10.constraints.location}"/>
        <!--
        <ant antfile="${x10.constraints.location}/build.xml" target="jar" inheritAll="false" dir="${x10.constraints.location}"/>
        <mkdir dir="${lib}"/>
        <copy todir="${lib}">
            <fileset dir="${x10.constraints.location}/${builddir}" includes="${constraints.jar}"/>
        </copy>
        -->
    </target>

    <target name="common-jar" depends="init">
        <ant antfile="${x10.common.location}/build.xml" target="build" inheritAll="false" dir="${x10.common.location}"/>
        <!--
        <ant antfile="${x10.common.location}/build.xml" target="jar" inheritAll="false" dir="${x10.common.location}"/>
        <mkdir dir="${lib}"/>
        <copy todir="${lib}">
            <fileset dir="${x10.common.location}/${builddir}" includes="${common.jar}"/>
        </copy>
        -->
    </target>

    <target name="compiler-jar" depends="init,common-jar,constraints-jar">
        <ant antfile="${x10.compiler.location}/build.xml" target="jar" inheritAll="false" dir="${x10.compiler.location}"/>
        <mkdir dir="${lib}"/>
        <copy todir="${lib}">
            <fileset dir="${x10.compiler.location}/${builddir}" includes="${compiler.jar}"/>
        </copy>
    </target>

    <target name="bin"
            description="configure bin directory"
            depends="bin-deps"
            unless="bin.up-to-date">
        <antcall target="setupX10"/>
        <antcall target="x10"/>
        <antcall target="x10c"/>
        <antcall target="precommit"/>
        <antcall target="java_x10rt"/>
    </target>

    <target name="etc"
            description="configure etc directory"
            depends="etc-deps"
            unless="etc.up-to-date">
        <antcall target="config"/>
    </target>

    <target name="etc-deps">
        <condition property="etc.up-to-date">
            <!-- Cannot simply say <true/> -->
            <istrue value="true"/>
        </condition>
    </target>

    <target name="bin-deps">
        <uptodate property="setupX10.up-to-date" targetfile="${bin}/setupX10">
            <srcfiles file="${ant.file}"/>
            <srcfiles file="${bin}/setupX10.in"/>
        </uptodate>
        <uptodate property="x10.up-to-date" targetfile="${bin}/x10">
            <srcfiles file="${ant.file}"/>
            <srcfiles file="${bin}/x10.in"/>
        </uptodate>
        <uptodate property="x10c.up-to-date" targetfile="${bin}/x10c">
            <srcfiles file="${ant.file}"/>
            <srcfiles file="${bin}/x10c.in"/>
        </uptodate>
        <uptodate property="precommit.up-to-date" targetfile="${bin}/precommit">
            <srcfiles file="${ant.file}"/>
            <srcfiles file="${bin}/precommit.in"/>
        </uptodate>
        <uptodate property="java_x10rt.up-to-date" targetfile="${bin}/java_x10rt">
            <srcfiles file="${ant.file}"/>
            <srcfiles file="${bin}/java_x10rt.in"/>
        </uptodate>
        <condition property="bin.up-to-date">
            <and>
                <isset property="setupX10.up-to-date"/>
                <isset property="precommit.up-to-date"/>
                <isset property="x10.up-to-date"/>
                <isset property="x10c.up-to-date"/>
                <isset property="java_x10rt.up-to-date"/>
            </and>
        </condition>
    </target>

    <target name="config"
            description="creates the default config file">
        <mkdir dir="${etc}"/>
        <copy todir="${etc}">
            <fileset dir="${x10.compiler.location}/etc" includes="${config}"/>
        </copy>
    </target>

    <target name="defs-deps">
        <condition property="defs.up-to-date">
            <uptodate targetfile="${bin}/defs" srcfile="${ant.file}"/>
        </condition>
    </target>

    <target name="find-java">
        <echo message="JAVA_HOME = '${env.JAVA_HOME}'"/>
        <echo message="java.home = '${java.home}'"/>
        <!-- First check in $JAVA_HOME/bin -->
        <condition property="java.executable"
                   value="${env.JAVA_HOME}${file.separator}bin${file.separator}java">
            <or>
                <available file="${env.JAVA_HOME}${file.separator}bin${file.separator}java"/>
                <available file="${env.JAVA_HOME}${file.separator}bin${file.separator}java.exe"/>
            </or>
        </condition>
        <!-- Now check in ${java.home}/bin -->
        <condition property="java.executable"
                   value="${java.home}${file.separator}bin${file.separator}java">
            <and>
                <not>
                    <isset property="java.executable"/>
                </not>
                <or>
                    <available file="${java.home}${file.separator}bin${file.separator}java"/>
                    <available file="${java.home}${file.separator}bin${file.separator}java.exe"/>
                </or>
            </and>
        </condition>
        <fail message="Could not find the java executable" unless="java.executable"/>
        <echo message="JAVA = '${java.executable}'"/>
    </target>

    <target name="executable-defs" depends="find-java,defs-deps" unless="defs.up-to-date"
            description="creates a file containing common environment variable definitions">
        <echo message="Creating ${bin}/defs"/>
        <echo message="FILE_SEP = '${file.separator}'"/>
        <echo message="PATH_SEP = '${path.separator}'"/>
        <echo message="X10_PLATFORM = '${env.X10_PLATFORM}'"/>
        <echo message="TOP = '${basedir}'"/>
        <!-- TODO: some of this is x10c-specific; factor out into x10c.in -->
	<echo file="${bin}/defs" append="no">#!/usr/bin/env bash
# DO NOT EDIT - This file was automatically generated.
UNAME=`uname -smp | sed -e 's/ /,/g'`
FILE_SEP='/'; if [[ "$UNAME" = CYGWIN* ]]; then FILE_SEP='\\'; fi
PATH_SEP=':'; if [[ "$UNAME" = CYGWIN* ]]; then PATH_SEP=';'; fi

prog="$(readlink "$0" 2&gt;&amp;1)"
[ $? -eq 127 -o "$prog" = "" ] &amp;&amp; prog="$0"
TOP="$(cd "$(dirname "$prog")/.." &amp;&amp; pwd)"
if [[ "$UNAME" = CYGWIN* ]]; then TOP="$(cygpath -am "$TOP")"; fi

[ -n "$JAVA_HOME" ] || JAVA_HOME='${env.JAVA_HOME}'
[ -n "$JRE_HOME" ] || JRE_HOME='${java.home}'
if [[ "$UNAME" = CYGWIN* ]]; then JAVA_HOME="$(cygpath -am "$JAVA_HOME")"; JRE_HOME="$(cygpath -am "$JRE_HOME")"; fi
if [ -n "$JAVA_HOME" -a -e "$JAVA_HOME/bin/java" ]; then
    JAVA="$JAVA_HOME/bin/java"
    JAR="$JAVA_HOME/bin/jar"
elif [ -n "$JRE_HOME" -a -e "$JRE_HOME/bin/java" ]; then
    JAVA="$JRE_HOME/bin/java"
    JAR="$JRE_HOME/bin/jar"
else
    echo "JAVA_HOME ($JAVA_HOME) is not pointing to a JRE or a JDK"
    exit 1
fi
if [[ "$UNAME" = CYGWIN* ]]; then JAVA="$(cygpath -au "$JAVA")"; JAR="$(cygpath -au "$JAR")"; fi

[ -n "$X10_PLATFORM" ] || \
case "$UNAME" in
  CYGWIN*,i*86,*) export X10_PLATFORM='win32_x86';;
  Linux,*86*,*) export X10_PLATFORM='linux_x86';;
  Linux,ppc*,*) export X10_PLATFORM='linux_ppc';;
  AIX,*,powerpc) export X10_PLATFORM='aix_ppc';;
  Darwin,*,i*86) export X10_PLATFORM='macosx_x86';;
  Darwin,*,powerpc) export X10_PLATFORM='macosx_ppc';;
  SunOS,*,sparc) export X10_PLATFORM='sunos_sparc';;
  FreeBSD,*64*,*) export X10_PLATFORM='freebsd_amd64';;
  *) echo "Unrecognized platform: '$UNAME'"; exit 1;;
esac
# NOTE: the above assumes that Cygwin==win32 (probably valid)

#CONFIG_FILE='${config}'
LPG_JAR='${lpg.jar}'
ECJ_JAR='${ecj.jar}'
WALA_JAR='${wala.jar}'
MATH_JAR='${math.jar}'
LPG_URL='${lpg.jar.url}'
ECJ_URL='${ecj.jar.url}'
WALA_URL='${wala.jar.url}'


</echo>
    </target>

    <target name="setupX10" unless="setupX10.up-to-date"
            depends="executable-defs"
            description="creates a configuration script for x10">
        <echo message="Creating ${bin}/setupX10"/>
        <concat destfile="${bin}/setupX10" append="no">
            <filelist dir="${bin}" files="defs"/>
        </concat>
        <concat destfile="${bin}/setupX10" append="yes">
            <filelist dir="${bin}" files="setupX10.in"/>
        </concat>

        <chmod perm="+x" file="${bin}/x10"/>

        <delete file="${bin}/defs"/>
    </target>

    <target name="x10c" unless="x10c.up-to-date"
            depends="executable-defs"
            description="creates the executable script x10c">
        <echo message="Creating ${bin}/x10c"/>
        <concat destfile="${bin}/x10c" append="no">
            <filelist dir="${bin}" files="defs"/>
        </concat>
        <concat destfile="${bin}/x10c" append="yes">
            <filelist dir="${bin}" files="x10c.in"/>
        </concat>

        <chmod perm="+x" file="${bin}/x10c"/>

        <delete file="${bin}/defs"/>
    </target>

    <target name="precommit" unless="precommit.up-to-date"
            depends="executable-defs"
            description="creates the executable script precommit">
        <echo message="Creating ${bin}/precommit"/>
        <concat destfile="${bin}/precommit" append="no">
            <filelist dir="${bin}" files="defs"/>
        </concat>
        <concat destfile="${bin}/precommit" append="yes">
            <filelist dir="${bin}" files="precommit.in"/>
        </concat>

        <chmod perm="+x" file="${bin}/precommit"/>

        <delete file="${bin}/defs"/>
    </target>

    <target name="x10" unless="x10.up-to-date"
            depends="executable-defs"
            description="creates the executable script x10">
        <echo message="Creating ${bin}/x10"/>
        <concat destfile="${bin}/x10" append="no">
            <filelist dir="${bin}" files="defs"/>
        </concat>
        <concat destfile="${bin}/x10" append="yes">
            <filelist dir="${bin}" files="x10.in"/>
        </concat>

        <chmod perm="+x" file="${bin}/x10"/>

        <delete file="${bin}/defs"/>
    </target>

    <target name="java_x10rt" unless="java_x10rt.up-to-date"
            depends="executable-defs"
            description="creates the executable script java_x10rt">
        <echo message="Creating ${bin}/java_x10rt"/>
        <concat destfile="${bin}/java_x10rt" append="no">
            <filelist dir="${bin}" files="defs"/>
        </concat>
        <concat destfile="${bin}/java_x10rt" append="yes">
            <filelist dir="${bin}" files="java_x10rt.in"/>
        </concat>

        <chmod perm="+x" file="${bin}/java_x10rt"/>

        <delete file="${bin}/defs"/>
    </target>

    <!-- the following lines have only ever been tested on AIX -->
    <!-- they build the LAPI support library -->
    <target name="buildLAPISupportTask">
        <javac srcdir="${src}/lapi_support" destdir="${src}/lapi_support"/>
    </target>

    <target name="declareLAPISupportTask" depends="buildLAPISupportTask">
        <taskdef name="buildLAPISupport"
                 classname="LAPISupportantTask"
                 classpath="${src}/lapi_support"/>
    </target>

    <target name="lapi-support" depends="declareLAPISupportTask">
        <buildLAPISupport srcdir="${src}/lapi_support" classes="${builddir}" bindir="${bin}">
        </buildLAPISupport>
    </target>
    <!-- the preceding lines have only ever been tested on AIX -->

    <target name="zip-version" depends="init" unless="zip.version">
        <property name="zip.version" value="${DSTAMP}-${TSTAMP}"/>
    </target>
    <target name="src-zip-version" depends="init,zip-version" unless="src.zip.version">
        <property name="src.zip.version" value="${zip.version}-src"/>
    </target>
    <target name="test-zip-version" depends="init,zip-version" unless="test.zip.version">
        <property name="test.zip.version" value="${zip.version}-testsuite"/>
    </target>
    <target name="zip-location" depends="init" unless="zip.location">
        <property name="zip.location" value="${x10.home}"/>
    </target>
    <target name="src-zip-location" depends="init,zip-location" unless="src.zip.location">
        <property name="src.zip.location" value="${zip.location}"/>
    </target>
    <target name="test-zip-location" depends="init,zip-location" unless="test.zip.location">
        <property name="test.zip.location" value="${zip.location}"/>
    </target>
    <target name="set-version" depends="init,zip-version,src-zip-version,test-zip-version"/>
    <target name="set-zip-location" depends="init,zip-location,src-zip-location,test-zip-location"/>
    <target name="zip" depends="set-version,set-zip-location,dist">
        <zip destfile="${zip.location}/x10-${zip.version}.zip">
            <zipfileset prefix="" dir="${basedir}" includes="epl-v10.html,RELEASE.NOTES,INSTALL"/>
            <zipfileset prefix="bin" dir="${basedir}/bin" includes="setupX10,x10,x10c"/>
            <zipfileset prefix="doc" dir="${basedir}/doc" excludes="releng/**,**/.*.swp"/>
            <zipfileset prefix="etc" dir="${etc}" includes="${config}"/>
            <zipfileset prefix="lib" dir="${lib}" includes="*.jar"/>
            <zipfileset prefix="samples" dir="${basedir}/samples" excludes="**/.*.swp"/>
        </zip>
    </target>
    <target name="src-zip" depends="srczip"/>
    <target name="srczip" depends="set-version,set-zip-location,build">
        <zip destfile="${src.zip.location}/x10-${src.zip.version}.zip">
            <zipfileset prefix="" dir="${basedir}" includes="epl-v10.html,RELEASE.NOTES,BUILD"/>
            <zipfileset prefix="" dir="${x10.tests.location}" includes="TESTING"/>
            <zipfileset prefix="x10.dist" dir="${basedir}" excludes="releng/**,**/.*.swp,lib/**,etc/**" includes=".launchConfigs/*,.classpath,.project,README,INSTALL,build*,exportPlugin.xml,bin/*.in,bin/x10c++,lib/${lpg.jar},lib/${ecj.jar},samples/**"/>
            <zipfileset prefix="x10.compiler" dir="${x10.compiler.location}" excludes="releng/**,**/.*.swp,classes/**"/>
            <zipfileset prefix="x10.runtime" dir="${x10.runtime.location}" excludes="releng/**,**/.*.swp,classes/**,src-cpp/gen/**"/>
            <zipfileset prefix="x10.constraints" dir="${x10.constraints.location}" excludes="releng/**,**/.*.swp,classes/**"/>
            <zipfileset prefix="x10.common" dir="${x10.common.location}" excludes="releng/**,**/.*.swp,classes/**"/>
            <zipfileset prefix="x10.tests" dir="${x10.tests.location}" excludes="releng/**,**/.*.swp,lib/**,etc/**" includes="build*,README,bin/*.in,bin/testScript*,bin/newpgrp,bin/listFailures,examples/README,**/*.x10,**/.ThisIsAnX10TestDirectory"/>
        </zip>
    </target>
    <target name="test-zip" depends="testzip"/>
    <target name="testzip" depends="set-version,set-zip-location,build">
        <zip destfile="${test.zip.location}/x10-${test.zip.version}.zip">
            <zipfileset fullpath="TESTS-README" dir="${x10.tests.location}" includes="README"/>
            <zipfileset prefix="" dir="${basedir}" includes="epl-v10.html"/>
            <zipfileset prefix="" dir="${x10.tests.location}" includes="projectList.txt"/>
            <zipfileset prefix="" dir="${x10.tests.location}" excludes="releng/**,**/.*.swp,lib/**,etc/**" includes="build*,bin/*.in,bin/testScript*,bin/newpgrp,bin/listFailures,examples/README,**/*.x10,**/.ThisIsAnX10TestDirectory"/>
            <!--<zipfileset prefix="" dir="${x10.tests.location}" excludes="releng/**,**/.*.swp,lib/**,etc/**" includes="examples/Constructs/Extern/*Impl.c*"/> TODO-->
        </zip>
    </target>
    <!--
      To build a zip with a specific version (VER), invoke the target below as
         ant -Dzip.version=VER zips
    -->
    <target name="zips" depends="zip,srczip,testzip"/>

</project>
