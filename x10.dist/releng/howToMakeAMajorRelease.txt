Notes on how to make an X10 Release.

A number of artifacts are produced as part of making an X10 release.
The main artifacts are:

   1. A source release of X10.
   2. A source release of the X10 test suite.
   3. A source release of the X10 benchmarks and applications
   4. Binary platform-dependent releases that contain both the Java 
      and C++ backend and runtimes for each supported OS/hardware target.
   5. X10DT all-in-one-zips and update sites.
   6. PDF of the X10 language specification

The following is the procedure used to make a release of X10 and X10DT.

I. Just before creating the release branch of X10 and X10DT

   1. Update the version information in x10.compiler/src/x10/Version.java

   2. Update the plugin manifest version in all MANIFEST.MF files in 
      X10 and X10DT core projects. Also update product files, properties
      etc. in X10DT (do recursive find/grep to find previous verison number 
      and change it)

II. Create the release branch and enter into final testing phase

   1. Have up-to-date clones of all X10 git repositories that contribute to
      a release: x10, x10dt, x10-applications, x10-benchmarks, x10-documentation.

   2. We usually only create a true release branch for the X10 repo. In practice,
      we rarely make changes during the release process in the other repositories
      that we don't want in the release.  So, we branch X10 but continue to work
      on master for all the other repos until it is time to tag.
      In the X10 repo,
        git branch x10-2.5.3
        git push origin x10-2.5.3

   3. Clone the appropriate Build and Test jobs in Jenkins 
      to enable testing on the branch of X10 you just created.

   4. If fixes need to be applied to the release after it is created, apply 
      fixes to master first. After they pass regression testing on master, 
      pull them over to the release branch using normal git operations. 
      In short,
          git checkout x10-2.5.3
          git cherry-pick <HASH OF DESIRED COMMIT>
          git commit/push

III. When all necessary fixes have been propagated to the release branch,
     one can tag the release in git and build the actual release artifacts:

   1. Update JIRA version management to indicate that version has been released.

   2. Edit and commit release notes to the master branch of X10 and to the 
      release branch. Release notes can be mostly generated from JIRA.
      
      Also put highlights from the release notes into x10dt.help/html/whatsNew
      and update the toc to include the new page you just created.

   3. Tag the release on the release branch in X10.
        git checkout x10-2.5.3
        git tag -a SF_RELEASE_2_5_3 -m "X10 2.5.3 release"
        git push origin SF_RELEASE_2_5_3

   4. Use the same tag you used for X10 (SF_RELEASE_2_5_3) to tag the master branch of 
      x10dt, x10-applications, and x10-benchmarks.

   5. Go to Jenkins, select the Package-X10-Release job and then select
      "Build With Parameters".  Select the appropriate tag, fill in
      the version number, and other parameters then hit the 'Build' button.
      Note, depending on how loaded slave machines are this step may take
      several hours to complete.  Tarballs will be automatically published
      on orquesta at the end of the job.  They are staged on the jenkins master
      node in the userContent directory until all sub-builds complete/fail.  
      The BlueGene/Q build is not integrated with Jenkins; you will need to 
      use masterBuildRelease.sh create it:
          ./masterBuildRelease.sh -skip_source -version 2.5.0 -tag SF_RELEASE_2_5_0 -nodebug -hosts bgqfen1

   6. Once the X10 tarballs are available on orquesta, you can build X10DT.
      This is also done using Jenkins. Select the "X10DT-Release-Build" job
      and then select "Build With Parameters". Fill in the tags for X10,X10DT,
      and the version number then hit the 'Build' button. 

   7. ssh into shell.sf.net and create a subdirectory of 
      /home/frs/project/x/x1/x10 to hold the downloads. 
      Use sftp to move all of the release artifacts from orquesta to sf.
      Use SF web admin API to set the default downloads for each OS 
      platform to the new files

   8. ssh into shell.sf.net and create a subdirectory of 
      /home/frs/project/x/x1/x10dt to hold the downloads. 
      Use sftp to move all of the release artifacts from orquesta to sf.

   9. ssh into shell.sf.net and create a subdirectory of 
      /home/project-web/x10/htdocs/x10dt to hold the x10dt update site.
      create an updateSite subdir of the new directory and unzip the
      update site zip from the download section into it.

   10. Make sure language manual has the right version, date, etc. 
       Tag the language manual
        git tag -a SF_RELEASE_2_5_3 -m "X10 2.5.3 release"
        git push origin SF_RELEASE_2_5_3

      Put language spec pdf in project web space at x10.sourceforge.net
      Update in place x10-latest.pdf in addition to creating a 
      x10-<version>.pdf. 
      The release page itself will point to the x10-<version>.pdf. 
      All of the other parts of the website refer to x10-latest.pdf.

   11. Generate new x10doc and upload to project web space at x10.sourceforge.net
      update the "latest" sym link to point to the new directory.

   12. Create a release page for the new release on the web site.  
      Update the "X10 Releases" page to link to the new download version.
      Update the "latest release" menu item in Downloads-submenu to point to 
      the new release page.
      Create a redirect entry to get a nice external URL 
         (eg  http://x10-lang.org/releases/x10-release-223) for the release.

   13. Post release announcement in SF news and web page front-page news.

   14. Send out mail announcements to x10-users and x10-announce
