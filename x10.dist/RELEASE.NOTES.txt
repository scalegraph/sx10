X10 Release 2.5.0

HIGHLIGHTS OF THIS RELEASE

X10 Release 2.5.0 includes a redesign of several X10 standard library
APIs to better support Resilient and Elastic X10.  In particular, we
have rethought various aspects of Place-related functionality to more
naturally support execution over a dynamically varying set of
Places. For all the details, please see the X10Doc for Place,
PlaceGroup, and PlaceTopology. Some of the key changes are:
  + The removal of static constants such as PlaceGroup.WORLD,
    and Place.MAX_PLACES. They are replaced by Place.places()
    and Place.numPlaces() which return values that represent
    the current view on the dynamically changeable set of Places
    available to the computation.
  + The removal of iteration functionality (next/prev) from Place.
    This functionality is now provided only through PlaceGroup.
  + The addition of PlaceTopology to provide a more flexible set of
    APIs describing the topological relationships of Places.

X10 2.5.0 is the first release of X10 to include an integration of
Resilient/Elastic Managed X10 with the Hazelcast In-Memory Data
Grid. Although the integration is still a work in progress, X10 2.5.0
does enable initial exploration of the combination of X10's APGAS
programming model with a resilient/elastic in-memory data grid. 

X10 2.5.0 also includes a set of enabling runtime system changes to
better support the embedding of X10 and the XRX runtime into larger
programs written in other programming languages.  These changes are
surfaced to the programmer via a new set of APIs on x10.lang.Runtime
that support initializing the XRX runtime, submitting jobs for
execution by the XRX runtime, job cancellation, and runtime shutdown. 

A backwards incompatible change to the x10.util.Map interface removes
the usage of x10.util.Box on the return value of the put and get
methods of Map by requiring that Values stored in Map satisfy the
haszero constraint (XTENLANG-573).  This may require adjustment in
application code that uses implementation of x10.util.Map. 

For additional information about Resilient and Elastic X10, please see
samples/resiliency and the x10-lang.org website.

LIMITATIONS OF THIS RELEASE

The size and index of arrays must be less than 2^31 with Managed X10.
An attempt to allocate a longer array causes IllegalArgumentException. 

The following features described in the 2.5 language manual do not
currently work and may be fixed in the subsequent releases:
  - Non-static type definitions as class or interface members
    (static type defs do work)

The constraint solver used by X10 typechecker is known to be incomplete 
for situations in which a constraint implies an infinite number of 
distinct constraints.

Additionally, the following features described in the language
manual do not currently work with Native X10.
  - Non-final generic instance methods
  - Exception stack traces on Cygwin

The generated C++ code requires g++ 4.2 or better to be compiled; 
we do almost all of our testing against g++ 4.4.
  + On Power/Linux and BG/Q, you may either use g++ 4.2 or better
    or xlC 11.1 or better. 

SUMMARY OF ISSUES RESOLVED IN THIS RELEASE

Below is a summary of JIRA issues addressed for the X10 2.5.0

TODO:

For the details of JIRA issues fixed in this release, see
URL HERE:

Please use the X10 JIRA to report bugs, after ensuring the problem is
not already reported:
http://jira.codehaus.org/secure/IssueNavigator.jspa?reset=true&&pid=11812&resolution=-1
