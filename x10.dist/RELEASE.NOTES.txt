Release 2.3.0

MAJOR CHANGES

The following major changes were made in the X10 language
specification and implementation in this release.

X10 2.3.0 introduces significant improvements in X10/Java
interoperability.  A few backwards compatible language enhancements
and some some non backwards-compatible class library changes were made
to improve the quality of Java interoperability.
  - Java types may now be imported/used in X10 programs just 
    as-if they were X10 types.
  - An isref predicate (similar to iszero) has been added to
    X10's constraint language to enable identification of types
    that are constrained to be representable as a pointer.
  - X10 classes are no longer required to inherit from a single
    root class (x10.lang.Object).  
  - x10.lang.Object has been removed from the standard library.
  - The exception hierarchy has been changed and checked exceptions
    and a throws clauses were reintroduced.  The exception hierarchy 
    now aligns neatly with Java's, although X10 prefers using 
    unchecked exceptions as much as possible.
For more details on these changes and some advice on porting code from
X10 2.2.3 to X10 2.3.0, please see the Changelog section of X10 language 
specification.

Please consult the language specification for the details of
any minor language changes and specification clarifications made in
this release.

LIMITATIONS OF THIS RELEASE

The following features described in the 2.3.0 language manual do not
currently work and may be fixed in the subsequent releases:
  - Non-static type definitions as class or interface members
    (static type defs do work)

The constraint solver used by X10 typechecker is known to be incomplete 
for situations in which a constraint implies an infinite number of 
distinct constraints.

Additionally, the following features described in the language
manual do not currently work with the C++ backend and will be fixed in
the subsequent releases:
  - Garbage collection on AIX
  - Non-final generic instance methods
  - Exception stack traces on Cygwin

Although greatly improved from previous releases, the X10 runtime 
still uses a modified "busy wait" loop in the worker threads that 
execute asyncs. A consequence of this is that even if a Place has 
no asyncs to execute, one worker thread in the Place will still consume
CPU cycles busy waiting for messages to arrive from the network.  

The generated C++ code requires g++ 4.2 or better to be compiled; 
we do almost all of our testing against g++ 4.3.2.  On AIX, you
may either use g++ 4.2 or better or xlC 10.1.0.4 or better.

SUMMARY OF ISSUES RESOLVED IN THIS RELEASE

Below is a summary of JIRA issues addressed for the X10 2.3.0


TODO FILL FROM JIRA.



For the details of JIRA issues fixed in this release, see
http://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=11812&version=NNNNNN-TODO-TODO

Please use the X10 JIRA to report bugs, after ensuring the problem is
not already reported:
http://jira.codehaus.org/secure/IssueNavigator.jspa?reset=true&&pid=11812&resolution=-1

