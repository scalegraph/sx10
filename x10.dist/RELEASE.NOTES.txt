Release 2.2.1

MAJOR CHANGES

No major changes have been made to the language specification 
in this release.  The following major changes have been made to the
implementation and the class libraries.

  The + and - operators were removed from the IntRange class and
  replaced by a translate method.  The motivation for this API change
  was to avoid a common programming mistake:
    for (i in 0..n-1) { ... }
  In the loop above, i actually ranges from -1 to n-1 because .. has higher
  precedence than - (to support concise region products like 0..n*0..n).
  In 2.2.1 this loop will be flagged as a compile time error; write it as:
    for (i in 0..(n-1)) { ... }

  Managed X10 now uses Java built-in primitives to implement unsigned
  X10 structs (UInt, ULong, etc).  This significantly improves the 
  performance of unsigned types with Managed X10.

  We have implemented a new custom serialization protocol for Managed X10,
  resulting in significant performance improvements for multi-place programs
  on Managed X10.

  The built-in numeric structs (Int, ULong, Double, etc) now implement
  the interfaces, Arithmetic, Bitwise and Ordered (as appropriate).  
  This enables writing generic code over types that implement common operations
  such as +, *, <=, etc.

Please consult the language specification for the details of
any minor language changes and specification clarifications made in
this release.

LIMITATIONS OF THIS RELEASE

The following features described in the 2.2.1 language manual do not
currently work and will be fixed in the subsequent releases:
  - Non-static type definitions as class or interface members
    (static type defs do work)

The constraint solver used by X10 typechecker is known to be incomplete 
for situations in which a constraint implies an infinite number of 
distinct constraints.

Additionally, the following features described in the language
manual do not currently work with the C++ backend and will be fixed in
the subsequent releases:
  - Garbage collection on AIX
  - Non-final generic instance methods
  - Exception stack traces on Cygwin

As in previous releases, the X10 runtime uses a "busy wait" loop
in the worker threads that execute asyncs. A consequence of this is
that even if a place has no asyncs to execute, it will still consume
CPU cycles busy waiting for new asyncs to be created.  
See XTENLANG-1012 for more details.

The generated C++ code requires g++ 4.2 or better to be compiled; 
we do almost all of our testing against g++ 4.3.2.  On AIX, you
may either use g++ 4.2 or better or xlC 10.1.0.4 or better.


SUMMARY OF ISSUES RESOLVED IN THIS RELEASE

Below is a summary of JIRA issues addressed for the X10 2.2.1


For the details of JIRA issues fixed in this release, see
http://jira.codehaus.org/browse/XTENLANG/fixforversion/NNNNNN

Please use the X10 JIRA to report bugs, after ensuring the problem is
not already reported:
http://jira.codehaus.org/secure/IssueNavigator.jspa?reset=true&&pid=11812&resolution=-1

