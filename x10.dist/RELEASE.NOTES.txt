Release 2.2.2

MAJOR CHANGES

No major changes have been made to the language specification 
in this release.  The following major changes have been made to the
implementation and the class libraries.

  + X10 now requires a Java 6.0 SDK as the minimum Java version
    to build X10.  Previous versions of X10 would work on either 
    Java 5.0 or Java 6.0.
  + Starting with X10 2.2.2, the compiler/runtime system will optimize
    the pattern 
        at (P) async S; 
    into a more efficient remote async invocation for any P. The pattern 
        async at (p) S;
     will only be optimized into a more efficient remote async invocation 
     when p is a simple expression (eg local variable reference).  
     Therefore we recomment using at (P) async S where possible.
     All code in the X10 standard library and benchmarks has been updated.
  + Improved Java interoperability is included as a technology preview
    in this release.  It is now possible to import Java types into
    X10 files using an import statement, have X10 classes implement 
    Java interfaces, etc.  There are some known limitations of Java interop
    in this release as detailed in the following issues:
        XTENLANG-2868: Captured environment calculation is incorrect for anonymous inner class which extends a Java class 
        XTENLANG-2874: bug in alpha renaming type parameter when the parameter was bound to Java type 
        XTENLANG-2977: type system should support throwability checking 
        XTENLANG-2986: parser does not accept @Throws annotation with constructor (JavaException3) 
        XTENLANG-2989: Cannot call an @Throws method inside of an async or an at 

Please consult the language specification for the details of
any minor language changes and specification clarifications made in
this release.

LIMITATIONS OF THIS RELEASE

The following features described in the 2.2.2 language manual do not
currently work and will be fixed in the subsequent releases:
  - Non-static type definitions as class or interface members
    (static type defs do work)

The constraint solver used by X10 typechecker is known to be incomplete 
for situations in which a constraint implies an infinite number of 
distinct constraints.

Additionally, the following features described in the language
manual do not currently work with the C++ backend and will be fixed in
the subsequent releases:
  - Garbage collection on AIX
  - Non-final generic instance methods
  - Exception stack traces on Cygwin

As in previous releases, the X10 runtime uses a "busy wait" loop
in the worker threads that execute asyncs. A consequence of this is
that even if a place has no asyncs to execute, it will still consume
CPU cycles busy waiting for new asyncs to be created.  
See XTENLANG-1012 for more details.

The generated C++ code requires g++ 4.2 or better to be compiled; 
we do almost all of our testing against g++ 4.3.2.  On AIX, you
may either use g++ 4.2 or better or xlC 10.1.0.4 or better.

SUMMARY OF ISSUES RESOLVED IN THIS RELEASE

Below is a summary of JIRA issues addressed for the X10 2.2.2

** New Features and Improvements
    * [XTENLANG-2409] - Use .jar's generated by x10c -o as libraries at runtime as well as compile time
    * [XTENLANG-2654] - Optimize time/space tradeoffs in Array layout representation to bias towards rank 1 and rank 2
    * [XTENLANG-2685] - Communication Optimizations for Distributed X10 Program Patch (including approval document)
    * [XTENLANG-2869] - java-interop: reachability analysis is broken with Java exception
    * [XTENLANG-2870] - java-interop: throw and catch of java.lang.Throwable (front-end)
    * [XTENLANG-2871] - java-interop: support Java throwables (backend)
    * [XTENLANG-2881] - Extend PlaceLocalHandle interface to support PlaceGroups and two-phase initialization closures
    * [XTENLANG-2903] - x10.util.Indexed should implement (Int)=>T
    * [XTENLANG-2925] - Clarify behaviour of destructuring
    * [XTENLANG-2941] - Native X10: control worker stack size via environment variable
    * [XTENLANG-2950] - Closure types screw up
    * [XTENLANG-2957] - Support static initialization of X10 types that are loaded with reflection
    * [XTENLANG-2969] - java-interop: running X10 code with Java thread
    * [XTENLANG-2975] - Changes to Matrix API to support chaining of operations
    * [XTENLANG-2979] - Matrix properties on DenseMatrix: trace(), norm(), maxNorm()
    * [XTENLANG-2987] - java-interop: stable mangling for constructors

** Task
    * [XTENLANG-2962] - X10 now requires Java6

** Bug
    * [XTENLANG-1566] - 'a' as Int not recognized as a compile time constant, making switches hard to use
    * [XTENLANG-2674] - Artificial places leak into error messages and dynamic checks
    * [XTENLANG-2775] - Failed to capture a clock variable in a nested closure (HeatTransfer_v5)
    * [XTENLANG-2804] - Constaint projection problem when NQueensDist is compiled at -O
    * [XTENLANG-2810] - Class x10.util.Option - equals() and _struct_equals()
    * [XTENLANG-2853] - managed -x10lib blah.properties does not add the jar file to the classpath
    * [XTENLANG-2855] - java-interop: @Throws annotation with type parameters
    * [XTENLANG-2886] - sockets backend does not respond properly to abnormal termination
    * [XTENLANG-2889] - Website: outdated examples for native code integration feature
    * [XTENLANG-2915] - Failed to propagate constraint (NQueensDistTest)
    * [XTENLANG-2921] - toronto testcase: specify location of input data (ParallelIORead, ParallelIOWrite, SingleIORead, test_compare_output_methods2, Finish_003f)
    * [XTENLANG-2922] - toronto testcase: specify sourcepath (testLU1, testLU2, testLorenz2)
    * [XTENLANG-2923] - toronto testcase: advance clock to avoid deadlock (LEL_003f)
    * [XTENLANG-2926] - C++ codegen: missing #include for method return type
    * [XTENLANG-2927] - In operator body, local member is acessed instead of parameter
    * [XTENLANG-2929] - (java-interop): x10c Does not perform required mangling when an x10 class implements both a Java and an X10 interface
    * [XTENLANG-2931] - Failure to typecheck generic abs method
    * [XTENLANG-2937] - "alloc" object created by constructor splitting should be non-null
    * [XTENLANG-2940] - Post-compilation error with duplicated bridge method
    * [XTENLANG-2959] - Serialization of aliased IntWritable works incorrectly
    * [XTENLANG-2961] - Native X10: bug in String.compareToIgnoreCase
    * [XTENLANG-2964] - ICE on x(j)++; where x is an Array.
    * [XTENLANG-2965] - Bad interaction between constructor splitting, at expressions, and lowering
    * [XTENLANG-2968] - Native backend hides cause for Throwable
    * [XTENLANG-2974] - HashMap runtime hangup and break 
    * [XTENLANG-2980] - Type parameter of "this" is sometimes lost
    * [XTENLANG-2982] - java-interop: serializing a java class that does not implement Serializable should result in an error
    * [XTENLANG-2983] - java-interop: java.io.File does not serialize correctly
    * [XTENLANG-2988] - x10c++ help message lists "create java files" as an option
    * [XTENLANG-2990] - binary operator with a generic type doesn't compile in C++ back end
    * [XTENLANG-2994] - RectRegion.contains() fails with NO_CHECKS=false for 4D array


For the details of JIRA issues fixed in this release, see
http://jira.codehaus.org/browse/XTENLANG/fixforversion/17639

Please use the X10 JIRA to report bugs, after ensuring the problem is
not already reported:
http://jira.codehaus.org/secure/IssueNavigator.jspa?reset=true&&pid=11812&resolution=-1

