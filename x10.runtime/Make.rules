#
#  This file is part of the X10 project (http://x10-lang.org).
#
#  This file is licensed to You under the Eclipse Public License (EPL);
#  You may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#      http://www.opensource.org/licenses/eclipse-1.0.php
#
#  (C) Copyright IBM Corporation 2006-2010.
#

#########################
# User-servicable Parts #
#########################

# compiler selection: gcc or xlc
# if not user-specified, default to xlC on AIX and g++ everywhere else
ifndef USE_GCC
  ifndef USE_XLC
    ifeq ($(shell uname -s),AIX)
      export USE_XLC=1
    else
      export USE_GCC=1
    endif
  endif
endif

AR ?= ar

LIBPREFIX := lib
LIBSUFFIX := .so

__m_have_abspath:=$(abspath /)
ifndef __m_have_abspath
  abspath=$(shell cd $1 && /bin/pwd)
else
  abspath=$(abspath $1)
endif

# g++ tracing of header file inclusions
#CXXFLAGS += -H

ifdef OPTIMIZE
  CXXFLAGS += -DNO_TRACING
  X10CPPFLAGS += -optimize
endif
ifdef NO_CHECKS
  CXXFLAGS += -DNO_CHECKS
  X10CPPFLAGS += -NO_CHECKS
endif
ifdef EXPERIMENTAL
  X10CPPFLAGS += -EXPERIMENTAL
endif

ifdef DEBUG
  CXXFLAGS += -g
  X10CPPFLAGS += -DEBUG
endif

ifndef JAVA_HOME
  ifeq ($(shell uname -s),Darwin)
    JAVA_HOME=$(shell /usr/libexec/java_home)
  else
    JAVA_HOME="${ANT_JAVA_HOME}"
  endif
endif

ifdef JAVA_HOME
  ifeq ($(shell uname -s),AIX)
      JNI_INCLUDES = -I"$(JAVA_HOME)"/include -I"$(JAVA_HOME)"/include/aix
  else
  ifeq ($(shell uname -s),Linux)
    JNI_INCLUDES = -I"$(JAVA_HOME)"/include -I"$(JAVA_HOME)"/include/linux
  else
  ifeq ($(firstword $(subst _, ,$(shell uname -s))),CYGWIN)
    JAVA_CYGPATH = $(shell cygpath '$(JAVA_HOME)')
    JNI_INCLUDES = -I"$(JAVA_CYGPATH)"/include -I"$(JAVA_CYGPATH)"/include/win32
  else
  ifeq ($(shell uname -s),Darwin)
    ifeq ($(shell test -r "$(JAVA_HOME)"/bundle/Headers/jni.h && printf hi),hi)
      JNI_INCLUDES = -I"$(JAVA_HOME)"/bundle/Headers
    else
      ifeq ($(shell test -r "$(JAVA_HOME)"/include/jni.h && printf hi),hi)
        JNI_INCLUDES = -I"$(JAVA_HOME)"/include
      endif
    endif
  else
  ifeq ($(shell uname -s),SunOS)
    JNI_INCLUDES = -I"$(JAVA_HOME)"/include -I"$(JAVA_HOME)"/include/solaris
  else
  ifeq ($(shell uname -s),FreeBSD)
    JNI_INCLUDES = -I"$(JAVA_HOME)"/include -I"$(JAVA_HOME)"/include/freebsd
  endif
  endif
  endif
  endif
  endif
  endif
endif

ifndef NO_VAR_OVERRIDE

ifdef ENABLE_CROSS_COMPILE_BGP
  export X10_STATIC_LIB=1
  export X10RT_PLATFORM=bgp
  ifdef USE_GCC
    override CXX = /bgsys/drivers/ppcfloor/gnu-linux/bin/powerpc-bgp-linux-g++
    override LDFLAGS += -lpthread
    override CC =/bgsys/drivers/ppcfloor/gnu-linux/bin/powerpc-bgp-linux-gcc
    ifdef OPTIMIZE
      override CXXFLAGS += -O2 -finline-functions
    endif
  endif
  ifdef USE_XLC
    # have to override CXX, but let user specify CUSTOM_XLC if they
    # need something other than just xlC_r to be used as CXX
    ifdef CUSTOM_XLC
      override CXX = $(CUSTOM_XLC)
      override CC = $(CUSTOM_XLC)
    else
      override CXX = bgxlC_r
      override CC = bgxlc_r     
    endif
    ifdef OPTIMIZE
      override CXXFLAGS += -O3 -qinline
    endif
    override CXXFLAGS += -qsuppress=1540-0809:1500-029:1540-1101:1540-1102
    override CXXFLAGS += $(XLC_EXTRA_FLAGS)
  endif

else

  # platform independent compiler flags and commands
  ifdef USE_GCC
    # CXX defaults to g++, so leave it alone (in case user overrides)
    override MPICXX = mpicxx
    override SHLINK = g++
    ifdef OPTIMIZE
      override CXXFLAGS += -O2 -finline-functions
    endif
    ifndef CXX_NO_WARNINGS
      CXX_WARNING_FLAGS = -ansi -pedantic -Wall -Wextra -Wno-long-long -Wno-unused-parameter
    endif
  endif
  ifdef USE_XLC
    # have to override CXX, but let user specify CUSTOM_XLC if they
    # need something other than just xlC_r to be used as CXX
    ifdef CUSTOM_XLC
      override CXX = $(CUSTOM_XLC)
    else
      override CXX = xlC_r
    endif
    override MPICXX = mpCC_r
    override SHLINK = $(CXX)
    ifdef OPTIMIZE
      override CXXFLAGS += -O3 -qinline -qarch=auto -qtune=auto -qhot
    endif
    override CXXFLAGS += -qsuppress=1540-0809:1500-029:1540-1101:1540-1102
    override CXXFLAGS += -qminimaltoc
    override CXXFLAGS += $(XLC_EXTRA_FLAGS)
    ifndef USE_32BIT
      override CXXFLAGS += -q64
      override XRX_PROPS_CXXFLAGS += -q64
    else
      override CXXFLAGS += -q32
      override XRX_PROPS_CXXFLAGS += -q32 -bmaxdata:0x80000000
    endif

  endif

  ifeq ($(shell uname -s),AIX)
    ifdef USE_GCC
      export X10RT_PLATFORM=aix_gcc
      override CXXFLAGS += -maix64
      override CXXFLAGS_SHARED += -shared -fPIC -Wl,-bbigtoc -Wl,-G -Wl,-lptools_ptr
      override LDFLAGS += -Wl,-brtl,-lpthreads
      export X10RT_TEST_LDFLAGS = -Wl,-L"$(X10_HOME)"/x10.runtime/x10rt/lib
    endif
    ifdef USE_XLC
      export X10RT_PLATFORM=aix_xlc
      override CXXFLAGS += -qrtti=all
      override CXXFLAGS_SHARED += -qpic=large
      override LDFLAGS_SHARED += -bnoentry -G -bbigtoc -lpthreads -lm -lptools_ptr
      override LDFLAGS += -brtl
      ifeq ($(AR),ar) # use AIX default ar
        AR = /usr/bin/ar
      endif
    endif

    # FIXME
    ifndef USE_32BIT
      ARFLAGS := -X64 $(ARFLAGS)
    else
      ARFLAGS := -X32 $(ARFLAGS)
    endif

  else
    MPICXX ?= mpicxx

    ifeq ($(shell uname -s),Linux)
      ifdef USE_GCC
        override CXXFLAGS += -pthread
        override CXXFLAGS_SHARED += -shared -fPIC
        export X10RT_TEST_LDFLAGS = -Wl,--rpath -Wl,"$(X10_HOME)"/x10.runtime/x10rt/lib
      endif
      ifdef USE_XLC
        override CXXFLAGS += -qpic
        override CXXFLAGS_SHARED += -qmkshrobj
        export X10RT_TEST_LDFLAGS = -Wl,--rpath -Wl,"$(X10_HOME)"/x10.runtime/x10rt/lib
      endif
      ifdef USE_64BIT
        override CXXFLAGS += -m64
        override XRX_PROPS_CXXFLAGS += -m64
      endif
      ifeq ($(shell uname -m),x86_64)
        export X10RT_PLATFORM=linux_x86_64
      else
      ifeq ($(shell uname -m),ppc64)
        ifdef USE_GCC
	  export X10RT_PLATFORM=linux_ppc_64_gcc
        endif
        ifdef USE_XLC
	  export X10RT_PLATFORM=linux_ppc_64_xlc
        endif
      else
        export X10RT_PLATFORM=linux_x86_32
        override XRX_PROPS_CXXFLAGS += -msse2 -mfpmath=sse
      endif
      endif
    else
    ifeq ($(firstword $(subst _, ,$(shell uname -s))),CYGWIN)
      export X10RT_PLATFORM=cygwin
      override CXX ?= g++-4
      override CC ?= gcc-4
      override CXXFLAGS_SHARED += -shared -Wl,--export-all-symbols -Wl,--enable-auto-import
      override XRX_PROPS_CXXFLAGS += -msse2 -mfpmath=sse
      LIBPREFIX :=
      LIBSUFFIX := .dll
      ifndef DEFAULT_X10RT_LIB
        DEFAULT_X10RT_LIB = sockets
      endif
      FIND ?= /usr/bin/find
      XARGS ?= /usr/bin/xargs
    else
    ifeq ($(shell uname -s),Darwin)
      export X10RT_PLATFORM=$(shell echo | gcc -E -dM - | grep -q x86_64 && echo darwin64 || echo darwin)
      override CXXFLAGS_SHARED += -fPIC
      override LDFLAGS_SHARED += -dynamiclib -undefined dynamic_lookup -install_name '@rpath/$@'
      export X10RT_TEST_LDFLAGS = -Wl,-rpath -Wl,"$(X10_HOME)"/x10.runtime/x10rt/lib -Wl,-rpath -Wl,"$(X10_HOME)"/x10.runtime/x10rt
      ifdef USE_32BIT
        override CXXFLAGS += -arch i386
        override XRX_PROPS_CXXFLAGS += -arch i386
      endif
      ifdef USE_64BIT
        override CXXFLAGS += -arch x86_64
        override XRX_PROPS_CXXFLAGS += -arch x86_64
      endif
      override XRX_PROPS_CXXFLAGS += -msse2 -mfpmath=sse
      AR = libtool
      # Warning: Order matters!  The "-o" has to be at the end.
      ARFLAGS = -static -o
    else
    ifeq ($(shell uname -s),SunOS)
      export X10RT_PLATFORM=sunos
      override CXXFLAGS_SHARED += -shared -fPIC
      override LDFLAGS += -lresolv -lnsl -lsocket -lrt
      override LDFLAGS_SHARED += -lresolv -lnsl -lsocket -lrt
      export X10RT_TEST_LDFLAGS = -lrt
    else
    ifeq ($(shell uname -s),FreeBSD)
      override CXXFLAGS += -pthread
      override CXXFLAGS_SHARED += -shared -fPIC
      export X10RT_TEST_LDFLAGS = -Wl,--rpath -Wl,"$(X10_HOME)"/x10.runtime/x10rt/lib
      ifeq ($(shell uname -m),amd64)
        export X10RT_PLATFORM=freebsd_amd64
      endif
    endif
    endif
    endif
    endif
    endif
  endif
endif

ifdef X10_STATIC_LIB
  LIBPREFIX := lib
  LIBSUFFIX := .a
endif

endif



