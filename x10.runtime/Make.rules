#
#  This file is part of the X10 project (http://x10-lang.org).
#
#  This file is licensed to You under the Eclipse Public License (EPL);
#  You may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#      http://www.opensource.org/licenses/eclipse-1.0.php
#
#  (C) Copyright IBM Corporation 2006-2014.
#

#########################
# User-servicable Parts #
#########################

# compiler selection: gcc or xlc
# if not user-specified, default to xlC on AIX and g++ everywhere else
ifndef USE_GCC
  ifndef USE_XLC
    ifeq ($(shell uname -s),AIX)
      export USE_XLC=1
    else
      export USE_GCC=1
    endif
  endif
endif

AR ?= ar

LIBPREFIX := lib
LIBSUFFIX := .so

__m_have_abspath:=$(abspath /)
ifndef __m_have_abspath
  abspath=$(shell cd $1 && /bin/pwd)
else
  abspath=$(abspath $1)
endif

# g++ tracing of header file inclusions
#CXXFLAGS += -H

ifdef OPTIMIZE
  override CXXFLAGS += -DNO_TRACING
  override X10CPPFLAGS += -optimize
endif
ifdef NO_CHECKS
  override CXXFLAGS += -DNO_CHECKS
  override X10CPPFLAGS += -NO_CHECKS
endif
ifdef FLATTEN_EXPRESSIONS
  override X10CPPFLAGS += -FLATTEN_EXPRESSIONS
endif
ifdef EXPERIMENTAL
  override X10CPPFLAGS += -EXPERIMENTAL
endif

ifdef ENABLE_GCC_SYMBOLS
  override CXXFLAGS += -g
endif

ifdef DEBUG
  override CXXFLAGS += -g -DDEBUG_SUPPORT
  override X10CPPFLAGS += -DEBUG
endif

# This has to be here, because it impacts x10rt_types.h
# Changing it just in the build of x10rt itself is not enough
ifdef ENABLE_X10RT_PAMI
    override CXXFLAGS += -DX10RT_32BIT_MSG_IDS
    override X10RT_PROPS_CXXFLAGS += -DX10RT_32BIT_MSG_IDS
endif

# Impacts inline functions in header files, so it has to be sticky in the properties file
ifdef HOMOGENEOUS
  override CXXFLAGS += -DHOMOGENEOUS
  override X10RT_PROPS_CXXFLAGS += -DHOMOGENEOUS
  override XRX_PROPS_CXXFLAGS += -DHOMOGENEOUS
endif


ifndef JAVA_HOME
  ifeq ($(shell uname -s),Darwin)
    JAVA_HOME=$(shell /usr/libexec/java_home)
  else
    JAVA_HOME="${ANT_JAVA_HOME}"
  endif
endif

ifdef JAVA_HOME
  jarch=$(shell uname -p)
  ifeq ($(jarch),unknown)
    jarch=$(shell uname -m)
  endif

  ifeq ($(shell uname -s),AIX)
    JNI_INCLUDES = -I"$(JAVA_HOME)"/include -I"$(JAVA_HOME)"/include/aix
    JNI_LIBS = -L"$(JAVA_HOME)"/jre/lib/$(jarch)/j9vm
  else
  ifeq ($(shell uname -s),Linux)
    JNI_INCLUDES = -I"$(JAVA_HOME)"/include -I"$(JAVA_HOME)"/include/linux
    ifeq ($(jarch),x86_64)
      jarch=amd64
    endif
    JNI_LIBS = -L"$(JAVA_HOME)"/jre/lib/$(jarch)/j9vm -L"$(JAVA_HOME)"/jre/lib/$(jarch)/server -L"$(JAVA_HOME)"/jre/lib/$(jarch)/client
  else
  ifeq ($(firstword $(subst _, ,$(shell uname -s))),CYGWIN)
    # Intentionally not setting JNI_INCLUDES and JNI_LIBS
    # We don't want to build the jni-bindings for x10rt on cygwin
  else
  ifeq ($(shell uname -s),Darwin)
    JNI_INCLUDES = -I"$(JAVA_HOME)"/include -I"$(JAVA_HOME)"/include/darwin
    ifeq ($(jarch),x86_64)
      jarch=amd64
    endif
    JNI_LIBS = -L"$(JAVA_HOME)"/jre/lib/$(jarch)/server -L"$(JAVA_HOME)"/jre/lib/$(jarch)/client
  else
  ifeq ($(shell uname -s),SunOS)
    JNI_INCLUDES = -I"$(JAVA_HOME)"/include -I"$(JAVA_HOME)"/include/solaris
    ifeq ($(jarch),x86_64)
      jarch=amd64
    endif
    JNI_LIBS = -L"$(JAVA_HOME)"/jre/lib/$(jarch)/server -L"$(JAVA_HOME)"/jre/lib/$(jarch)/client
  else
  ifeq ($(shell uname -s),FreeBSD)
    JNI_INCLUDES = -I"$(JAVA_HOME)"/include -I"$(JAVA_HOME)"/include/freebsd
    ifeq ($(jarch),x86_64)
      jarch=amd64
    endif
    JNI_LIBS = -L"$(JAVA_HOME)"/jre/lib/$(jarch)/server -L"$(JAVA_HOME)"/jre/lib/$(jarch)/client
  endif
  endif
  endif
  endif
  endif
  endif
endif

ifndef NO_VAR_OVERRIDE

ifdef ENABLE_CROSS_COMPILE_BGQ
  export X10RT_PLATFORM=bgq
  export CROSS_COMPILE_BLUEGENE=true
  export CROSS_COMPILE_ANY=true
  export BGQ_FLOOR ?= /bgsys/driver/ppcfloor
  export X10_STATIC_LIB=1
  ifdef USE_GCC
    export X10RT_PLATFORM=bgq_gcc
    override MPICXX=/bgsys/drivers/ppcfloor/comm/bin/gcc/mpicxx
    override CXX=/bgsys/drivers/ppcfloor/gnu-linux/bin/powerpc64-bgq-linux-g++
    override CC =/bgsys/drivers/ppcfloor/gnu-linux/bin/powerpc64-bgq-linux-gcc
    override AR =/bgsys/drivers/ppcfloor/gnu-linux/bin/powerpc64-bgq-linux-ar
    ifndef X10_STATIC_LIB
      override CXXFLAGS_SHARED += -shared -fPIC
      export X10RT_TEST_LDFLAGS = -dynamic -Wl,--rpath -Wl,"$(X10_HOME)"/x10.runtime/x10rt/lib
    endif
    ifdef OPTIMIZE
      override CXXFLAGS += -O2 -finline-functions
    endif
    # uniformly force -mminimal-toc since it appears the linker doesn't detect toc overflow
    override CXXFLAGS += -mminimal-toc
    override XRX_PROPS_CXXFLAGS += -mminimal-toc
  endif
  ifdef USE_XLC
    export X10RT_PLATFORM=bgq_xlc
    # have to override CXX, but let user specify CUSTOM_XLC if they
    # need something other than just xlC_r to be used as CXX
    ifdef CUSTOM_XLC
      override CXX = $(CUSTOM_XLC)
      override CC = $(CUSTOM_XLC)
    else
      override CXX = bgxlC_r
      override CC = bgxlC_r     
    endif
    override MPICXX=/bgsys/drivers/ppcfloor/comm/bin/xl/mpixlcxx_r
    ifdef OPTIMIZE
      override CXXFLAGS += -O3 -qinline -qhot -qsimd=auto -qtune=qp -qarch=qp
    endif
    override CXXFLAGS += -qsuppress=1540-0809:1500-029:1540-1101:1540-1102
    override CXXFLAGS += $(XLC_EXTRA_FLAGS)
  endif
endif


ifndef CROSS_COMPILE_BLUEGENE
  # platform independent compiler flags and commands
  ifdef USE_GCC
    # CXX defaults to g++, so leave it alone (in case user overrides)
    override MPICXX = mpicxx
    override SHLINK = g++
    ifdef OPTIMIZE
      override CXXFLAGS += -O2 -finline-functions
    endif
    ifndef CXX_NO_WARNINGS
      CXX_WARNING_FLAGS = -ansi -pedantic -Wall -Wextra -Wno-long-long -Wno-unused-parameter -Wno-unused-variable -Wno-unused-value
    endif
  endif
  ifdef USE_XLC
    # have to override CXX, but let user specify CUSTOM_XLC if they
    # need something other than just xlC_r to be used as CXX
    ifdef CUSTOM_XLC
      override CXX = $(CUSTOM_XLC)
    else
      override CXX = xlC_r
    endif
    ifeq ($(shell uname -s),AIX)
      override MPICXX = mpCC_r
    else
      override MPICXX = mpCC
    endif
    override SHLINK = $(CXX)
    ifdef OPTIMIZE
      override CXXFLAGS += -O3 -qinline -qarch=auto -qtune=auto -qhot
    endif
    override CXXFLAGS += -qsuppress=1540-0809:1500-029:1540-1101:1540-1102
    override CXXFLAGS += -qminimaltoc
    override CXXFLAGS += $(XLC_EXTRA_FLAGS)
    ifndef USE_32BIT
      override CXXFLAGS += -q64
      override XRX_PROPS_CXXFLAGS += -q64
    else
      override CXXFLAGS += -q32
      override XRX_PROPS_CXXFLAGS += -q32 -bmaxdata:0x80000000
    endif

  endif

  ifeq ($(shell uname -s),AIX)
    ifdef USE_GCC
      export X10RT_PLATFORM=aix_gcc
      override CXXFLAGS += -maix64
      ifndef X10_STATIC_LIB
        override CXXFLAGS_SHARED += -shared -fPIC -Wl,-bbigtoc -Wl,-G -Wl,-lptools_ptr
      endif
      override LDFLAGS += -Wl,-brtl,-lpthreads
      export X10RT_TEST_LDFLAGS = -Wl,-L"$(X10_HOME)"/x10.runtime/x10rt/lib
    endif
    ifdef USE_XLC
      export X10RT_PLATFORM=aix_xlc
      override CXXFLAGS += -qrtti=all
      ifndef X10_STATIC_LIB
        override CXXFLAGS_SHARED += -qpic=large
        override LDFLAGS_SHARED += -bnoentry -G -bbigtoc -lpthreads -lm -lptools_ptr
      endif
      override LDFLAGS += -brtl
      ifeq ($(AR),ar) # use AIX default ar
        AR = /usr/bin/ar
      endif
    endif

    # FIXME
    ifndef USE_32BIT
      ARFLAGS := -X64 $(ARFLAGS)
    else
      ARFLAGS := -X32 $(ARFLAGS)
    endif

  else
    MPICXX ?= mpicxx

    ifeq ($(shell uname -s),Linux)
      ifdef USE_GCC
        override CXXFLAGS += -pthread
        ifndef X10_STATIC_LIB
          override CXXFLAGS_SHARED += -shared -fPIC
          override LDFLAGS_SHARED += -lrt
        endif
        export X10RT_TEST_LDFLAGS = -Wl,--rpath -Wl,"$(X10_HOME)"/x10.runtime/x10rt/lib
      endif
      ifdef USE_XLC
        override CXXFLAGS += -qpic
        ifndef X10_STATIC_LIB
          override CXXFLAGS_SHARED += -qmkshrobj
        endif
        export X10RT_TEST_LDFLAGS = -Wl,--rpath -Wl,"$(X10_HOME)"/x10.runtime/x10rt/lib
      endif
      ifdef USE_64BIT
        override CXXFLAGS += -m64
        override XRX_PROPS_CXXFLAGS += -m64
      endif
      ifeq ($(shell uname -m),x86_64)
        export X10RT_PLATFORM=linux_x86_64
      else
      ifeq ($(shell uname -m),ppc64)
        ifdef USE_GCC
	  export X10RT_PLATFORM=linux_ppc_64_gcc
        endif
        ifdef USE_XLC
	  export X10RT_PLATFORM=linux_ppc_64_xlc
        endif
      else
        export X10RT_PLATFORM=linux_x86_32
        override XRX_PROPS_CXXFLAGS += -msse2 -mfpmath=sse
      endif
      endif
    else
    ifeq ($(firstword $(subst _, ,$(shell uname -s))),CYGWIN)
      export X10RT_PLATFORM=cygwin

      # BDWGC has problems finding the static roots on cygwin if we don't force static linking.
      # We could make this conditional on ENABLE_GC, but that would force us to plumb the
      # GC enable/disable status to all uses of this Makefile. So, for now just force it
      # to static independent of the GC enable/disable status.
      export X10_STATIC_LIB=1

      override CXX ?= g++-4
      override CC ?= gcc-4
      ifndef X10_STATIC_LIB
        override CXXFLAGS_SHARED += -shared -Wl,--export-all-symbols -Wl,--enable-auto-import
      endif
      override XRX_PROPS_CXXFLAGS += -msse2 -mfpmath=sse
      LIBPREFIX :=
      LIBSUFFIX := .dll
      ifndef DEFAULT_X10RT_LIB
        DEFAULT_X10RT_LIB = sockets
      endif
      FIND ?= /usr/bin/find
      XARGS ?= /usr/bin/xargs
    else
    ifeq ($(shell uname -s),Darwin)
      ifeq ($(shell readlink `which $(CXX)`),clang++) # avoid clang++ on Mountain Lion
        CXX = g++
        CC = gcc
      endif
      ifdef CXX_NO_WARNINGS
        # even without -Wall clang++ enables some warnings we want to disable for compiling generated code
        CXX_WARNING_FLAGS = -Wno-unused-parameter -Wno-unused-variable -Wno-unused-value
      endif
      export X10RT_PLATFORM=$(shell echo | gcc -E -dM - | grep -q x86_64 && echo darwin64 || echo darwin)
      ifndef X10_STATIC_LIB
        override CXXFLAGS_SHARED += -fPIC
        override LDFLAGS_SHARED += -dynamiclib -undefined dynamic_lookup -install_name '@rpath/$@'
      endif
      export X10RT_TEST_LDFLAGS = -Wl,-rpath -Wl,"$(X10_HOME)"/x10.runtime/x10rt/lib -Wl,-rpath -Wl,"$(X10_HOME)"/x10.runtime/x10rt
      ifdef USE_32BIT
        override CXXFLAGS += -arch i386
        override XRX_PROPS_CXXFLAGS += -arch i386
      endif
      ifdef USE_64BIT
        override CXXFLAGS += -arch x86_64
        override XRX_PROPS_CXXFLAGS += -arch x86_64
      endif
      override XRX_PROPS_CXXFLAGS += -msse2 -mfpmath=sse
      AR = libtool
      # Warning: Order matters!  The "-o" has to be at the end.
      ARFLAGS = -static -o
    else
    ifeq ($(shell uname -s),SunOS)
      export X10RT_PLATFORM=sunos
      ifndef X10_STATIC_LIB
        override CXXFLAGS_SHARED += -shared -fPIC
        override LDFLAGS_SHARED += -lresolv -lnsl -lsocket -lrt
      endif
      override LDFLAGS += -lresolv -lnsl -lsocket -lrt
      export X10RT_TEST_LDFLAGS = -lrt
    else
    ifeq ($(shell uname -s),FreeBSD)
      override CXXFLAGS += -pthread
      ifndef X10_STATIC_LIB
        override CXXFLAGS_SHARED += -shared -fPIC
      endif
      export X10RT_TEST_LDFLAGS = -Wl,--rpath -Wl,"$(X10_HOME)"/x10.runtime/x10rt/lib
      ifeq ($(shell uname -m),amd64)
        export X10RT_PLATFORM=freebsd_amd64
      endif
    endif
    endif
    endif
    endif
    endif
  endif
endif

ifdef X10_STATIC_LIB
  LIBPREFIX := lib
  LIBSUFFIX := .a
endif

endif

ifdef ENABLE_CROSS_COMPILE_FX10
  export X10RT_PLATFORM=fx10
  export CROSS_COMPILE_FX10=true
  export CROSS_COMPILE_ANY=true
  export X10_STATIC_LIB=1

  override CXX = FCCpx
  override CC = fccpx
  override CFLAGS = -Xg -w
  override CXXFLAGS = -Xg -w -Wp,--special_module_id 
  override CXX_NO_WARNING=true
  override CXX_WARNING_FLAGS = 
  override MPICXX= mpiFCCpx -Xg
  ifndef X10_STATIC_LIB
    override CXXFLAGS_SHARED += -shared -fPIC
    export X10RT_TEST_LDFLAGS = -dynamic -Wl,--rpath -Wl,"$(X10_HOME)"/x10.runtime/x10rt/lib
  endif
  ifdef OPTIMIZE
    override CFLAGS += -Kfast
    override CXXFLAGS += -Kfast
  endif
  override X10CPPFLAGS += -FLATTEN_EXPRESSIONS
  override CXXFLAGS += -g
  ifdef TARGET_JAVA_HOME
    jarch = s64fx
    override JNI_LIBS = -L"$(TARGET_JAVA_HOME)"/jre/lib/$(jarch)/server
  endif
endif

