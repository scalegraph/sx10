Index: libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/powerpc.h
===================================================================
RCS file: /cvsroot/bdwgc/bdwgc/libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/Attic/powerpc.h,v
retrieving revision 1.4
diff -u -r1.4 powerpc.h
--- libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/powerpc.h	3 Jan 2008 07:12:18 -0000	1.4
+++ libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/powerpc.h	6 Oct 2009 21:57:01 -0000
@@ -15,7 +15,6 @@
  *
  */
 
-/* FIXME.  Incomplete.  No support for 64 bits.				*/
 /* Memory model documented at http://www-106.ibm.com/developerworks/	*/
 /* eserver/articles/archguide.html and (clearer)			*/
 /* http://www-106.ibm.com/developerworks/eserver/articles/powerpc.html. */
@@ -73,6 +72,16 @@
   /* FIXME: We should get gcc to allocate one of the condition	*/
   /* registers.  I always got "impossible constraint" when I	*/
   /* tried the "y" constraint.					*/
+#if defined(_AIX)
+	/* gcc on AIX uses the AIX assembler, so we have to match its syntax */
+  __asm__ __volatile__ (
+    "ld %0,%1\n"
+    "cmpw %0,%0\n"
+    "bne- $+4\n"
+    "isync\n"
+    : "=r" (result)
+    : "m"(*addr) : "memory", "cc");
+#else  
   __asm__ __volatile__ (
     "ld %0,%1\n"
     "cmpw cr7,%0,%0\n"
@@ -81,6 +90,7 @@
     : "=r" (result)
     : "m"(*addr) : "memory", "cc");
   return result;
+#endif  
 }
 #else
 AO_INLINE AO_t
@@ -91,6 +101,16 @@
   /* FIXME: We should get gcc to allocate one of the condition	*/
   /* registers.  I always got "impossible constraint" when I	*/
   /* tried the "y" constraint.					*/
+#if defined(_AIX)
+	/* gcc on AIX uses the AIX assembler, so we have to match its syntax */
+  __asm__ __volatile__ (
+    "lwz%X1 %0,%1\n"
+    "cmpw %0,%0\n"
+    "bne- $+4\n"
+    "isync\n"
+    : "=r" (result)
+    : "m"(*addr) : "memory", "cc");
+#else  
   __asm__ __volatile__ (
     "lwz%X1 %0,%1\n"
     "cmpw cr7,%0,%0\n"
@@ -98,6 +118,7 @@
     "1: isync\n"
     : "=r" (result)
     : "m"(*addr) : "memory", "cc");
+#endif  
   return result;
 }
 #endif
@@ -124,6 +145,19 @@
   unsigned long oldval;
   unsigned long temp = 1; /* locked value */
 
+#if defined(_AIX)
+	/* gcc on AIX uses the AIX assembler, so we have to match its syntax */
+  __asm__ __volatile__(
+               "ldarx %0,0,%1\n"     /* load and reserve               */
+               "cmpdi %0, 0\n"       /* if load is                     */
+               "bne $+12\n"          /*   non-zero, return already set */
+               "stdcx. %2,0,%1\n"    /* else store conditional         */
+               "bne- $-16\n"         /* retry if lost reservation      */
+               ""                    /* oldval is zero if we set       */
+              : "=&r"(oldval)
+              : "r"(addr), "r"(temp)
+              : "memory", "cc");
+#else
   __asm__ __volatile__(
                "1:ldarx %0,0,%1\n"   /* load and reserve               */
                "cmpdi %0, 0\n"       /* if load is                     */
@@ -134,7 +168,7 @@
               : "=&r"(oldval)
               : "r"(addr), "r"(temp)
               : "memory", "cc");
-
+#endif  
   return (AO_TS_VAL_t)oldval;
 }
 
@@ -145,6 +179,19 @@
   int oldval;
   int temp = 1; /* locked value */
 
+#if defined(_AIX)
+	/* gcc on AIX uses the AIX assembler, so we have to match its syntax */
+  __asm__ __volatile__(
+               "lwarx %0,0,%1\n"     /* load and reserve               */
+               "cmpwi %0, 0\n"       /* if load is                     */
+               "bne $+12\n"          /*   non-zero, return already set */
+               "stwcx. %2,0,%1\n"    /* else store conditional         */
+               "bne- $-16\n"           /* retry if lost reservation      */
+               ""                    /* oldval is zero if we set       */
+              : "=&r"(oldval)
+              : "r"(addr), "r"(temp)
+              : "memory", "cc");
+#else
   __asm__ __volatile__(
                "1:lwarx %0,0,%1\n"   /* load and reserve               */
                "cmpwi %0, 0\n"       /* if load is                     */
@@ -155,7 +202,7 @@
               : "=&r"(oldval)
               : "r"(addr), "r"(temp)
               : "memory", "cc");
-
+#endif
   return (AO_TS_VAL_t)oldval;
 }
 
@@ -198,6 +245,20 @@
   AO_t oldval;
   int result = 0;
 
+#if defined(_AIX)
+	/* gcc on AIX uses the AIX assembler, so we have to match its syntax */
+  __asm__ __volatile__(
+               "ldarx %0,0,%2\n"     /* load and reserve              */
+               "cmpd %0, %4\n"       /* if load is not equal to 	*/
+               "bne $+16\n"          /*   old, fail			*/
+               "stdcx. %3,0,%2\n"    /* else store conditional         */
+               "bne- $-16\n"         /* retry if lost reservation      */
+	           "li %1,1\n"	         /* result = 1;			*/
+               ""
+              : "=&r"(oldval), "=&r"(result)
+              : "r"(addr), "r"(new_val), "r"(old), "1"(result)
+              : "memory", "cc");
+#else
   __asm__ __volatile__(
                "1:ldarx %0,0,%2\n"   /* load and reserve              */
                "cmpd %0, %4\n"      /* if load is not equal to 	*/
@@ -209,7 +270,7 @@
               : "=&r"(oldval), "=&r"(result)
               : "r"(addr), "r"(new_val), "r"(old), "1"(result)
               : "memory", "cc");
-
+#endif
   return result;
 }
 
@@ -220,6 +281,20 @@
   AO_t oldval;
   int result = 0;
 
+#if defined(_AIX)
+	/* gcc on AIX uses the AIX assembler, so we have to match its syntax */
+  __asm__ __volatile__(
+               "lwarx %0,0,%2\n"    /* load and reserve              */
+               "cmpw %0, %4\n"      /* if load is not equal to 	*/
+               "bne $+16\n"         /*   old, fail			*/
+               "stwcx. %3,0,%2\n"   /* else store conditional         */
+               "bne- $-16\n"        /* retry if lost reservation      */
+	           "li %1,1\n"	        /* result = 1;			*/
+               ""
+              : "=&r"(oldval), "=&r"(result)
+              : "r"(addr), "r"(new_val), "r"(old), "1"(result)
+              : "memory", "cc");
+#else
   __asm__ __volatile__(
                "1:lwarx %0,0,%2\n"   /* load and reserve              */
                "cmpw %0, %4\n"      /* if load is not equal to 	*/
@@ -231,7 +306,7 @@
               : "=&r"(oldval), "=&r"(result)
               : "r"(addr), "r"(new_val), "r"(old), "1"(result)
               : "memory", "cc");
-
+#endif
   return result;
 }
 #endif
