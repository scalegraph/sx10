/*
 *  This file is part of the X10 project (http://x10-lang.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  (C) Copyright IBM Corporation 2006-2014.
 */

import harness.x10Test;

/**
 * Given two horizontal strip regions R1 and R2 and a vertical strip
 * region R3 going over R1 and R2 in an 8*8 grid, this test case tests
 * algebraic operations on regions and dists.
 *
 * <code>
          01234567
        0 ++++++++
        1 ++++++++
        2
        3
        4 ********
        5 ********
        6
        7

          01234567
        0     $$
        1     $$
        2     $$
        3     $$
        4     $$
        5     $$
        6     $$
        7     $$

        + region R1
        * region R2
        $ region R3

 * </code>
 *
 * @author kemal 4/2005
 */

public class DistAlgebra extends x10Test {

    public def run(): boolean = {

        val P  = Dist.makeUnique();

        val R1  = [0..1, 0..7] as Region(2); // horizontal strip
        pr("R1", R1);

        val R2  = [4..5, 0..7] as Region(2); // horizontal strip
        pr("R2", R2);

        val R3 = [0..7, 4..5] as Region(2); // vertical strip
        pr("R3", R3);

        val R1orR2 = (R1 || R2);
        pr("R1orR2", R1orR2);

        val R1orR2andR3  = R1orR2 && R3;
        pr("R1orR2andR3", R1orR2andR3);

        chk(R1orR2andR3.equals(([0..1, 4..5] as Region(2)) || ([4..5, 4..5] as Region(2))));
        chk(R1orR2.contains(R1orR2andR3) && R3.contains(R1orR2andR3));

        val R1orR2orR3  = R1 || R2 || R3;
        pr("R1orR2orR3", R1orR2orR3);

        chk(R1orR2orR3.equals(([0..1, 0..7] as Region(2))
            || ([4..5, 0..7] as Region(2))
            || ([2..3, 4..5] as Region(2))
            || ([6..7, 4..5] as Region(2))));

        chk(R1orR2orR3.contains(R1) &&  R1orR2orR3.contains(R2) &&
                R1orR2orR3.contains(R3));

        val R1orR2minusR3 = R1orR2 - R3;
        pr("R1orR2minusR3", R1orR2minusR3);

        chk(R1orR2minusR3.equals(([0..1, 0..3] as Region(2))
           || ([0..1, 6..7] as Region(2))
           || ([4..5, 0..3] as Region(2))
           || ([4..5, 6..7] as Region(2))));

        chk(R1orR2.contains(R1orR2minusR3) && R1orR2minusR3.disjoint(R3));

        //Cyclic dist of R1||R2||R3
        val DR1orR2orR3:Dist(2)  = Dist.makeCyclic(R1orR2orR3, 0);
        pr("DR1orR2orR3", DR1orR2orR3);
        for (val (i,j): Point in DR1orR2orR3) {
            val p = (i - DR1orR2orR3.region.min(0))%Place.MAX_PLACES;
            chk(DR1orR2orR3(i, j) == Place.places(p));
        }

        //Check range restriction to a place
        for (val (k): Point in 0..Place.MAX_PLACES-1) {
            val DR1orR2orR3Here  = DR1orR2orR3 | P(k);
            pr("DR1orR2orR3Here("+k+")", DR1orR2orR3Here);
            for (val (i,j): Point(2) in DR1orR2orR3) {
                chk(iff(DR1orR2orR3(i, j) == P(k),
                        DR1orR2orR3Here.contains([i, j] as Point) &&
                        DR1orR2orR3Here(i, j) == P(k)));
            }
        }

/*
        //DR1orR2andR3 is restriction of DR1orR2orR3 to (R1||R2)&&R3
        val DR1orR2andR3 = DR1orR2orR3 | R1orR2andR3;
        pr("DR1orR2andR3", DR1orR2andR3);
        //DR1orR2minusR3 is restr. of DR1orR2orR3 to (R1||R2)-R3
        val DR1orR2minusR3  = DR1orR2orR3 | R1orR2minusR3;
        pr("DR1orR2minusR3", DR1orR2minusR3);
        val TD1 = DR1orR2orR3 - DR1orR2minusR3;
        pr("TD1", TD1);
        val DR3  = DR1orR2orR3 | R3;
        pr("DR3", DR3);
        chk(TD1.equals(DR3));

        //intersection with common mapping
        //on common points
        val TD2  = (DR1orR2minusR3 && DR1orR2orR3);
        pr("TD2", TD2);
        chk(TD2.equals(DR1orR2minusR3));

        // testing overlay with common mapping on common points
        val DR1orR2 = DR1orR2orR3 | R1orR2;
        pr("DR1orR2", DR1orR2);
        val TD3  = (DR1orR2.overlay(DR3));
        pr("TD3", TD3);
        chk(TD3.equals(DR1orR2orR3));

        //disjoint union
        val TD4  = DR1orR2andR3 || DR1orR2minusR3;
        pr("TD4", TD4);
        chk(TD4.equals(DR1orR2));

        // overlay with common points not
        // necessarily mapping to same place
        val TD9  = Dist.makeConstant(R1orR2andR3, P(0));
        pr("TD9", TD9);
        val Doverlay =  (DR1orR2orR3.overlay(TD9));
        pr("Doverlay", Doverlay);
        for (val (i,j): Point in Doverlay) {
            if (R1orR2andR3.contains([i, j] as Point)) {
                chk(Doverlay(i, j) == P(0) && TD9(i, j) == P(0));
            } else {
                chk(Doverlay(i, j) == DR1orR2orR3(i, j));
            }
        }

        // intersection with common points
        // not necessarily mapping to same place

        // if a point is common and maps to same place
        // in both dists,
        // the point is included in the intersection
        // with the same mapping.
        // Otherwise, the point is not included in
        // intersection.

        val Dintersect:Dist(2) = DR1orR2orR3 && Doverlay;
        pr("Dintersect", Dintersect);
        for (val (i,j): Point(2) in ([0..7, 0..7] as Region)) {
            chk(
                    (DR1orR2orR3.contains([i, j] as Point) &&
                     Doverlay.contains([i, j] as Point) &&
                     DR1orR2orR3(i, j) == Doverlay(i, j)) ?

                    (Dintersect.contains([i, j] as Point) &&
                     Dintersect(i, j) == Doverlay(i, j)) :

                    !Dintersect.contains([i, j] as Point)
               );
        }
*/
        return true;
    }

    static def iff(var x: boolean, var y: boolean): boolean = {
        return (x == y);
    }

    static def pr(var s: String, var d: Dist(2)): void = {
        x10.io.Console.OUT.println();
        x10.io.Console.OUT.println("printing dist "+s);
        var k: int = 0;
        val N: int = 8;
        for (val (i,j): Point in ([0..N-1, 0..N-1] as Region(2))) {
            x10.io.Console.OUT.print(" "+(d.contains([i, j] as Point) ? (""+d(i, j).id) : "."));
            if ((++k) % N == 0) x10.io.Console.OUT.println();
        }
    }

    static def pr(var s: String, var r: Region(2)): void = {
        x10.io.Console.OUT.println();
        x10.io.Console.OUT.println("printing region "+s);
        var k: int = 0;
        val N: int = 8;
        for (val (i,j): Point in ([0..N-1, 0..N-1] as Region(2))) {
            x10.io.Console.OUT.print(" "+(r.contains([i, j] as Point) ? "+" : "."));
            if ((++k) % N == 0) x10.io.Console.OUT.println();
        }
    }

    public static def main(var args: Array[String](1)): void = {
        new DistAlgebra().execute();
    }
}
