/*
 *  This file is part of the X10 project (http://x10-lang.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  (C) Copyright IBM Corporation 2006-2014.
 */

import harness.x10Test;

/**
 * Constant promotions to arrays: (D n)
 * disjoint union and overlay of arrays
 * array lift, scan and reduce.
 *
 * @author kemal 4/2005
 */

public class ArrayAlgebra extends x10Test {

    public static N: int = 24;

    def makeArray(val D: Dist, val k: int): DistArray[int]{dist==D} = {
        return DistArray.make[int](D, (var p: Point) => k);
    }

    public def run(): boolean = {

        val R=0..N-1;
        val D = Dist.makeBlock(R, 0, Place.places);
        val D01 = D | 0..N/2-1;
        val D23 = D | (N/2)..N-1;
        val D0  = D | 0..N/4-1;
        val D1  = D | (N/4)..N/2-1;
        val D2  = D | (N/2)..3*N/4-1;
        val D3  = D | (3*N/4)..N-1;

        val ia1:DistArray[int](1) = 
            makeArray(D, -99)
                .overlay((makeArray(D01, -1) || makeArray(D23, -2))
                .overlay(makeArray(D3, 3))
                .overlay(makeArray(D0, 9)));

        arrEq(ia1 | D0.region, makeArray(D0, 9));
        arrEq(ia1 | D1.region, makeArray(D1, -1));
        arrEq(ia1 | D2.region, makeArray(D2, -2));
        arrEq(ia1 | D3.region, makeArray(D3, 3));

        chk(ia1.reduce(Int.+, 0) == 9*N/4);

        arrEq(ia1.scan(Int.+, 0),
              DistArray.make[Int](D, (var Point (i): Point): int => (ia1 | 0..i).reduce(Int.+, 0)));

        arrEq(makeArray(D01, 1).map(Int.+, makeArray(D01, -4)),
                makeArray(D01, -3));

        // are we still supporting +,-,... on arrays?
        arrEq(makeArray(D01, 1) + makeArray(D01, -4), makeArray(D01, -3) * makeArray(D01, 1));

        return true;
    }

    /**
     * Throw an error iff x and y are not arrays with same
     * content and dist
     */
    static def arrEq(val x: DistArray[int], val y: DistArray[int]): void = {
        chk(x.dist.equals(y.dist));
        finish ateach (val p: Point in x) chk(x(p) == y(p));
    }

    public static def main(var args: Array[String](1)): void = {
        new ArrayAlgebra().execute();
    }
}
