
/*
 *  This file is part of the X10 project (http://x10-lang.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  (C) Copyright IBM Corporation 2006-2014.
 */

import harness.x10Test;

/**
 * A test that checks the constraint system is able to correctly deal with recursive constraints.
 * That is, a constraint on a field that refers to a property of this.
 * In an earlier implementation, we got an infinite recursion in left.itemCheck() in itemCheck()
 * as the system tried to infer the return type of itemCheck().
 * @author vj
 */
public class RecursiveConstraint extends x10Test {
	
static class Tree(home:Place) {
	private val left : Tree{self.home==this.home};
	private val right : Tree;
	private val item: int;

	def this(item:int){
		property(here);
		this.left = null;
		this.right = null;	
		this.item = item;
	}
	
	def this(left:Tree{self.home==here},  right:Tree,  item:int){
		property(here);
		this.left = left; // todo: the compiler reports this error only if we compile this file with all other non-erronous files: Cannot assign expression to target.	 Expression: left	 Expected type: RecursiveConstraint.Tree{self.home==RecursiveConstraint.Tree#this.home}	 Found type: RecursiveConstraint.Tree{self==left}
		this.right = right;	
		this.item = item;
	}
	
	static def bottomUpTree(item:int, depth:int): Tree{self.home==here} = 
    	 (depth>0)?
    		 new Tree(
    				 bottomUpTree(2*item-1, depth-1)
    				 , bottomUpTree(2*item, depth-1)
    				 , item)
    	 : new Tree(item);
    
     
     
     def itemCheck() {
	    if (left==null) return item;
		      else return item + left.itemCheck() - right.itemCheck();
	     }
	    
   }
   public def run() = true;
   public static def main(var args: Array[String](1)) {
		new RecursiveConstraint().execute();
	}
}

