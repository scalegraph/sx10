class SignedTests {
	var w0:Float=0;
	var w1:Double=0;
	var w2:Byte=0;
	var w3:Int=0;
	var w4:Long=0;
	var w5:Short=0;


	def m6():void { var l:Float = (w0)+(w0); }
	def m7():void { var l:Float = (w0)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w0)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m8():void { var l:Float = (w0)+(w2); }
	def m9():void { var l:Float = (w0)+(w3); }
	def m10():void { var l:Float = (w0)+(w4); }
	def m11():void { var l:Float = (w0)+(w5); }
	def m12():void { var l:Float = (w0)+(0); }
	def m13():void { var l:Float = (w0)+(-0); }
	def m14():void { var l:Float = (w0)+(1); }
	def m15():void { var l:Float = (w0)+(-1); }
	def m16():void { var l:Float = (w0)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w0)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m17():void { var l:Float = (w0)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w0)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m18():void { var l:Float = (w0)+(127); }
	def m19():void { var l:Float = (w0)+(-127); }
	def m20():void { var l:Float = (w0)+(128); }
	def m21():void { var l:Float = (w0)+(-128); }
	def m22():void { var l:Float = (w0)+(255); }
	def m23():void { var l:Float = (w0)+(-255); }
	def m24():void { var l:Float = (w0)+(256); }
	def m25():void { var l:Float = (w0)+(-256); }
	def m26():void { var l:Float = (w0)+(32767); }
	def m27():void { var l:Float = (w0)+(-32767); }
	def m28():void { var l:Float = (w0)+(32768); }
	def m29():void { var l:Float = (w0)+(-32768); }
	def m30():void { var l:Float = (w0)+(65535); }
	def m31():void { var l:Float = (w0)+(-65535); }
	def m32():void { var l:Float = (w0)+(65536); }
	def m33():void { var l:Float = (w0)+(-65536); }
	def m34():void { var l:Float = (w0)+(16777216); }
	def m35():void { var l:Float = (w0)+(-16777216); }
	def m36():void { var l:Float = (w0)+(16777217); }
	def m37():void { var l:Float = (w0)+(-16777217); }
	def m38():void { var l:Float = (w0)+(2147483647); }
	def m39():void { var l:Float = (w0)+(-2147483647); }
	def m40():void { var l:Float = (w1)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w0))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m41():void { var l:Float = (w1)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m42():void { var l:Float = (w1)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m43():void { var l:Float = (w1)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m44():void { var l:Float = (w1)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w4))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m45():void { var l:Float = (w1)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m46():void { var l:Float = (w1)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m47():void { var l:Float = (w1)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m48():void { var l:Float = (w1)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((1))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m49():void { var l:Float = (w1)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-1))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m50():void { var l:Float = (w1)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m51():void { var l:Float = (w1)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m52():void { var l:Float = (w1)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((127))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m53():void { var l:Float = (w1)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-127))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m54():void { var l:Float = (w1)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((128))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m55():void { var l:Float = (w1)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-128))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m56():void { var l:Float = (w1)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((255))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m57():void { var l:Float = (w1)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-255))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m58():void { var l:Float = (w1)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((256))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m59():void { var l:Float = (w1)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-256))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m60():void { var l:Float = (w1)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((32767))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m61():void { var l:Float = (w1)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-32767))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m62():void { var l:Float = (w1)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((32768))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m63():void { var l:Float = (w1)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-32768))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m64():void { var l:Float = (w1)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((65535))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m65():void { var l:Float = (w1)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-65535))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m66():void { var l:Float = (w1)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((65536))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m67():void { var l:Float = (w1)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-65536))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m68():void { var l:Float = (w1)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((16777216))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m69():void { var l:Float = (w1)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-16777216))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m70():void { var l:Float = (w1)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((16777217))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m71():void { var l:Float = (w1)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-16777217))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m72():void { var l:Float = (w1)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((2147483647))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m73():void { var l:Float = (w1)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m74():void { var l:Float = (w2)+(w0); }
	def m75():void { var l:Float = (w2)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w2)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m76():void { var l:Float = (w2)+(w2); }
	def m77():void { var l:Float = (w2)+(w3); }
	def m78():void { var l:Float = (w2)+(w4); }
	def m79():void { var l:Float = (w2)+(w5); }
	def m80():void { var l:Float = (w2)+(0); }
	def m81():void { var l:Float = (w2)+(-0); }
	def m82():void { var l:Float = (w2)+(1); }
	def m83():void { var l:Float = (w2)+(-1); }
	def m84():void { var l:Float = (w2)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w2)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m85():void { var l:Float = (w2)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w2)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m86():void { var l:Float = (w2)+(127); }
	def m87():void { var l:Float = (w2)+(-127); }
	def m88():void { var l:Float = (w2)+(128); }
	def m89():void { var l:Float = (w2)+(-128); }
	def m90():void { var l:Float = (w2)+(255); }
	def m91():void { var l:Float = (w2)+(-255); }
	def m92():void { var l:Float = (w2)+(256); }
	def m93():void { var l:Float = (w2)+(-256); }
	def m94():void { var l:Float = (w2)+(32767); }
	def m95():void { var l:Float = (w2)+(-32767); }
	def m96():void { var l:Float = (w2)+(32768); }
	def m97():void { var l:Float = (w2)+(-32768); }
	def m98():void { var l:Float = (w2)+(65535); }
	def m99():void { var l:Float = (w2)+(-65535); }
	def m100():void { var l:Float = (w2)+(65536); }
	def m101():void { var l:Float = (w2)+(-65536); }
	def m102():void { var l:Float = (w2)+(16777216); }
	def m103():void { var l:Float = (w2)+(-16777216); }
	def m104():void { var l:Float = (w2)+(16777217); }
	def m105():void { var l:Float = (w2)+(-16777217); }
	def m106():void { var l:Float = (w2)+(2147483647); }
	def m107():void { var l:Float = (w2)+(-2147483647); }
	def m108():void { var l:Float = (w3)+(w0); }
	def m109():void { var l:Float = (w3)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w3)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m110():void { var l:Float = (w3)+(w2); }
	def m111():void { var l:Float = (w3)+(w3); }
	def m112():void { var l:Float = (w3)+(w4); }
	def m113():void { var l:Float = (w3)+(w5); }
	def m114():void { var l:Float = (w3)+(0); }
	def m115():void { var l:Float = (w3)+(-0); }
	def m116():void { var l:Float = (w3)+(1); }
	def m117():void { var l:Float = (w3)+(-1); }
	def m118():void { var l:Float = (w3)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w3)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m119():void { var l:Float = (w3)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w3)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m120():void { var l:Float = (w3)+(127); }
	def m121():void { var l:Float = (w3)+(-127); }
	def m122():void { var l:Float = (w3)+(128); }
	def m123():void { var l:Float = (w3)+(-128); }
	def m124():void { var l:Float = (w3)+(255); }
	def m125():void { var l:Float = (w3)+(-255); }
	def m126():void { var l:Float = (w3)+(256); }
	def m127():void { var l:Float = (w3)+(-256); }
	def m128():void { var l:Float = (w3)+(32767); }
	def m129():void { var l:Float = (w3)+(-32767); }
	def m130():void { var l:Float = (w3)+(32768); }
	def m131():void { var l:Float = (w3)+(-32768); }
	def m132():void { var l:Float = (w3)+(65535); }
	def m133():void { var l:Float = (w3)+(-65535); }
	def m134():void { var l:Float = (w3)+(65536); }
	def m135():void { var l:Float = (w3)+(-65536); }
	def m136():void { var l:Float = (w3)+(16777216); }
	def m137():void { var l:Float = (w3)+(-16777216); }
	def m138():void { var l:Float = (w3)+(16777217); }
	def m139():void { var l:Float = (w3)+(-16777217); }
	def m140():void { var l:Float = (w3)+(2147483647); }
	def m141():void { var l:Float = (w3)+(-2147483647); }
	def m142():void { var l:Float = (w4)+(w0); }
	def m143():void { var l:Float = (w4)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w4)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m144():void { var l:Float = (w4)+(w2); }
	def m145():void { var l:Float = (w4)+(w3); }
	def m146():void { var l:Float = (w4)+(w4); }
	def m147():void { var l:Float = (w4)+(w5); }
	def m148():void { var l:Float = (w4)+(0); }
	def m149():void { var l:Float = (w4)+(-0); }
	def m150():void { var l:Float = (w4)+(1); }
	def m151():void { var l:Float = (w4)+(-1); }
	def m152():void { var l:Float = (w4)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w4)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m153():void { var l:Float = (w4)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w4)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m154():void { var l:Float = (w4)+(127); }
	def m155():void { var l:Float = (w4)+(-127); }
	def m156():void { var l:Float = (w4)+(128); }
	def m157():void { var l:Float = (w4)+(-128); }
	def m158():void { var l:Float = (w4)+(255); }
	def m159():void { var l:Float = (w4)+(-255); }
	def m160():void { var l:Float = (w4)+(256); }
	def m161():void { var l:Float = (w4)+(-256); }
	def m162():void { var l:Float = (w4)+(32767); }
	def m163():void { var l:Float = (w4)+(-32767); }
	def m164():void { var l:Float = (w4)+(32768); }
	def m165():void { var l:Float = (w4)+(-32768); }
	def m166():void { var l:Float = (w4)+(65535); }
	def m167():void { var l:Float = (w4)+(-65535); }
	def m168():void { var l:Float = (w4)+(65536); }
	def m169():void { var l:Float = (w4)+(-65536); }
	def m170():void { var l:Float = (w4)+(16777216); }
	def m171():void { var l:Float = (w4)+(-16777216); }
	def m172():void { var l:Float = (w4)+(16777217); }
	def m173():void { var l:Float = (w4)+(-16777217); }
	def m174():void { var l:Float = (w4)+(2147483647); }
	def m175():void { var l:Float = (w4)+(-2147483647); }
	def m176():void { var l:Float = (w5)+(w0); }
	def m177():void { var l:Float = (w5)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w5)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m178():void { var l:Float = (w5)+(w2); }
	def m179():void { var l:Float = (w5)+(w3); }
	def m180():void { var l:Float = (w5)+(w4); }
	def m181():void { var l:Float = (w5)+(w5); }
	def m182():void { var l:Float = (w5)+(0); }
	def m183():void { var l:Float = (w5)+(-0); }
	def m184():void { var l:Float = (w5)+(1); }
	def m185():void { var l:Float = (w5)+(-1); }
	def m186():void { var l:Float = (w5)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w5)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m187():void { var l:Float = (w5)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w5)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m188():void { var l:Float = (w5)+(127); }
	def m189():void { var l:Float = (w5)+(-127); }
	def m190():void { var l:Float = (w5)+(128); }
	def m191():void { var l:Float = (w5)+(-128); }
	def m192():void { var l:Float = (w5)+(255); }
	def m193():void { var l:Float = (w5)+(-255); }
	def m194():void { var l:Float = (w5)+(256); }
	def m195():void { var l:Float = (w5)+(-256); }
	def m196():void { var l:Float = (w5)+(32767); }
	def m197():void { var l:Float = (w5)+(-32767); }
	def m198():void { var l:Float = (w5)+(32768); }
	def m199():void { var l:Float = (w5)+(-32768); }
	def m200():void { var l:Float = (w5)+(65535); }
	def m201():void { var l:Float = (w5)+(-65535); }
	def m202():void { var l:Float = (w5)+(65536); }
	def m203():void { var l:Float = (w5)+(-65536); }
	def m204():void { var l:Float = (w5)+(16777216); }
	def m205():void { var l:Float = (w5)+(-16777216); }
	def m206():void { var l:Float = (w5)+(16777217); }
	def m207():void { var l:Float = (w5)+(-16777217); }
	def m208():void { var l:Float = (w5)+(2147483647); }
	def m209():void { var l:Float = (w5)+(-2147483647); }
	def m210():void { var l:Float = (0)+(w0); }
	def m211():void { var l:Float = (0)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m212():void { var l:Float = (0)+(w2); }
	def m213():void { var l:Float = (0)+(w3); }
	def m214():void { var l:Float = (0)+(w4); }
	def m215():void { var l:Float = (0)+(w5); }
	def m216():void { var l:Float = (0)+(0); }
	def m217():void { var l:Float = (0)+(-0); }
	def m218():void { var l:Float = (0)+(1); }
	def m219():void { var l:Float = (0)+(-1); }
	def m220():void { var l:Float = (0)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m221():void { var l:Float = (0)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m222():void { var l:Float = (0)+(127); }
	def m223():void { var l:Float = (0)+(-127); }
	def m224():void { var l:Float = (0)+(128); }
	def m225():void { var l:Float = (0)+(-128); }
	def m226():void { var l:Float = (0)+(255); }
	def m227():void { var l:Float = (0)+(-255); }
	def m228():void { var l:Float = (0)+(256); }
	def m229():void { var l:Float = (0)+(-256); }
	def m230():void { var l:Float = (0)+(32767); }
	def m231():void { var l:Float = (0)+(-32767); }
	def m232():void { var l:Float = (0)+(32768); }
	def m233():void { var l:Float = (0)+(-32768); }
	def m234():void { var l:Float = (0)+(65535); }
	def m235():void { var l:Float = (0)+(-65535); }
	def m236():void { var l:Float = (0)+(65536); }
	def m237():void { var l:Float = (0)+(-65536); }
	def m238():void { var l:Float = (0)+(16777216); }
	def m239():void { var l:Float = (0)+(-16777216); }
	def m240():void { var l:Float = (0)+(16777217); }
	def m241():void { var l:Float = (0)+(-16777217); }
	def m242():void { var l:Float = (0)+(2147483647); }
	def m243():void { var l:Float = (0)+(-2147483647); }
	def m244():void { var l:Float = (-0)+(w0); }
	def m245():void { var l:Float = (-0)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m246():void { var l:Float = (-0)+(w2); }
	def m247():void { var l:Float = (-0)+(w3); }
	def m248():void { var l:Float = (-0)+(w4); }
	def m249():void { var l:Float = (-0)+(w5); }
	def m250():void { var l:Float = (-0)+(0); }
	def m251():void { var l:Float = (-0)+(-0); }
	def m252():void { var l:Float = (-0)+(1); }
	def m253():void { var l:Float = (-0)+(-1); }
	def m254():void { var l:Float = (-0)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m255():void { var l:Float = (-0)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m256():void { var l:Float = (-0)+(127); }
	def m257():void { var l:Float = (-0)+(-127); }
	def m258():void { var l:Float = (-0)+(128); }
	def m259():void { var l:Float = (-0)+(-128); }
	def m260():void { var l:Float = (-0)+(255); }
	def m261():void { var l:Float = (-0)+(-255); }
	def m262():void { var l:Float = (-0)+(256); }
	def m263():void { var l:Float = (-0)+(-256); }
	def m264():void { var l:Float = (-0)+(32767); }
	def m265():void { var l:Float = (-0)+(-32767); }
	def m266():void { var l:Float = (-0)+(32768); }
	def m267():void { var l:Float = (-0)+(-32768); }
	def m268():void { var l:Float = (-0)+(65535); }
	def m269():void { var l:Float = (-0)+(-65535); }
	def m270():void { var l:Float = (-0)+(65536); }
	def m271():void { var l:Float = (-0)+(-65536); }
	def m272():void { var l:Float = (-0)+(16777216); }
	def m273():void { var l:Float = (-0)+(-16777216); }
	def m274():void { var l:Float = (-0)+(16777217); }
	def m275():void { var l:Float = (-0)+(-16777217); }
	def m276():void { var l:Float = (-0)+(2147483647); }
	def m277():void { var l:Float = (-0)+(-2147483647); }
	def m278():void { var l:Float = (1)+(w0); }
	def m279():void { var l:Float = (1)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((1)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m280():void { var l:Float = (1)+(w2); }
	def m281():void { var l:Float = (1)+(w3); }
	def m282():void { var l:Float = (1)+(w4); }
	def m283():void { var l:Float = (1)+(w5); }
	def m284():void { var l:Float = (1)+(0); }
	def m285():void { var l:Float = (1)+(-0); }
	def m286():void { var l:Float = (1)+(1); }
	def m287():void { var l:Float = (1)+(-1); }
	def m288():void { var l:Float = (1)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((1)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m289():void { var l:Float = (1)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((1)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m290():void { var l:Float = (1)+(127); }
	def m291():void { var l:Float = (1)+(-127); }
	def m292():void { var l:Float = (1)+(128); }
	def m293():void { var l:Float = (1)+(-128); }
	def m294():void { var l:Float = (1)+(255); }
	def m295():void { var l:Float = (1)+(-255); }
	def m296():void { var l:Float = (1)+(256); }
	def m297():void { var l:Float = (1)+(-256); }
	def m298():void { var l:Float = (1)+(32767); }
	def m299():void { var l:Float = (1)+(-32767); }
	def m300():void { var l:Float = (1)+(32768); }
	def m301():void { var l:Float = (1)+(-32768); }
	def m302():void { var l:Float = (1)+(65535); }
	def m303():void { var l:Float = (1)+(-65535); }
	def m304():void { var l:Float = (1)+(65536); }
	def m305():void { var l:Float = (1)+(-65536); }
	def m306():void { var l:Float = (1)+(16777216); }
	def m307():void { var l:Float = (1)+(-16777216); }
	def m308():void { var l:Float = (1)+(16777217); }
	def m309():void { var l:Float = (1)+(-16777217); }
	def m310():void { var l:Float = (1)+(2147483647); }
	def m311():void { var l:Float = (1)+(-2147483647); }
	def m312():void { var l:Float = (-1)+(w0); }
	def m313():void { var l:Float = (-1)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-1)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m314():void { var l:Float = (-1)+(w2); }
	def m315():void { var l:Float = (-1)+(w3); }
	def m316():void { var l:Float = (-1)+(w4); }
	def m317():void { var l:Float = (-1)+(w5); }
	def m318():void { var l:Float = (-1)+(0); }
	def m319():void { var l:Float = (-1)+(-0); }
	def m320():void { var l:Float = (-1)+(1); }
	def m321():void { var l:Float = (-1)+(-1); }
	def m322():void { var l:Float = (-1)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-1)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m323():void { var l:Float = (-1)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-1)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m324():void { var l:Float = (-1)+(127); }
	def m325():void { var l:Float = (-1)+(-127); }
	def m326():void { var l:Float = (-1)+(128); }
	def m327():void { var l:Float = (-1)+(-128); }
	def m328():void { var l:Float = (-1)+(255); }
	def m329():void { var l:Float = (-1)+(-255); }
	def m330():void { var l:Float = (-1)+(256); }
	def m331():void { var l:Float = (-1)+(-256); }
	def m332():void { var l:Float = (-1)+(32767); }
	def m333():void { var l:Float = (-1)+(-32767); }
	def m334():void { var l:Float = (-1)+(32768); }
	def m335():void { var l:Float = (-1)+(-32768); }
	def m336():void { var l:Float = (-1)+(65535); }
	def m337():void { var l:Float = (-1)+(-65535); }
	def m338():void { var l:Float = (-1)+(65536); }
	def m339():void { var l:Float = (-1)+(-65536); }
	def m340():void { var l:Float = (-1)+(16777216); }
	def m341():void { var l:Float = (-1)+(-16777216); }
	def m342():void { var l:Float = (-1)+(16777217); }
	def m343():void { var l:Float = (-1)+(-16777217); }
	def m344():void { var l:Float = (-1)+(2147483647); }
	def m345():void { var l:Float = (-1)+(-2147483647); }
	def m346():void { var l:Float = (2.2)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w0))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m347():void { var l:Float = (2.2)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m348():void { var l:Float = (2.2)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m349():void { var l:Float = (2.2)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m350():void { var l:Float = (2.2)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w4))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m351():void { var l:Float = (2.2)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m352():void { var l:Float = (2.2)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m353():void { var l:Float = (2.2)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m354():void { var l:Float = (2.2)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((1))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m355():void { var l:Float = (2.2)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-1))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m356():void { var l:Float = (2.2)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m357():void { var l:Float = (2.2)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m358():void { var l:Float = (2.2)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((127))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m359():void { var l:Float = (2.2)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-127))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m360():void { var l:Float = (2.2)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((128))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m361():void { var l:Float = (2.2)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-128))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m362():void { var l:Float = (2.2)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((255))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m363():void { var l:Float = (2.2)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-255))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m364():void { var l:Float = (2.2)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((256))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m365():void { var l:Float = (2.2)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-256))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m366():void { var l:Float = (2.2)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((32767))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m367():void { var l:Float = (2.2)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-32767))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m368():void { var l:Float = (2.2)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((32768))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m369():void { var l:Float = (2.2)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-32768))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m370():void { var l:Float = (2.2)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((65535))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m371():void { var l:Float = (2.2)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-65535))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m372():void { var l:Float = (2.2)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((65536))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m373():void { var l:Float = (2.2)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-65536))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m374():void { var l:Float = (2.2)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((16777216))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m375():void { var l:Float = (2.2)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-16777216))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m376():void { var l:Float = (2.2)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((16777217))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m377():void { var l:Float = (2.2)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-16777217))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m378():void { var l:Float = (2.2)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((2147483647))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m379():void { var l:Float = (2.2)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m380():void { var l:Float = (-2.2)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w0))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m381():void { var l:Float = (-2.2)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m382():void { var l:Float = (-2.2)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m383():void { var l:Float = (-2.2)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m384():void { var l:Float = (-2.2)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w4))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m385():void { var l:Float = (-2.2)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m386():void { var l:Float = (-2.2)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m387():void { var l:Float = (-2.2)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m388():void { var l:Float = (-2.2)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((1))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m389():void { var l:Float = (-2.2)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-1))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m390():void { var l:Float = (-2.2)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m391():void { var l:Float = (-2.2)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m392():void { var l:Float = (-2.2)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((127))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m393():void { var l:Float = (-2.2)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-127))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m394():void { var l:Float = (-2.2)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((128))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m395():void { var l:Float = (-2.2)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-128))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m396():void { var l:Float = (-2.2)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((255))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m397():void { var l:Float = (-2.2)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-255))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m398():void { var l:Float = (-2.2)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((256))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m399():void { var l:Float = (-2.2)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-256))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m400():void { var l:Float = (-2.2)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((32767))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m401():void { var l:Float = (-2.2)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-32767))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m402():void { var l:Float = (-2.2)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((32768))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m403():void { var l:Float = (-2.2)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-32768))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m404():void { var l:Float = (-2.2)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((65535))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m405():void { var l:Float = (-2.2)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-65535))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m406():void { var l:Float = (-2.2)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((65536))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m407():void { var l:Float = (-2.2)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-65536))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m408():void { var l:Float = (-2.2)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((16777216))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m409():void { var l:Float = (-2.2)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-16777216))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m410():void { var l:Float = (-2.2)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((16777217))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m411():void { var l:Float = (-2.2)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-16777217))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m412():void { var l:Float = (-2.2)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((2147483647))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m413():void { var l:Float = (-2.2)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m414():void { var l:Float = (127)+(w0); }
	def m415():void { var l:Float = (127)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((127)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m416():void { var l:Float = (127)+(w2); }
	def m417():void { var l:Float = (127)+(w3); }
	def m418():void { var l:Float = (127)+(w4); }
	def m419():void { var l:Float = (127)+(w5); }
	def m420():void { var l:Float = (127)+(0); }
	def m421():void { var l:Float = (127)+(-0); }
	def m422():void { var l:Float = (127)+(1); }
	def m423():void { var l:Float = (127)+(-1); }
	def m424():void { var l:Float = (127)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((127)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m425():void { var l:Float = (127)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((127)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m426():void { var l:Float = (127)+(127); }
	def m427():void { var l:Float = (127)+(-127); }
	def m428():void { var l:Float = (127)+(128); }
	def m429():void { var l:Float = (127)+(-128); }
	def m430():void { var l:Float = (127)+(255); }
	def m431():void { var l:Float = (127)+(-255); }
	def m432():void { var l:Float = (127)+(256); }
	def m433():void { var l:Float = (127)+(-256); }
	def m434():void { var l:Float = (127)+(32767); }
	def m435():void { var l:Float = (127)+(-32767); }
	def m436():void { var l:Float = (127)+(32768); }
	def m437():void { var l:Float = (127)+(-32768); }
	def m438():void { var l:Float = (127)+(65535); }
	def m439():void { var l:Float = (127)+(-65535); }
	def m440():void { var l:Float = (127)+(65536); }
	def m441():void { var l:Float = (127)+(-65536); }
	def m442():void { var l:Float = (127)+(16777216); }
	def m443():void { var l:Float = (127)+(-16777216); }
	def m444():void { var l:Float = (127)+(16777217); }
	def m445():void { var l:Float = (127)+(-16777217); }
	def m446():void { var l:Float = (127)+(2147483647); }
	def m447():void { var l:Float = (127)+(-2147483647); }
	def m448():void { var l:Float = (-127)+(w0); }
	def m449():void { var l:Float = (-127)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-127)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m450():void { var l:Float = (-127)+(w2); }
	def m451():void { var l:Float = (-127)+(w3); }
	def m452():void { var l:Float = (-127)+(w4); }
	def m453():void { var l:Float = (-127)+(w5); }
	def m454():void { var l:Float = (-127)+(0); }
	def m455():void { var l:Float = (-127)+(-0); }
	def m456():void { var l:Float = (-127)+(1); }
	def m457():void { var l:Float = (-127)+(-1); }
	def m458():void { var l:Float = (-127)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-127)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m459():void { var l:Float = (-127)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-127)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m460():void { var l:Float = (-127)+(127); }
	def m461():void { var l:Float = (-127)+(-127); }
	def m462():void { var l:Float = (-127)+(128); }
	def m463():void { var l:Float = (-127)+(-128); }
	def m464():void { var l:Float = (-127)+(255); }
	def m465():void { var l:Float = (-127)+(-255); }
	def m466():void { var l:Float = (-127)+(256); }
	def m467():void { var l:Float = (-127)+(-256); }
	def m468():void { var l:Float = (-127)+(32767); }
	def m469():void { var l:Float = (-127)+(-32767); }
	def m470():void { var l:Float = (-127)+(32768); }
	def m471():void { var l:Float = (-127)+(-32768); }
	def m472():void { var l:Float = (-127)+(65535); }
	def m473():void { var l:Float = (-127)+(-65535); }
	def m474():void { var l:Float = (-127)+(65536); }
	def m475():void { var l:Float = (-127)+(-65536); }
	def m476():void { var l:Float = (-127)+(16777216); }
	def m477():void { var l:Float = (-127)+(-16777216); }
	def m478():void { var l:Float = (-127)+(16777217); }
	def m479():void { var l:Float = (-127)+(-16777217); }
	def m480():void { var l:Float = (-127)+(2147483647); }
	def m481():void { var l:Float = (-127)+(-2147483647); }
	def m482():void { var l:Float = (128)+(w0); }
	def m483():void { var l:Float = (128)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((128)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m484():void { var l:Float = (128)+(w2); }
	def m485():void { var l:Float = (128)+(w3); }
	def m486():void { var l:Float = (128)+(w4); }
	def m487():void { var l:Float = (128)+(w5); }
	def m488():void { var l:Float = (128)+(0); }
	def m489():void { var l:Float = (128)+(-0); }
	def m490():void { var l:Float = (128)+(1); }
	def m491():void { var l:Float = (128)+(-1); }
	def m492():void { var l:Float = (128)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((128)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m493():void { var l:Float = (128)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((128)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m494():void { var l:Float = (128)+(127); }
	def m495():void { var l:Float = (128)+(-127); }
	def m496():void { var l:Float = (128)+(128); }
	def m497():void { var l:Float = (128)+(-128); }
	def m498():void { var l:Float = (128)+(255); }
	def m499():void { var l:Float = (128)+(-255); }
	def m500():void { var l:Float = (128)+(256); }
	def m501():void { var l:Float = (128)+(-256); }
	def m502():void { var l:Float = (128)+(32767); }
	def m503():void { var l:Float = (128)+(-32767); }
	def m504():void { var l:Float = (128)+(32768); }
	def m505():void { var l:Float = (128)+(-32768); }
	def m506():void { var l:Float = (128)+(65535); }
	def m507():void { var l:Float = (128)+(-65535); }
	def m508():void { var l:Float = (128)+(65536); }
	def m509():void { var l:Float = (128)+(-65536); }
	def m510():void { var l:Float = (128)+(16777216); }
	def m511():void { var l:Float = (128)+(-16777216); }
	def m512():void { var l:Float = (128)+(16777217); }
	def m513():void { var l:Float = (128)+(-16777217); }
	def m514():void { var l:Float = (128)+(2147483647); }
	def m515():void { var l:Float = (128)+(-2147483647); }
	def m516():void { var l:Float = (-128)+(w0); }
	def m517():void { var l:Float = (-128)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-128)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m518():void { var l:Float = (-128)+(w2); }
	def m519():void { var l:Float = (-128)+(w3); }
	def m520():void { var l:Float = (-128)+(w4); }
	def m521():void { var l:Float = (-128)+(w5); }
	def m522():void { var l:Float = (-128)+(0); }
	def m523():void { var l:Float = (-128)+(-0); }
	def m524():void { var l:Float = (-128)+(1); }
	def m525():void { var l:Float = (-128)+(-1); }
	def m526():void { var l:Float = (-128)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-128)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m527():void { var l:Float = (-128)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-128)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m528():void { var l:Float = (-128)+(127); }
	def m529():void { var l:Float = (-128)+(-127); }
	def m530():void { var l:Float = (-128)+(128); }
	def m531():void { var l:Float = (-128)+(-128); }
	def m532():void { var l:Float = (-128)+(255); }
	def m533():void { var l:Float = (-128)+(-255); }
	def m534():void { var l:Float = (-128)+(256); }
	def m535():void { var l:Float = (-128)+(-256); }
	def m536():void { var l:Float = (-128)+(32767); }
	def m537():void { var l:Float = (-128)+(-32767); }
	def m538():void { var l:Float = (-128)+(32768); }
	def m539():void { var l:Float = (-128)+(-32768); }
	def m540():void { var l:Float = (-128)+(65535); }
	def m541():void { var l:Float = (-128)+(-65535); }
	def m542():void { var l:Float = (-128)+(65536); }
	def m543():void { var l:Float = (-128)+(-65536); }
	def m544():void { var l:Float = (-128)+(16777216); }
	def m545():void { var l:Float = (-128)+(-16777216); }
	def m546():void { var l:Float = (-128)+(16777217); }
	def m547():void { var l:Float = (-128)+(-16777217); }
	def m548():void { var l:Float = (-128)+(2147483647); }
	def m549():void { var l:Float = (-128)+(-2147483647); }
	def m550():void { var l:Float = (255)+(w0); }
	def m551():void { var l:Float = (255)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((255)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m552():void { var l:Float = (255)+(w2); }
	def m553():void { var l:Float = (255)+(w3); }
	def m554():void { var l:Float = (255)+(w4); }
	def m555():void { var l:Float = (255)+(w5); }
	def m556():void { var l:Float = (255)+(0); }
	def m557():void { var l:Float = (255)+(-0); }
	def m558():void { var l:Float = (255)+(1); }
	def m559():void { var l:Float = (255)+(-1); }
	def m560():void { var l:Float = (255)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((255)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m561():void { var l:Float = (255)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((255)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m562():void { var l:Float = (255)+(127); }
	def m563():void { var l:Float = (255)+(-127); }
	def m564():void { var l:Float = (255)+(128); }
	def m565():void { var l:Float = (255)+(-128); }
	def m566():void { var l:Float = (255)+(255); }
	def m567():void { var l:Float = (255)+(-255); }
	def m568():void { var l:Float = (255)+(256); }
	def m569():void { var l:Float = (255)+(-256); }
	def m570():void { var l:Float = (255)+(32767); }
	def m571():void { var l:Float = (255)+(-32767); }
	def m572():void { var l:Float = (255)+(32768); }
	def m573():void { var l:Float = (255)+(-32768); }
	def m574():void { var l:Float = (255)+(65535); }
	def m575():void { var l:Float = (255)+(-65535); }
	def m576():void { var l:Float = (255)+(65536); }
	def m577():void { var l:Float = (255)+(-65536); }
	def m578():void { var l:Float = (255)+(16777216); }
	def m579():void { var l:Float = (255)+(-16777216); }
	def m580():void { var l:Float = (255)+(16777217); }
	def m581():void { var l:Float = (255)+(-16777217); }
	def m582():void { var l:Float = (255)+(2147483647); }
	def m583():void { var l:Float = (255)+(-2147483647); }
	def m584():void { var l:Float = (-255)+(w0); }
	def m585():void { var l:Float = (-255)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-255)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m586():void { var l:Float = (-255)+(w2); }
	def m587():void { var l:Float = (-255)+(w3); }
	def m588():void { var l:Float = (-255)+(w4); }
	def m589():void { var l:Float = (-255)+(w5); }
	def m590():void { var l:Float = (-255)+(0); }
	def m591():void { var l:Float = (-255)+(-0); }
	def m592():void { var l:Float = (-255)+(1); }
	def m593():void { var l:Float = (-255)+(-1); }
	def m594():void { var l:Float = (-255)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-255)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m595():void { var l:Float = (-255)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-255)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m596():void { var l:Float = (-255)+(127); }
	def m597():void { var l:Float = (-255)+(-127); }
	def m598():void { var l:Float = (-255)+(128); }
	def m599():void { var l:Float = (-255)+(-128); }
	def m600():void { var l:Float = (-255)+(255); }
	def m601():void { var l:Float = (-255)+(-255); }
	def m602():void { var l:Float = (-255)+(256); }
	def m603():void { var l:Float = (-255)+(-256); }
	def m604():void { var l:Float = (-255)+(32767); }
	def m605():void { var l:Float = (-255)+(-32767); }
	def m606():void { var l:Float = (-255)+(32768); }
	def m607():void { var l:Float = (-255)+(-32768); }
	def m608():void { var l:Float = (-255)+(65535); }
	def m609():void { var l:Float = (-255)+(-65535); }
	def m610():void { var l:Float = (-255)+(65536); }
	def m611():void { var l:Float = (-255)+(-65536); }
	def m612():void { var l:Float = (-255)+(16777216); }
	def m613():void { var l:Float = (-255)+(-16777216); }
	def m614():void { var l:Float = (-255)+(16777217); }
	def m615():void { var l:Float = (-255)+(-16777217); }
	def m616():void { var l:Float = (-255)+(2147483647); }
	def m617():void { var l:Float = (-255)+(-2147483647); }
	def m618():void { var l:Float = (256)+(w0); }
	def m619():void { var l:Float = (256)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((256)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m620():void { var l:Float = (256)+(w2); }
	def m621():void { var l:Float = (256)+(w3); }
	def m622():void { var l:Float = (256)+(w4); }
	def m623():void { var l:Float = (256)+(w5); }
	def m624():void { var l:Float = (256)+(0); }
	def m625():void { var l:Float = (256)+(-0); }
	def m626():void { var l:Float = (256)+(1); }
	def m627():void { var l:Float = (256)+(-1); }
	def m628():void { var l:Float = (256)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((256)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m629():void { var l:Float = (256)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((256)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m630():void { var l:Float = (256)+(127); }
	def m631():void { var l:Float = (256)+(-127); }
	def m632():void { var l:Float = (256)+(128); }
	def m633():void { var l:Float = (256)+(-128); }
	def m634():void { var l:Float = (256)+(255); }
	def m635():void { var l:Float = (256)+(-255); }
	def m636():void { var l:Float = (256)+(256); }
	def m637():void { var l:Float = (256)+(-256); }
	def m638():void { var l:Float = (256)+(32767); }
	def m639():void { var l:Float = (256)+(-32767); }
	def m640():void { var l:Float = (256)+(32768); }
	def m641():void { var l:Float = (256)+(-32768); }
	def m642():void { var l:Float = (256)+(65535); }
	def m643():void { var l:Float = (256)+(-65535); }
	def m644():void { var l:Float = (256)+(65536); }
	def m645():void { var l:Float = (256)+(-65536); }
	def m646():void { var l:Float = (256)+(16777216); }
	def m647():void { var l:Float = (256)+(-16777216); }
	def m648():void { var l:Float = (256)+(16777217); }
	def m649():void { var l:Float = (256)+(-16777217); }
	def m650():void { var l:Float = (256)+(2147483647); }
	def m651():void { var l:Float = (256)+(-2147483647); }
	def m652():void { var l:Float = (-256)+(w0); }
	def m653():void { var l:Float = (-256)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-256)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m654():void { var l:Float = (-256)+(w2); }
	def m655():void { var l:Float = (-256)+(w3); }
	def m656():void { var l:Float = (-256)+(w4); }
	def m657():void { var l:Float = (-256)+(w5); }
	def m658():void { var l:Float = (-256)+(0); }
	def m659():void { var l:Float = (-256)+(-0); }
	def m660():void { var l:Float = (-256)+(1); }
	def m661():void { var l:Float = (-256)+(-1); }
	def m662():void { var l:Float = (-256)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-256)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m663():void { var l:Float = (-256)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-256)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m664():void { var l:Float = (-256)+(127); }
	def m665():void { var l:Float = (-256)+(-127); }
	def m666():void { var l:Float = (-256)+(128); }
	def m667():void { var l:Float = (-256)+(-128); }
	def m668():void { var l:Float = (-256)+(255); }
	def m669():void { var l:Float = (-256)+(-255); }
	def m670():void { var l:Float = (-256)+(256); }
	def m671():void { var l:Float = (-256)+(-256); }
	def m672():void { var l:Float = (-256)+(32767); }
	def m673():void { var l:Float = (-256)+(-32767); }
	def m674():void { var l:Float = (-256)+(32768); }
	def m675():void { var l:Float = (-256)+(-32768); }
	def m676():void { var l:Float = (-256)+(65535); }
	def m677():void { var l:Float = (-256)+(-65535); }
	def m678():void { var l:Float = (-256)+(65536); }
	def m679():void { var l:Float = (-256)+(-65536); }
	def m680():void { var l:Float = (-256)+(16777216); }
	def m681():void { var l:Float = (-256)+(-16777216); }
	def m682():void { var l:Float = (-256)+(16777217); }
	def m683():void { var l:Float = (-256)+(-16777217); }
	def m684():void { var l:Float = (-256)+(2147483647); }
	def m685():void { var l:Float = (-256)+(-2147483647); }
	def m686():void { var l:Float = (32767)+(w0); }
	def m687():void { var l:Float = (32767)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32767)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m688():void { var l:Float = (32767)+(w2); }
	def m689():void { var l:Float = (32767)+(w3); }
	def m690():void { var l:Float = (32767)+(w4); }
	def m691():void { var l:Float = (32767)+(w5); }
	def m692():void { var l:Float = (32767)+(0); }
	def m693():void { var l:Float = (32767)+(-0); }
	def m694():void { var l:Float = (32767)+(1); }
	def m695():void { var l:Float = (32767)+(-1); }
	def m696():void { var l:Float = (32767)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32767)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m697():void { var l:Float = (32767)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32767)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m698():void { var l:Float = (32767)+(127); }
	def m699():void { var l:Float = (32767)+(-127); }
	def m700():void { var l:Float = (32767)+(128); }
	def m701():void { var l:Float = (32767)+(-128); }
	def m702():void { var l:Float = (32767)+(255); }
	def m703():void { var l:Float = (32767)+(-255); }
	def m704():void { var l:Float = (32767)+(256); }
	def m705():void { var l:Float = (32767)+(-256); }
	def m706():void { var l:Float = (32767)+(32767); }
	def m707():void { var l:Float = (32767)+(-32767); }
	def m708():void { var l:Float = (32767)+(32768); }
	def m709():void { var l:Float = (32767)+(-32768); }
	def m710():void { var l:Float = (32767)+(65535); }
	def m711():void { var l:Float = (32767)+(-65535); }
	def m712():void { var l:Float = (32767)+(65536); }
	def m713():void { var l:Float = (32767)+(-65536); }
	def m714():void { var l:Float = (32767)+(16777216); }
	def m715():void { var l:Float = (32767)+(-16777216); }
	def m716():void { var l:Float = (32767)+(16777217); }
	def m717():void { var l:Float = (32767)+(-16777217); }
	def m718():void { var l:Float = (32767)+(2147483647); }
	def m719():void { var l:Float = (32767)+(-2147483647); }
	def m720():void { var l:Float = (-32767)+(w0); }
	def m721():void { var l:Float = (-32767)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32767)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m722():void { var l:Float = (-32767)+(w2); }
	def m723():void { var l:Float = (-32767)+(w3); }
	def m724():void { var l:Float = (-32767)+(w4); }
	def m725():void { var l:Float = (-32767)+(w5); }
	def m726():void { var l:Float = (-32767)+(0); }
	def m727():void { var l:Float = (-32767)+(-0); }
	def m728():void { var l:Float = (-32767)+(1); }
	def m729():void { var l:Float = (-32767)+(-1); }
	def m730():void { var l:Float = (-32767)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32767)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m731():void { var l:Float = (-32767)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32767)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m732():void { var l:Float = (-32767)+(127); }
	def m733():void { var l:Float = (-32767)+(-127); }
	def m734():void { var l:Float = (-32767)+(128); }
	def m735():void { var l:Float = (-32767)+(-128); }
	def m736():void { var l:Float = (-32767)+(255); }
	def m737():void { var l:Float = (-32767)+(-255); }
	def m738():void { var l:Float = (-32767)+(256); }
	def m739():void { var l:Float = (-32767)+(-256); }
	def m740():void { var l:Float = (-32767)+(32767); }
	def m741():void { var l:Float = (-32767)+(-32767); }
	def m742():void { var l:Float = (-32767)+(32768); }
	def m743():void { var l:Float = (-32767)+(-32768); }
	def m744():void { var l:Float = (-32767)+(65535); }
	def m745():void { var l:Float = (-32767)+(-65535); }
	def m746():void { var l:Float = (-32767)+(65536); }
	def m747():void { var l:Float = (-32767)+(-65536); }
	def m748():void { var l:Float = (-32767)+(16777216); }
	def m749():void { var l:Float = (-32767)+(-16777216); }
	def m750():void { var l:Float = (-32767)+(16777217); }
	def m751():void { var l:Float = (-32767)+(-16777217); }
	def m752():void { var l:Float = (-32767)+(2147483647); }
	def m753():void { var l:Float = (-32767)+(-2147483647); }
	def m754():void { var l:Float = (32768)+(w0); }
	def m755():void { var l:Float = (32768)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32768)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m756():void { var l:Float = (32768)+(w2); }
	def m757():void { var l:Float = (32768)+(w3); }
	def m758():void { var l:Float = (32768)+(w4); }
	def m759():void { var l:Float = (32768)+(w5); }
	def m760():void { var l:Float = (32768)+(0); }
	def m761():void { var l:Float = (32768)+(-0); }
	def m762():void { var l:Float = (32768)+(1); }
	def m763():void { var l:Float = (32768)+(-1); }
	def m764():void { var l:Float = (32768)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32768)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m765():void { var l:Float = (32768)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32768)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m766():void { var l:Float = (32768)+(127); }
	def m767():void { var l:Float = (32768)+(-127); }
	def m768():void { var l:Float = (32768)+(128); }
	def m769():void { var l:Float = (32768)+(-128); }
	def m770():void { var l:Float = (32768)+(255); }
	def m771():void { var l:Float = (32768)+(-255); }
	def m772():void { var l:Float = (32768)+(256); }
	def m773():void { var l:Float = (32768)+(-256); }
	def m774():void { var l:Float = (32768)+(32767); }
	def m775():void { var l:Float = (32768)+(-32767); }
	def m776():void { var l:Float = (32768)+(32768); }
	def m777():void { var l:Float = (32768)+(-32768); }
	def m778():void { var l:Float = (32768)+(65535); }
	def m779():void { var l:Float = (32768)+(-65535); }
	def m780():void { var l:Float = (32768)+(65536); }
	def m781():void { var l:Float = (32768)+(-65536); }
	def m782():void { var l:Float = (32768)+(16777216); }
	def m783():void { var l:Float = (32768)+(-16777216); }
	def m784():void { var l:Float = (32768)+(16777217); }
	def m785():void { var l:Float = (32768)+(-16777217); }
	def m786():void { var l:Float = (32768)+(2147483647); }
	def m787():void { var l:Float = (32768)+(-2147483647); }
	def m788():void { var l:Float = (-32768)+(w0); }
	def m789():void { var l:Float = (-32768)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32768)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m790():void { var l:Float = (-32768)+(w2); }
	def m791():void { var l:Float = (-32768)+(w3); }
	def m792():void { var l:Float = (-32768)+(w4); }
	def m793():void { var l:Float = (-32768)+(w5); }
	def m794():void { var l:Float = (-32768)+(0); }
	def m795():void { var l:Float = (-32768)+(-0); }
	def m796():void { var l:Float = (-32768)+(1); }
	def m797():void { var l:Float = (-32768)+(-1); }
	def m798():void { var l:Float = (-32768)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32768)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m799():void { var l:Float = (-32768)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32768)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m800():void { var l:Float = (-32768)+(127); }
	def m801():void { var l:Float = (-32768)+(-127); }
	def m802():void { var l:Float = (-32768)+(128); }
	def m803():void { var l:Float = (-32768)+(-128); }
	def m804():void { var l:Float = (-32768)+(255); }
	def m805():void { var l:Float = (-32768)+(-255); }
	def m806():void { var l:Float = (-32768)+(256); }
	def m807():void { var l:Float = (-32768)+(-256); }
	def m808():void { var l:Float = (-32768)+(32767); }
	def m809():void { var l:Float = (-32768)+(-32767); }
	def m810():void { var l:Float = (-32768)+(32768); }
	def m811():void { var l:Float = (-32768)+(-32768); }
	def m812():void { var l:Float = (-32768)+(65535); }
	def m813():void { var l:Float = (-32768)+(-65535); }
	def m814():void { var l:Float = (-32768)+(65536); }
	def m815():void { var l:Float = (-32768)+(-65536); }
	def m816():void { var l:Float = (-32768)+(16777216); }
	def m817():void { var l:Float = (-32768)+(-16777216); }
	def m818():void { var l:Float = (-32768)+(16777217); }
	def m819():void { var l:Float = (-32768)+(-16777217); }
	def m820():void { var l:Float = (-32768)+(2147483647); }
	def m821():void { var l:Float = (-32768)+(-2147483647); }
	def m822():void { var l:Float = (65535)+(w0); }
	def m823():void { var l:Float = (65535)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65535)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m824():void { var l:Float = (65535)+(w2); }
	def m825():void { var l:Float = (65535)+(w3); }
	def m826():void { var l:Float = (65535)+(w4); }
	def m827():void { var l:Float = (65535)+(w5); }
	def m828():void { var l:Float = (65535)+(0); }
	def m829():void { var l:Float = (65535)+(-0); }
	def m830():void { var l:Float = (65535)+(1); }
	def m831():void { var l:Float = (65535)+(-1); }
	def m832():void { var l:Float = (65535)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65535)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m833():void { var l:Float = (65535)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65535)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m834():void { var l:Float = (65535)+(127); }
	def m835():void { var l:Float = (65535)+(-127); }
	def m836():void { var l:Float = (65535)+(128); }
	def m837():void { var l:Float = (65535)+(-128); }
	def m838():void { var l:Float = (65535)+(255); }
	def m839():void { var l:Float = (65535)+(-255); }
	def m840():void { var l:Float = (65535)+(256); }
	def m841():void { var l:Float = (65535)+(-256); }
	def m842():void { var l:Float = (65535)+(32767); }
	def m843():void { var l:Float = (65535)+(-32767); }
	def m844():void { var l:Float = (65535)+(32768); }
	def m845():void { var l:Float = (65535)+(-32768); }
	def m846():void { var l:Float = (65535)+(65535); }
	def m847():void { var l:Float = (65535)+(-65535); }
	def m848():void { var l:Float = (65535)+(65536); }
	def m849():void { var l:Float = (65535)+(-65536); }
	def m850():void { var l:Float = (65535)+(16777216); }
	def m851():void { var l:Float = (65535)+(-16777216); }
	def m852():void { var l:Float = (65535)+(16777217); }
	def m853():void { var l:Float = (65535)+(-16777217); }
	def m854():void { var l:Float = (65535)+(2147483647); }
	def m855():void { var l:Float = (65535)+(-2147483647); }
	def m856():void { var l:Float = (-65535)+(w0); }
	def m857():void { var l:Float = (-65535)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65535)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m858():void { var l:Float = (-65535)+(w2); }
	def m859():void { var l:Float = (-65535)+(w3); }
	def m860():void { var l:Float = (-65535)+(w4); }
	def m861():void { var l:Float = (-65535)+(w5); }
	def m862():void { var l:Float = (-65535)+(0); }
	def m863():void { var l:Float = (-65535)+(-0); }
	def m864():void { var l:Float = (-65535)+(1); }
	def m865():void { var l:Float = (-65535)+(-1); }
	def m866():void { var l:Float = (-65535)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65535)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m867():void { var l:Float = (-65535)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65535)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m868():void { var l:Float = (-65535)+(127); }
	def m869():void { var l:Float = (-65535)+(-127); }
	def m870():void { var l:Float = (-65535)+(128); }
	def m871():void { var l:Float = (-65535)+(-128); }
	def m872():void { var l:Float = (-65535)+(255); }
	def m873():void { var l:Float = (-65535)+(-255); }
	def m874():void { var l:Float = (-65535)+(256); }
	def m875():void { var l:Float = (-65535)+(-256); }
	def m876():void { var l:Float = (-65535)+(32767); }
	def m877():void { var l:Float = (-65535)+(-32767); }
	def m878():void { var l:Float = (-65535)+(32768); }
	def m879():void { var l:Float = (-65535)+(-32768); }
	def m880():void { var l:Float = (-65535)+(65535); }
	def m881():void { var l:Float = (-65535)+(-65535); }
	def m882():void { var l:Float = (-65535)+(65536); }
	def m883():void { var l:Float = (-65535)+(-65536); }
	def m884():void { var l:Float = (-65535)+(16777216); }
	def m885():void { var l:Float = (-65535)+(-16777216); }
	def m886():void { var l:Float = (-65535)+(16777217); }
	def m887():void { var l:Float = (-65535)+(-16777217); }
	def m888():void { var l:Float = (-65535)+(2147483647); }
	def m889():void { var l:Float = (-65535)+(-2147483647); }
	def m890():void { var l:Float = (65536)+(w0); }
	def m891():void { var l:Float = (65536)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65536)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m892():void { var l:Float = (65536)+(w2); }
	def m893():void { var l:Float = (65536)+(w3); }
	def m894():void { var l:Float = (65536)+(w4); }
	def m895():void { var l:Float = (65536)+(w5); }
	def m896():void { var l:Float = (65536)+(0); }
	def m897():void { var l:Float = (65536)+(-0); }
	def m898():void { var l:Float = (65536)+(1); }
	def m899():void { var l:Float = (65536)+(-1); }
	def m900():void { var l:Float = (65536)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65536)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m901():void { var l:Float = (65536)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65536)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m902():void { var l:Float = (65536)+(127); }
	def m903():void { var l:Float = (65536)+(-127); }
	def m904():void { var l:Float = (65536)+(128); }
	def m905():void { var l:Float = (65536)+(-128); }
	def m906():void { var l:Float = (65536)+(255); }
	def m907():void { var l:Float = (65536)+(-255); }
	def m908():void { var l:Float = (65536)+(256); }
	def m909():void { var l:Float = (65536)+(-256); }
	def m910():void { var l:Float = (65536)+(32767); }
	def m911():void { var l:Float = (65536)+(-32767); }
	def m912():void { var l:Float = (65536)+(32768); }
	def m913():void { var l:Float = (65536)+(-32768); }
	def m914():void { var l:Float = (65536)+(65535); }
	def m915():void { var l:Float = (65536)+(-65535); }
	def m916():void { var l:Float = (65536)+(65536); }
	def m917():void { var l:Float = (65536)+(-65536); }
	def m918():void { var l:Float = (65536)+(16777216); }
	def m919():void { var l:Float = (65536)+(-16777216); }
	def m920():void { var l:Float = (65536)+(16777217); }
	def m921():void { var l:Float = (65536)+(-16777217); }
	def m922():void { var l:Float = (65536)+(2147483647); }
	def m923():void { var l:Float = (65536)+(-2147483647); }
	def m924():void { var l:Float = (-65536)+(w0); }
	def m925():void { var l:Float = (-65536)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65536)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m926():void { var l:Float = (-65536)+(w2); }
	def m927():void { var l:Float = (-65536)+(w3); }
	def m928():void { var l:Float = (-65536)+(w4); }
	def m929():void { var l:Float = (-65536)+(w5); }
	def m930():void { var l:Float = (-65536)+(0); }
	def m931():void { var l:Float = (-65536)+(-0); }
	def m932():void { var l:Float = (-65536)+(1); }
	def m933():void { var l:Float = (-65536)+(-1); }
	def m934():void { var l:Float = (-65536)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65536)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m935():void { var l:Float = (-65536)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65536)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m936():void { var l:Float = (-65536)+(127); }
	def m937():void { var l:Float = (-65536)+(-127); }
	def m938():void { var l:Float = (-65536)+(128); }
	def m939():void { var l:Float = (-65536)+(-128); }
	def m940():void { var l:Float = (-65536)+(255); }
	def m941():void { var l:Float = (-65536)+(-255); }
	def m942():void { var l:Float = (-65536)+(256); }
	def m943():void { var l:Float = (-65536)+(-256); }
	def m944():void { var l:Float = (-65536)+(32767); }
	def m945():void { var l:Float = (-65536)+(-32767); }
	def m946():void { var l:Float = (-65536)+(32768); }
	def m947():void { var l:Float = (-65536)+(-32768); }
	def m948():void { var l:Float = (-65536)+(65535); }
	def m949():void { var l:Float = (-65536)+(-65535); }
	def m950():void { var l:Float = (-65536)+(65536); }
	def m951():void { var l:Float = (-65536)+(-65536); }
	def m952():void { var l:Float = (-65536)+(16777216); }
	def m953():void { var l:Float = (-65536)+(-16777216); }
	def m954():void { var l:Float = (-65536)+(16777217); }
	def m955():void { var l:Float = (-65536)+(-16777217); }
	def m956():void { var l:Float = (-65536)+(2147483647); }
	def m957():void { var l:Float = (-65536)+(-2147483647); }
	def m958():void { var l:Float = (16777216)+(w0); }
	def m959():void { var l:Float = (16777216)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777216)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m960():void { var l:Float = (16777216)+(w2); }
	def m961():void { var l:Float = (16777216)+(w3); }
	def m962():void { var l:Float = (16777216)+(w4); }
	def m963():void { var l:Float = (16777216)+(w5); }
	def m964():void { var l:Float = (16777216)+(0); }
	def m965():void { var l:Float = (16777216)+(-0); }
	def m966():void { var l:Float = (16777216)+(1); }
	def m967():void { var l:Float = (16777216)+(-1); }
	def m968():void { var l:Float = (16777216)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777216)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m969():void { var l:Float = (16777216)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777216)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m970():void { var l:Float = (16777216)+(127); }
	def m971():void { var l:Float = (16777216)+(-127); }
	def m972():void { var l:Float = (16777216)+(128); }
	def m973():void { var l:Float = (16777216)+(-128); }
	def m974():void { var l:Float = (16777216)+(255); }
	def m975():void { var l:Float = (16777216)+(-255); }
	def m976():void { var l:Float = (16777216)+(256); }
	def m977():void { var l:Float = (16777216)+(-256); }
	def m978():void { var l:Float = (16777216)+(32767); }
	def m979():void { var l:Float = (16777216)+(-32767); }
	def m980():void { var l:Float = (16777216)+(32768); }
	def m981():void { var l:Float = (16777216)+(-32768); }
	def m982():void { var l:Float = (16777216)+(65535); }
	def m983():void { var l:Float = (16777216)+(-65535); }
	def m984():void { var l:Float = (16777216)+(65536); }
	def m985():void { var l:Float = (16777216)+(-65536); }
	def m986():void { var l:Float = (16777216)+(16777216); }
	def m987():void { var l:Float = (16777216)+(-16777216); }
	def m988():void { var l:Float = (16777216)+(16777217); }
	def m989():void { var l:Float = (16777216)+(-16777217); }
	def m990():void { var l:Float = (16777216)+(2147483647); }
	def m991():void { var l:Float = (16777216)+(-2147483647); }
	def m992():void { var l:Float = (-16777216)+(w0); }
	def m993():void { var l:Float = (-16777216)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777216)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m994():void { var l:Float = (-16777216)+(w2); }
	def m995():void { var l:Float = (-16777216)+(w3); }
	def m996():void { var l:Float = (-16777216)+(w4); }
	def m997():void { var l:Float = (-16777216)+(w5); }
	def m998():void { var l:Float = (-16777216)+(0); }
	def m999():void { var l:Float = (-16777216)+(-0); }
	def m1000():void { var l:Float = (-16777216)+(1); }
	def m1001():void { var l:Float = (-16777216)+(-1); }
	def m1002():void { var l:Float = (-16777216)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777216)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m1003():void { var l:Float = (-16777216)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777216)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m1004():void { var l:Float = (-16777216)+(127); }
	def m1005():void { var l:Float = (-16777216)+(-127); }
	def m1006():void { var l:Float = (-16777216)+(128); }
	def m1007():void { var l:Float = (-16777216)+(-128); }
	def m1008():void { var l:Float = (-16777216)+(255); }
	def m1009():void { var l:Float = (-16777216)+(-255); }
	def m1010():void { var l:Float = (-16777216)+(256); }
	def m1011():void { var l:Float = (-16777216)+(-256); }
	def m1012():void { var l:Float = (-16777216)+(32767); }
	def m1013():void { var l:Float = (-16777216)+(-32767); }
	def m1014():void { var l:Float = (-16777216)+(32768); }
	def m1015():void { var l:Float = (-16777216)+(-32768); }
	def m1016():void { var l:Float = (-16777216)+(65535); }
	def m1017():void { var l:Float = (-16777216)+(-65535); }
	def m1018():void { var l:Float = (-16777216)+(65536); }
	def m1019():void { var l:Float = (-16777216)+(-65536); }
	def m1020():void { var l:Float = (-16777216)+(16777216); }
	def m1021():void { var l:Float = (-16777216)+(-16777216); }
	def m1022():void { var l:Float = (-16777216)+(16777217); }
	def m1023():void { var l:Float = (-16777216)+(-16777217); }
	def m1024():void { var l:Float = (-16777216)+(2147483647); }
	def m1025():void { var l:Float = (-16777216)+(-2147483647); }
	def m1026():void { var l:Float = (16777217)+(w0); }
	def m1027():void { var l:Float = (16777217)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777217)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m1028():void { var l:Float = (16777217)+(w2); }
	def m1029():void { var l:Float = (16777217)+(w3); }
	def m1030():void { var l:Float = (16777217)+(w4); }
	def m1031():void { var l:Float = (16777217)+(w5); }
	def m1032():void { var l:Float = (16777217)+(0); }
	def m1033():void { var l:Float = (16777217)+(-0); }
	def m1034():void { var l:Float = (16777217)+(1); }
	def m1035():void { var l:Float = (16777217)+(-1); }
	def m1036():void { var l:Float = (16777217)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777217)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m1037():void { var l:Float = (16777217)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777217)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m1038():void { var l:Float = (16777217)+(127); }
	def m1039():void { var l:Float = (16777217)+(-127); }
	def m1040():void { var l:Float = (16777217)+(128); }
	def m1041():void { var l:Float = (16777217)+(-128); }
	def m1042():void { var l:Float = (16777217)+(255); }
	def m1043():void { var l:Float = (16777217)+(-255); }
	def m1044():void { var l:Float = (16777217)+(256); }
	def m1045():void { var l:Float = (16777217)+(-256); }
	def m1046():void { var l:Float = (16777217)+(32767); }
	def m1047():void { var l:Float = (16777217)+(-32767); }
	def m1048():void { var l:Float = (16777217)+(32768); }
	def m1049():void { var l:Float = (16777217)+(-32768); }
	def m1050():void { var l:Float = (16777217)+(65535); }
	def m1051():void { var l:Float = (16777217)+(-65535); }
	def m1052():void { var l:Float = (16777217)+(65536); }
	def m1053():void { var l:Float = (16777217)+(-65536); }
	def m1054():void { var l:Float = (16777217)+(16777216); }
	def m1055():void { var l:Float = (16777217)+(-16777216); }
	def m1056():void { var l:Float = (16777217)+(16777217); }
	def m1057():void { var l:Float = (16777217)+(-16777217); }
	def m1058():void { var l:Float = (16777217)+(2147483647); }
	def m1059():void { var l:Float = (16777217)+(-2147483647); }
	def m1060():void { var l:Float = (-16777217)+(w0); }
	def m1061():void { var l:Float = (-16777217)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777217)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m1062():void { var l:Float = (-16777217)+(w2); }
	def m1063():void { var l:Float = (-16777217)+(w3); }
	def m1064():void { var l:Float = (-16777217)+(w4); }
	def m1065():void { var l:Float = (-16777217)+(w5); }
	def m1066():void { var l:Float = (-16777217)+(0); }
	def m1067():void { var l:Float = (-16777217)+(-0); }
	def m1068():void { var l:Float = (-16777217)+(1); }
	def m1069():void { var l:Float = (-16777217)+(-1); }
	def m1070():void { var l:Float = (-16777217)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777217)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m1071():void { var l:Float = (-16777217)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777217)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m1072():void { var l:Float = (-16777217)+(127); }
	def m1073():void { var l:Float = (-16777217)+(-127); }
	def m1074():void { var l:Float = (-16777217)+(128); }
	def m1075():void { var l:Float = (-16777217)+(-128); }
	def m1076():void { var l:Float = (-16777217)+(255); }
	def m1077():void { var l:Float = (-16777217)+(-255); }
	def m1078():void { var l:Float = (-16777217)+(256); }
	def m1079():void { var l:Float = (-16777217)+(-256); }
	def m1080():void { var l:Float = (-16777217)+(32767); }
	def m1081():void { var l:Float = (-16777217)+(-32767); }
	def m1082():void { var l:Float = (-16777217)+(32768); }
	def m1083():void { var l:Float = (-16777217)+(-32768); }
	def m1084():void { var l:Float = (-16777217)+(65535); }
	def m1085():void { var l:Float = (-16777217)+(-65535); }
	def m1086():void { var l:Float = (-16777217)+(65536); }
	def m1087():void { var l:Float = (-16777217)+(-65536); }
	def m1088():void { var l:Float = (-16777217)+(16777216); }
	def m1089():void { var l:Float = (-16777217)+(-16777216); }
	def m1090():void { var l:Float = (-16777217)+(16777217); }
	def m1091():void { var l:Float = (-16777217)+(-16777217); }
	def m1092():void { var l:Float = (-16777217)+(2147483647); }
	def m1093():void { var l:Float = (-16777217)+(-2147483647); }
	def m1094():void { var l:Float = (2147483647)+(w0); }
	def m1095():void { var l:Float = (2147483647)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((2147483647)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m1096():void { var l:Float = (2147483647)+(w2); }
	def m1097():void { var l:Float = (2147483647)+(w3); }
	def m1098():void { var l:Float = (2147483647)+(w4); }
	def m1099():void { var l:Float = (2147483647)+(w5); }
	def m1100():void { var l:Float = (2147483647)+(0); }
	def m1101():void { var l:Float = (2147483647)+(-0); }
	def m1102():void { var l:Float = (2147483647)+(1); }
	def m1103():void { var l:Float = (2147483647)+(-1); }
	def m1104():void { var l:Float = (2147483647)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((2147483647)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m1105():void { var l:Float = (2147483647)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((2147483647)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m1106():void { var l:Float = (2147483647)+(127); }
	def m1107():void { var l:Float = (2147483647)+(-127); }
	def m1108():void { var l:Float = (2147483647)+(128); }
	def m1109():void { var l:Float = (2147483647)+(-128); }
	def m1110():void { var l:Float = (2147483647)+(255); }
	def m1111():void { var l:Float = (2147483647)+(-255); }
	def m1112():void { var l:Float = (2147483647)+(256); }
	def m1113():void { var l:Float = (2147483647)+(-256); }
	def m1114():void { var l:Float = (2147483647)+(32767); }
	def m1115():void { var l:Float = (2147483647)+(-32767); }
	def m1116():void { var l:Float = (2147483647)+(32768); }
	def m1117():void { var l:Float = (2147483647)+(-32768); }
	def m1118():void { var l:Float = (2147483647)+(65535); }
	def m1119():void { var l:Float = (2147483647)+(-65535); }
	def m1120():void { var l:Float = (2147483647)+(65536); }
	def m1121():void { var l:Float = (2147483647)+(-65536); }
	def m1122():void { var l:Float = (2147483647)+(16777216); }
	def m1123():void { var l:Float = (2147483647)+(-16777216); }
	def m1124():void { var l:Float = (2147483647)+(16777217); }
	def m1125():void { var l:Float = (2147483647)+(-16777217); }
	def m1126():void { var l:Float = (2147483647)+(2147483647); }
	def m1127():void { var l:Float = (2147483647)+(-2147483647); }
	def m1128():void { var l:Float = (-2147483647)+(w0); }
	def m1129():void { var l:Float = (-2147483647)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-2147483647)) + (SignedTests.this.w1)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m1130():void { var l:Float = (-2147483647)+(w2); }
	def m1131():void { var l:Float = (-2147483647)+(w3); }
	def m1132():void { var l:Float = (-2147483647)+(w4); }
	def m1133():void { var l:Float = (-2147483647)+(w5); }
	def m1134():void { var l:Float = (-2147483647)+(0); }
	def m1135():void { var l:Float = (-2147483647)+(-0); }
	def m1136():void { var l:Float = (-2147483647)+(1); }
	def m1137():void { var l:Float = (-2147483647)+(-1); }
	def m1138():void { var l:Float = (-2147483647)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-2147483647)) + (2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m1139():void { var l:Float = (-2147483647)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-2147483647)) + (-2.2)		 Expected type: x10.lang.Float		 Found type: x10.lang.Double)
	def m1140():void { var l:Float = (-2147483647)+(127); }
	def m1141():void { var l:Float = (-2147483647)+(-127); }
	def m1142():void { var l:Float = (-2147483647)+(128); }
	def m1143():void { var l:Float = (-2147483647)+(-128); }
	def m1144():void { var l:Float = (-2147483647)+(255); }
	def m1145():void { var l:Float = (-2147483647)+(-255); }
	def m1146():void { var l:Float = (-2147483647)+(256); }
	def m1147():void { var l:Float = (-2147483647)+(-256); }
	def m1148():void { var l:Float = (-2147483647)+(32767); }
	def m1149():void { var l:Float = (-2147483647)+(-32767); }
	def m1150():void { var l:Float = (-2147483647)+(32768); }
	def m1151():void { var l:Float = (-2147483647)+(-32768); }
	def m1152():void { var l:Float = (-2147483647)+(65535); }
	def m1153():void { var l:Float = (-2147483647)+(-65535); }
	def m1154():void { var l:Float = (-2147483647)+(65536); }
	def m1155():void { var l:Float = (-2147483647)+(-65536); }
	def m1156():void { var l:Float = (-2147483647)+(16777216); }
	def m1157():void { var l:Float = (-2147483647)+(-16777216); }
	def m1158():void { var l:Float = (-2147483647)+(16777217); }
	def m1159():void { var l:Float = (-2147483647)+(-16777217); }
	def m1160():void { var l:Float = (-2147483647)+(2147483647); }
	def m1161():void { var l:Float = (-2147483647)+(-2147483647); }
	def m1162():void { var l:Double = (w0)+(w0); }
	def m1163():void { var l:Double = (w0)+(w1); }
	def m1164():void { var l:Double = (w0)+(w2); }
	def m1165():void { var l:Double = (w0)+(w3); }
	def m1166():void { var l:Double = (w0)+(w4); }
	def m1167():void { var l:Double = (w0)+(w5); }
	def m1168():void { var l:Double = (w0)+(0); }
	def m1169():void { var l:Double = (w0)+(-0); }
	def m1170():void { var l:Double = (w0)+(1); }
	def m1171():void { var l:Double = (w0)+(-1); }
	def m1172():void { var l:Double = (w0)+(2.2); }
	def m1173():void { var l:Double = (w0)+(-2.2); }
	def m1174():void { var l:Double = (w0)+(127); }
	def m1175():void { var l:Double = (w0)+(-127); }
	def m1176():void { var l:Double = (w0)+(128); }
	def m1177():void { var l:Double = (w0)+(-128); }
	def m1178():void { var l:Double = (w0)+(255); }
	def m1179():void { var l:Double = (w0)+(-255); }
	def m1180():void { var l:Double = (w0)+(256); }
	def m1181():void { var l:Double = (w0)+(-256); }
	def m1182():void { var l:Double = (w0)+(32767); }
	def m1183():void { var l:Double = (w0)+(-32767); }
	def m1184():void { var l:Double = (w0)+(32768); }
	def m1185():void { var l:Double = (w0)+(-32768); }
	def m1186():void { var l:Double = (w0)+(65535); }
	def m1187():void { var l:Double = (w0)+(-65535); }
	def m1188():void { var l:Double = (w0)+(65536); }
	def m1189():void { var l:Double = (w0)+(-65536); }
	def m1190():void { var l:Double = (w0)+(16777216); }
	def m1191():void { var l:Double = (w0)+(-16777216); }
	def m1192():void { var l:Double = (w0)+(16777217); }
	def m1193():void { var l:Double = (w0)+(-16777217); }
	def m1194():void { var l:Double = (w0)+(2147483647); }
	def m1195():void { var l:Double = (w0)+(-2147483647); }
	def m1196():void { var l:Double = (w1)+(w0); }
	def m1197():void { var l:Double = (w1)+(w1); }
	def m1198():void { var l:Double = (w1)+(w2); }
	def m1199():void { var l:Double = (w1)+(w3); }
	def m1200():void { var l:Double = (w1)+(w4); }
	def m1201():void { var l:Double = (w1)+(w5); }
	def m1202():void { var l:Double = (w1)+(0); }
	def m1203():void { var l:Double = (w1)+(-0); }
	def m1204():void { var l:Double = (w1)+(1); }
	def m1205():void { var l:Double = (w1)+(-1); }
	def m1206():void { var l:Double = (w1)+(2.2); }
	def m1207():void { var l:Double = (w1)+(-2.2); }
	def m1208():void { var l:Double = (w1)+(127); }
	def m1209():void { var l:Double = (w1)+(-127); }
	def m1210():void { var l:Double = (w1)+(128); }
	def m1211():void { var l:Double = (w1)+(-128); }
	def m1212():void { var l:Double = (w1)+(255); }
	def m1213():void { var l:Double = (w1)+(-255); }
	def m1214():void { var l:Double = (w1)+(256); }
	def m1215():void { var l:Double = (w1)+(-256); }
	def m1216():void { var l:Double = (w1)+(32767); }
	def m1217():void { var l:Double = (w1)+(-32767); }
	def m1218():void { var l:Double = (w1)+(32768); }
	def m1219():void { var l:Double = (w1)+(-32768); }
	def m1220():void { var l:Double = (w1)+(65535); }
	def m1221():void { var l:Double = (w1)+(-65535); }
	def m1222():void { var l:Double = (w1)+(65536); }
	def m1223():void { var l:Double = (w1)+(-65536); }
	def m1224():void { var l:Double = (w1)+(16777216); }
	def m1225():void { var l:Double = (w1)+(-16777216); }
	def m1226():void { var l:Double = (w1)+(16777217); }
	def m1227():void { var l:Double = (w1)+(-16777217); }
	def m1228():void { var l:Double = (w1)+(2147483647); }
	def m1229():void { var l:Double = (w1)+(-2147483647); }
	def m1230():void { var l:Double = (w2)+(w0); }
	def m1231():void { var l:Double = (w2)+(w1); }
	def m1232():void { var l:Double = (w2)+(w2); }
	def m1233():void { var l:Double = (w2)+(w3); }
	def m1234():void { var l:Double = (w2)+(w4); }
	def m1235():void { var l:Double = (w2)+(w5); }
	def m1236():void { var l:Double = (w2)+(0); }
	def m1237():void { var l:Double = (w2)+(-0); }
	def m1238():void { var l:Double = (w2)+(1); }
	def m1239():void { var l:Double = (w2)+(-1); }
	def m1240():void { var l:Double = (w2)+(2.2); }
	def m1241():void { var l:Double = (w2)+(-2.2); }
	def m1242():void { var l:Double = (w2)+(127); }
	def m1243():void { var l:Double = (w2)+(-127); }
	def m1244():void { var l:Double = (w2)+(128); }
	def m1245():void { var l:Double = (w2)+(-128); }
	def m1246():void { var l:Double = (w2)+(255); }
	def m1247():void { var l:Double = (w2)+(-255); }
	def m1248():void { var l:Double = (w2)+(256); }
	def m1249():void { var l:Double = (w2)+(-256); }
	def m1250():void { var l:Double = (w2)+(32767); }
	def m1251():void { var l:Double = (w2)+(-32767); }
	def m1252():void { var l:Double = (w2)+(32768); }
	def m1253():void { var l:Double = (w2)+(-32768); }
	def m1254():void { var l:Double = (w2)+(65535); }
	def m1255():void { var l:Double = (w2)+(-65535); }
	def m1256():void { var l:Double = (w2)+(65536); }
	def m1257():void { var l:Double = (w2)+(-65536); }
	def m1258():void { var l:Double = (w2)+(16777216); }
	def m1259():void { var l:Double = (w2)+(-16777216); }
	def m1260():void { var l:Double = (w2)+(16777217); }
	def m1261():void { var l:Double = (w2)+(-16777217); }
	def m1262():void { var l:Double = (w2)+(2147483647); }
	def m1263():void { var l:Double = (w2)+(-2147483647); }
	def m1264():void { var l:Double = (w3)+(w0); }
	def m1265():void { var l:Double = (w3)+(w1); }
	def m1266():void { var l:Double = (w3)+(w2); }
	def m1267():void { var l:Double = (w3)+(w3); }
	def m1268():void { var l:Double = (w3)+(w4); }
	def m1269():void { var l:Double = (w3)+(w5); }
	def m1270():void { var l:Double = (w3)+(0); }
	def m1271():void { var l:Double = (w3)+(-0); }
	def m1272():void { var l:Double = (w3)+(1); }
	def m1273():void { var l:Double = (w3)+(-1); }
	def m1274():void { var l:Double = (w3)+(2.2); }
	def m1275():void { var l:Double = (w3)+(-2.2); }
	def m1276():void { var l:Double = (w3)+(127); }
	def m1277():void { var l:Double = (w3)+(-127); }
	def m1278():void { var l:Double = (w3)+(128); }
	def m1279():void { var l:Double = (w3)+(-128); }
	def m1280():void { var l:Double = (w3)+(255); }
	def m1281():void { var l:Double = (w3)+(-255); }
	def m1282():void { var l:Double = (w3)+(256); }
	def m1283():void { var l:Double = (w3)+(-256); }
	def m1284():void { var l:Double = (w3)+(32767); }
	def m1285():void { var l:Double = (w3)+(-32767); }
	def m1286():void { var l:Double = (w3)+(32768); }
	def m1287():void { var l:Double = (w3)+(-32768); }
	def m1288():void { var l:Double = (w3)+(65535); }
	def m1289():void { var l:Double = (w3)+(-65535); }
	def m1290():void { var l:Double = (w3)+(65536); }
	def m1291():void { var l:Double = (w3)+(-65536); }
	def m1292():void { var l:Double = (w3)+(16777216); }
	def m1293():void { var l:Double = (w3)+(-16777216); }
	def m1294():void { var l:Double = (w3)+(16777217); }
	def m1295():void { var l:Double = (w3)+(-16777217); }
	def m1296():void { var l:Double = (w3)+(2147483647); }
	def m1297():void { var l:Double = (w3)+(-2147483647); }
	def m1298():void { var l:Double = (w4)+(w0); }
	def m1299():void { var l:Double = (w4)+(w1); }
	def m1300():void { var l:Double = (w4)+(w2); }
	def m1301():void { var l:Double = (w4)+(w3); }
	def m1302():void { var l:Double = (w4)+(w4); }
	def m1303():void { var l:Double = (w4)+(w5); }
	def m1304():void { var l:Double = (w4)+(0); }
	def m1305():void { var l:Double = (w4)+(-0); }
	def m1306():void { var l:Double = (w4)+(1); }
	def m1307():void { var l:Double = (w4)+(-1); }
	def m1308():void { var l:Double = (w4)+(2.2); }
	def m1309():void { var l:Double = (w4)+(-2.2); }
	def m1310():void { var l:Double = (w4)+(127); }
	def m1311():void { var l:Double = (w4)+(-127); }
	def m1312():void { var l:Double = (w4)+(128); }
	def m1313():void { var l:Double = (w4)+(-128); }
	def m1314():void { var l:Double = (w4)+(255); }
	def m1315():void { var l:Double = (w4)+(-255); }
	def m1316():void { var l:Double = (w4)+(256); }
	def m1317():void { var l:Double = (w4)+(-256); }
	def m1318():void { var l:Double = (w4)+(32767); }
	def m1319():void { var l:Double = (w4)+(-32767); }
	def m1320():void { var l:Double = (w4)+(32768); }
	def m1321():void { var l:Double = (w4)+(-32768); }
	def m1322():void { var l:Double = (w4)+(65535); }
	def m1323():void { var l:Double = (w4)+(-65535); }
	def m1324():void { var l:Double = (w4)+(65536); }
	def m1325():void { var l:Double = (w4)+(-65536); }
	def m1326():void { var l:Double = (w4)+(16777216); }
	def m1327():void { var l:Double = (w4)+(-16777216); }
	def m1328():void { var l:Double = (w4)+(16777217); }
	def m1329():void { var l:Double = (w4)+(-16777217); }
	def m1330():void { var l:Double = (w4)+(2147483647); }
	def m1331():void { var l:Double = (w4)+(-2147483647); }
	def m1332():void { var l:Double = (w5)+(w0); }
	def m1333():void { var l:Double = (w5)+(w1); }
	def m1334():void { var l:Double = (w5)+(w2); }
	def m1335():void { var l:Double = (w5)+(w3); }
	def m1336():void { var l:Double = (w5)+(w4); }
	def m1337():void { var l:Double = (w5)+(w5); }
	def m1338():void { var l:Double = (w5)+(0); }
	def m1339():void { var l:Double = (w5)+(-0); }
	def m1340():void { var l:Double = (w5)+(1); }
	def m1341():void { var l:Double = (w5)+(-1); }
	def m1342():void { var l:Double = (w5)+(2.2); }
	def m1343():void { var l:Double = (w5)+(-2.2); }
	def m1344():void { var l:Double = (w5)+(127); }
	def m1345():void { var l:Double = (w5)+(-127); }
	def m1346():void { var l:Double = (w5)+(128); }
	def m1347():void { var l:Double = (w5)+(-128); }
	def m1348():void { var l:Double = (w5)+(255); }
	def m1349():void { var l:Double = (w5)+(-255); }
	def m1350():void { var l:Double = (w5)+(256); }
	def m1351():void { var l:Double = (w5)+(-256); }
	def m1352():void { var l:Double = (w5)+(32767); }
	def m1353():void { var l:Double = (w5)+(-32767); }
	def m1354():void { var l:Double = (w5)+(32768); }
	def m1355():void { var l:Double = (w5)+(-32768); }
	def m1356():void { var l:Double = (w5)+(65535); }
	def m1357():void { var l:Double = (w5)+(-65535); }
	def m1358():void { var l:Double = (w5)+(65536); }
	def m1359():void { var l:Double = (w5)+(-65536); }
	def m1360():void { var l:Double = (w5)+(16777216); }
	def m1361():void { var l:Double = (w5)+(-16777216); }
	def m1362():void { var l:Double = (w5)+(16777217); }
	def m1363():void { var l:Double = (w5)+(-16777217); }
	def m1364():void { var l:Double = (w5)+(2147483647); }
	def m1365():void { var l:Double = (w5)+(-2147483647); }
	def m1366():void { var l:Double = (0)+(w0); }
	def m1367():void { var l:Double = (0)+(w1); }
	def m1368():void { var l:Double = (0)+(w2); }
	def m1369():void { var l:Double = (0)+(w3); }
	def m1370():void { var l:Double = (0)+(w4); }
	def m1371():void { var l:Double = (0)+(w5); }
	def m1372():void { var l:Double = (0)+(0); }
	def m1373():void { var l:Double = (0)+(-0); }
	def m1374():void { var l:Double = (0)+(1); }
	def m1375():void { var l:Double = (0)+(-1); }
	def m1376():void { var l:Double = (0)+(2.2); }
	def m1377():void { var l:Double = (0)+(-2.2); }
	def m1378():void { var l:Double = (0)+(127); }
	def m1379():void { var l:Double = (0)+(-127); }
	def m1380():void { var l:Double = (0)+(128); }
	def m1381():void { var l:Double = (0)+(-128); }
	def m1382():void { var l:Double = (0)+(255); }
	def m1383():void { var l:Double = (0)+(-255); }
	def m1384():void { var l:Double = (0)+(256); }
	def m1385():void { var l:Double = (0)+(-256); }
	def m1386():void { var l:Double = (0)+(32767); }
	def m1387():void { var l:Double = (0)+(-32767); }
	def m1388():void { var l:Double = (0)+(32768); }
	def m1389():void { var l:Double = (0)+(-32768); }
	def m1390():void { var l:Double = (0)+(65535); }
	def m1391():void { var l:Double = (0)+(-65535); }
	def m1392():void { var l:Double = (0)+(65536); }
	def m1393():void { var l:Double = (0)+(-65536); }
	def m1394():void { var l:Double = (0)+(16777216); }
	def m1395():void { var l:Double = (0)+(-16777216); }
	def m1396():void { var l:Double = (0)+(16777217); }
	def m1397():void { var l:Double = (0)+(-16777217); }
	def m1398():void { var l:Double = (0)+(2147483647); }
	def m1399():void { var l:Double = (0)+(-2147483647); }
	def m1400():void { var l:Double = (-0)+(w0); }
	def m1401():void { var l:Double = (-0)+(w1); }
	def m1402():void { var l:Double = (-0)+(w2); }
	def m1403():void { var l:Double = (-0)+(w3); }
	def m1404():void { var l:Double = (-0)+(w4); }
	def m1405():void { var l:Double = (-0)+(w5); }
	def m1406():void { var l:Double = (-0)+(0); }
	def m1407():void { var l:Double = (-0)+(-0); }
	def m1408():void { var l:Double = (-0)+(1); }
	def m1409():void { var l:Double = (-0)+(-1); }
	def m1410():void { var l:Double = (-0)+(2.2); }
	def m1411():void { var l:Double = (-0)+(-2.2); }
	def m1412():void { var l:Double = (-0)+(127); }
	def m1413():void { var l:Double = (-0)+(-127); }
	def m1414():void { var l:Double = (-0)+(128); }
	def m1415():void { var l:Double = (-0)+(-128); }
	def m1416():void { var l:Double = (-0)+(255); }
	def m1417():void { var l:Double = (-0)+(-255); }
	def m1418():void { var l:Double = (-0)+(256); }
	def m1419():void { var l:Double = (-0)+(-256); }
	def m1420():void { var l:Double = (-0)+(32767); }
	def m1421():void { var l:Double = (-0)+(-32767); }
	def m1422():void { var l:Double = (-0)+(32768); }
	def m1423():void { var l:Double = (-0)+(-32768); }
	def m1424():void { var l:Double = (-0)+(65535); }
	def m1425():void { var l:Double = (-0)+(-65535); }
	def m1426():void { var l:Double = (-0)+(65536); }
	def m1427():void { var l:Double = (-0)+(-65536); }
	def m1428():void { var l:Double = (-0)+(16777216); }
	def m1429():void { var l:Double = (-0)+(-16777216); }
	def m1430():void { var l:Double = (-0)+(16777217); }
	def m1431():void { var l:Double = (-0)+(-16777217); }
	def m1432():void { var l:Double = (-0)+(2147483647); }
	def m1433():void { var l:Double = (-0)+(-2147483647); }
	def m1434():void { var l:Double = (1)+(w0); }
	def m1435():void { var l:Double = (1)+(w1); }
	def m1436():void { var l:Double = (1)+(w2); }
	def m1437():void { var l:Double = (1)+(w3); }
	def m1438():void { var l:Double = (1)+(w4); }
	def m1439():void { var l:Double = (1)+(w5); }
	def m1440():void { var l:Double = (1)+(0); }
	def m1441():void { var l:Double = (1)+(-0); }
	def m1442():void { var l:Double = (1)+(1); }
	def m1443():void { var l:Double = (1)+(-1); }
	def m1444():void { var l:Double = (1)+(2.2); }
	def m1445():void { var l:Double = (1)+(-2.2); }
	def m1446():void { var l:Double = (1)+(127); }
	def m1447():void { var l:Double = (1)+(-127); }
	def m1448():void { var l:Double = (1)+(128); }
	def m1449():void { var l:Double = (1)+(-128); }
	def m1450():void { var l:Double = (1)+(255); }
	def m1451():void { var l:Double = (1)+(-255); }
	def m1452():void { var l:Double = (1)+(256); }
	def m1453():void { var l:Double = (1)+(-256); }
	def m1454():void { var l:Double = (1)+(32767); }
	def m1455():void { var l:Double = (1)+(-32767); }
	def m1456():void { var l:Double = (1)+(32768); }
	def m1457():void { var l:Double = (1)+(-32768); }
	def m1458():void { var l:Double = (1)+(65535); }
	def m1459():void { var l:Double = (1)+(-65535); }
	def m1460():void { var l:Double = (1)+(65536); }
	def m1461():void { var l:Double = (1)+(-65536); }
	def m1462():void { var l:Double = (1)+(16777216); }
	def m1463():void { var l:Double = (1)+(-16777216); }
	def m1464():void { var l:Double = (1)+(16777217); }
	def m1465():void { var l:Double = (1)+(-16777217); }
	def m1466():void { var l:Double = (1)+(2147483647); }
	def m1467():void { var l:Double = (1)+(-2147483647); }
	def m1468():void { var l:Double = (-1)+(w0); }
	def m1469():void { var l:Double = (-1)+(w1); }
	def m1470():void { var l:Double = (-1)+(w2); }
	def m1471():void { var l:Double = (-1)+(w3); }
	def m1472():void { var l:Double = (-1)+(w4); }
	def m1473():void { var l:Double = (-1)+(w5); }
	def m1474():void { var l:Double = (-1)+(0); }
	def m1475():void { var l:Double = (-1)+(-0); }
	def m1476():void { var l:Double = (-1)+(1); }
	def m1477():void { var l:Double = (-1)+(-1); }
	def m1478():void { var l:Double = (-1)+(2.2); }
	def m1479():void { var l:Double = (-1)+(-2.2); }
	def m1480():void { var l:Double = (-1)+(127); }
	def m1481():void { var l:Double = (-1)+(-127); }
	def m1482():void { var l:Double = (-1)+(128); }
	def m1483():void { var l:Double = (-1)+(-128); }
	def m1484():void { var l:Double = (-1)+(255); }
	def m1485():void { var l:Double = (-1)+(-255); }
	def m1486():void { var l:Double = (-1)+(256); }
	def m1487():void { var l:Double = (-1)+(-256); }
	def m1488():void { var l:Double = (-1)+(32767); }
	def m1489():void { var l:Double = (-1)+(-32767); }
	def m1490():void { var l:Double = (-1)+(32768); }
	def m1491():void { var l:Double = (-1)+(-32768); }
	def m1492():void { var l:Double = (-1)+(65535); }
	def m1493():void { var l:Double = (-1)+(-65535); }
	def m1494():void { var l:Double = (-1)+(65536); }
	def m1495():void { var l:Double = (-1)+(-65536); }
	def m1496():void { var l:Double = (-1)+(16777216); }
	def m1497():void { var l:Double = (-1)+(-16777216); }
	def m1498():void { var l:Double = (-1)+(16777217); }
	def m1499():void { var l:Double = (-1)+(-16777217); }
	def m1500():void { var l:Double = (-1)+(2147483647); }
	def m1501():void { var l:Double = (-1)+(-2147483647); }
	def m1502():void { var l:Double = (2.2)+(w0); }
	def m1503():void { var l:Double = (2.2)+(w1); }
	def m1504():void { var l:Double = (2.2)+(w2); }
	def m1505():void { var l:Double = (2.2)+(w3); }
	def m1506():void { var l:Double = (2.2)+(w4); }
	def m1507():void { var l:Double = (2.2)+(w5); }
	def m1508():void { var l:Double = (2.2)+(0); }
	def m1509():void { var l:Double = (2.2)+(-0); }
	def m1510():void { var l:Double = (2.2)+(1); }
	def m1511():void { var l:Double = (2.2)+(-1); }
	def m1512():void { var l:Double = (2.2)+(2.2); }
	def m1513():void { var l:Double = (2.2)+(-2.2); }
	def m1514():void { var l:Double = (2.2)+(127); }
	def m1515():void { var l:Double = (2.2)+(-127); }
	def m1516():void { var l:Double = (2.2)+(128); }
	def m1517():void { var l:Double = (2.2)+(-128); }
	def m1518():void { var l:Double = (2.2)+(255); }
	def m1519():void { var l:Double = (2.2)+(-255); }
	def m1520():void { var l:Double = (2.2)+(256); }
	def m1521():void { var l:Double = (2.2)+(-256); }
	def m1522():void { var l:Double = (2.2)+(32767); }
	def m1523():void { var l:Double = (2.2)+(-32767); }
	def m1524():void { var l:Double = (2.2)+(32768); }
	def m1525():void { var l:Double = (2.2)+(-32768); }
	def m1526():void { var l:Double = (2.2)+(65535); }
	def m1527():void { var l:Double = (2.2)+(-65535); }
	def m1528():void { var l:Double = (2.2)+(65536); }
	def m1529():void { var l:Double = (2.2)+(-65536); }
	def m1530():void { var l:Double = (2.2)+(16777216); }
	def m1531():void { var l:Double = (2.2)+(-16777216); }
	def m1532():void { var l:Double = (2.2)+(16777217); }
	def m1533():void { var l:Double = (2.2)+(-16777217); }
	def m1534():void { var l:Double = (2.2)+(2147483647); }
	def m1535():void { var l:Double = (2.2)+(-2147483647); }
	def m1536():void { var l:Double = (-2.2)+(w0); }
	def m1537():void { var l:Double = (-2.2)+(w1); }
	def m1538():void { var l:Double = (-2.2)+(w2); }
	def m1539():void { var l:Double = (-2.2)+(w3); }
	def m1540():void { var l:Double = (-2.2)+(w4); }
	def m1541():void { var l:Double = (-2.2)+(w5); }
	def m1542():void { var l:Double = (-2.2)+(0); }
	def m1543():void { var l:Double = (-2.2)+(-0); }
	def m1544():void { var l:Double = (-2.2)+(1); }
	def m1545():void { var l:Double = (-2.2)+(-1); }
	def m1546():void { var l:Double = (-2.2)+(2.2); }
	def m1547():void { var l:Double = (-2.2)+(-2.2); }
	def m1548():void { var l:Double = (-2.2)+(127); }
	def m1549():void { var l:Double = (-2.2)+(-127); }
	def m1550():void { var l:Double = (-2.2)+(128); }
	def m1551():void { var l:Double = (-2.2)+(-128); }
	def m1552():void { var l:Double = (-2.2)+(255); }
	def m1553():void { var l:Double = (-2.2)+(-255); }
	def m1554():void { var l:Double = (-2.2)+(256); }
	def m1555():void { var l:Double = (-2.2)+(-256); }
	def m1556():void { var l:Double = (-2.2)+(32767); }
	def m1557():void { var l:Double = (-2.2)+(-32767); }
	def m1558():void { var l:Double = (-2.2)+(32768); }
	def m1559():void { var l:Double = (-2.2)+(-32768); }
	def m1560():void { var l:Double = (-2.2)+(65535); }
	def m1561():void { var l:Double = (-2.2)+(-65535); }
	def m1562():void { var l:Double = (-2.2)+(65536); }
	def m1563():void { var l:Double = (-2.2)+(-65536); }
	def m1564():void { var l:Double = (-2.2)+(16777216); }
	def m1565():void { var l:Double = (-2.2)+(-16777216); }
	def m1566():void { var l:Double = (-2.2)+(16777217); }
	def m1567():void { var l:Double = (-2.2)+(-16777217); }
	def m1568():void { var l:Double = (-2.2)+(2147483647); }
	def m1569():void { var l:Double = (-2.2)+(-2147483647); }
	def m1570():void { var l:Double = (127)+(w0); }
	def m1571():void { var l:Double = (127)+(w1); }
	def m1572():void { var l:Double = (127)+(w2); }
	def m1573():void { var l:Double = (127)+(w3); }
	def m1574():void { var l:Double = (127)+(w4); }
	def m1575():void { var l:Double = (127)+(w5); }
	def m1576():void { var l:Double = (127)+(0); }
	def m1577():void { var l:Double = (127)+(-0); }
	def m1578():void { var l:Double = (127)+(1); }
	def m1579():void { var l:Double = (127)+(-1); }
	def m1580():void { var l:Double = (127)+(2.2); }
	def m1581():void { var l:Double = (127)+(-2.2); }
	def m1582():void { var l:Double = (127)+(127); }
	def m1583():void { var l:Double = (127)+(-127); }
	def m1584():void { var l:Double = (127)+(128); }
	def m1585():void { var l:Double = (127)+(-128); }
	def m1586():void { var l:Double = (127)+(255); }
	def m1587():void { var l:Double = (127)+(-255); }
	def m1588():void { var l:Double = (127)+(256); }
	def m1589():void { var l:Double = (127)+(-256); }
	def m1590():void { var l:Double = (127)+(32767); }
	def m1591():void { var l:Double = (127)+(-32767); }
	def m1592():void { var l:Double = (127)+(32768); }
	def m1593():void { var l:Double = (127)+(-32768); }
	def m1594():void { var l:Double = (127)+(65535); }
	def m1595():void { var l:Double = (127)+(-65535); }
	def m1596():void { var l:Double = (127)+(65536); }
	def m1597():void { var l:Double = (127)+(-65536); }
	def m1598():void { var l:Double = (127)+(16777216); }
	def m1599():void { var l:Double = (127)+(-16777216); }
	def m1600():void { var l:Double = (127)+(16777217); }
	def m1601():void { var l:Double = (127)+(-16777217); }
	def m1602():void { var l:Double = (127)+(2147483647); }
	def m1603():void { var l:Double = (127)+(-2147483647); }
	def m1604():void { var l:Double = (-127)+(w0); }
	def m1605():void { var l:Double = (-127)+(w1); }
	def m1606():void { var l:Double = (-127)+(w2); }
	def m1607():void { var l:Double = (-127)+(w3); }
	def m1608():void { var l:Double = (-127)+(w4); }
	def m1609():void { var l:Double = (-127)+(w5); }
	def m1610():void { var l:Double = (-127)+(0); }
	def m1611():void { var l:Double = (-127)+(-0); }
	def m1612():void { var l:Double = (-127)+(1); }
	def m1613():void { var l:Double = (-127)+(-1); }
	def m1614():void { var l:Double = (-127)+(2.2); }
	def m1615():void { var l:Double = (-127)+(-2.2); }
	def m1616():void { var l:Double = (-127)+(127); }
	def m1617():void { var l:Double = (-127)+(-127); }
	def m1618():void { var l:Double = (-127)+(128); }
	def m1619():void { var l:Double = (-127)+(-128); }
	def m1620():void { var l:Double = (-127)+(255); }
	def m1621():void { var l:Double = (-127)+(-255); }
	def m1622():void { var l:Double = (-127)+(256); }
	def m1623():void { var l:Double = (-127)+(-256); }
	def m1624():void { var l:Double = (-127)+(32767); }
	def m1625():void { var l:Double = (-127)+(-32767); }
	def m1626():void { var l:Double = (-127)+(32768); }
	def m1627():void { var l:Double = (-127)+(-32768); }
	def m1628():void { var l:Double = (-127)+(65535); }
	def m1629():void { var l:Double = (-127)+(-65535); }
	def m1630():void { var l:Double = (-127)+(65536); }
	def m1631():void { var l:Double = (-127)+(-65536); }
	def m1632():void { var l:Double = (-127)+(16777216); }
	def m1633():void { var l:Double = (-127)+(-16777216); }
	def m1634():void { var l:Double = (-127)+(16777217); }
	def m1635():void { var l:Double = (-127)+(-16777217); }
	def m1636():void { var l:Double = (-127)+(2147483647); }
	def m1637():void { var l:Double = (-127)+(-2147483647); }
	def m1638():void { var l:Double = (128)+(w0); }
	def m1639():void { var l:Double = (128)+(w1); }
	def m1640():void { var l:Double = (128)+(w2); }
	def m1641():void { var l:Double = (128)+(w3); }
	def m1642():void { var l:Double = (128)+(w4); }
	def m1643():void { var l:Double = (128)+(w5); }
	def m1644():void { var l:Double = (128)+(0); }
	def m1645():void { var l:Double = (128)+(-0); }
	def m1646():void { var l:Double = (128)+(1); }
	def m1647():void { var l:Double = (128)+(-1); }
	def m1648():void { var l:Double = (128)+(2.2); }
	def m1649():void { var l:Double = (128)+(-2.2); }
	def m1650():void { var l:Double = (128)+(127); }
	def m1651():void { var l:Double = (128)+(-127); }
	def m1652():void { var l:Double = (128)+(128); }
	def m1653():void { var l:Double = (128)+(-128); }
	def m1654():void { var l:Double = (128)+(255); }
	def m1655():void { var l:Double = (128)+(-255); }
	def m1656():void { var l:Double = (128)+(256); }
	def m1657():void { var l:Double = (128)+(-256); }
	def m1658():void { var l:Double = (128)+(32767); }
	def m1659():void { var l:Double = (128)+(-32767); }
	def m1660():void { var l:Double = (128)+(32768); }
	def m1661():void { var l:Double = (128)+(-32768); }
	def m1662():void { var l:Double = (128)+(65535); }
	def m1663():void { var l:Double = (128)+(-65535); }
	def m1664():void { var l:Double = (128)+(65536); }
	def m1665():void { var l:Double = (128)+(-65536); }
	def m1666():void { var l:Double = (128)+(16777216); }
	def m1667():void { var l:Double = (128)+(-16777216); }
	def m1668():void { var l:Double = (128)+(16777217); }
	def m1669():void { var l:Double = (128)+(-16777217); }
	def m1670():void { var l:Double = (128)+(2147483647); }
	def m1671():void { var l:Double = (128)+(-2147483647); }
	def m1672():void { var l:Double = (-128)+(w0); }
	def m1673():void { var l:Double = (-128)+(w1); }
	def m1674():void { var l:Double = (-128)+(w2); }
	def m1675():void { var l:Double = (-128)+(w3); }
	def m1676():void { var l:Double = (-128)+(w4); }
	def m1677():void { var l:Double = (-128)+(w5); }
	def m1678():void { var l:Double = (-128)+(0); }
	def m1679():void { var l:Double = (-128)+(-0); }
	def m1680():void { var l:Double = (-128)+(1); }
	def m1681():void { var l:Double = (-128)+(-1); }
	def m1682():void { var l:Double = (-128)+(2.2); }
	def m1683():void { var l:Double = (-128)+(-2.2); }
	def m1684():void { var l:Double = (-128)+(127); }
	def m1685():void { var l:Double = (-128)+(-127); }
	def m1686():void { var l:Double = (-128)+(128); }
	def m1687():void { var l:Double = (-128)+(-128); }
	def m1688():void { var l:Double = (-128)+(255); }
	def m1689():void { var l:Double = (-128)+(-255); }
	def m1690():void { var l:Double = (-128)+(256); }
	def m1691():void { var l:Double = (-128)+(-256); }
	def m1692():void { var l:Double = (-128)+(32767); }
	def m1693():void { var l:Double = (-128)+(-32767); }
	def m1694():void { var l:Double = (-128)+(32768); }
	def m1695():void { var l:Double = (-128)+(-32768); }
	def m1696():void { var l:Double = (-128)+(65535); }
	def m1697():void { var l:Double = (-128)+(-65535); }
	def m1698():void { var l:Double = (-128)+(65536); }
	def m1699():void { var l:Double = (-128)+(-65536); }
	def m1700():void { var l:Double = (-128)+(16777216); }
	def m1701():void { var l:Double = (-128)+(-16777216); }
	def m1702():void { var l:Double = (-128)+(16777217); }
	def m1703():void { var l:Double = (-128)+(-16777217); }
	def m1704():void { var l:Double = (-128)+(2147483647); }
	def m1705():void { var l:Double = (-128)+(-2147483647); }
	def m1706():void { var l:Double = (255)+(w0); }
	def m1707():void { var l:Double = (255)+(w1); }
	def m1708():void { var l:Double = (255)+(w2); }
	def m1709():void { var l:Double = (255)+(w3); }
	def m1710():void { var l:Double = (255)+(w4); }
	def m1711():void { var l:Double = (255)+(w5); }
	def m1712():void { var l:Double = (255)+(0); }
	def m1713():void { var l:Double = (255)+(-0); }
	def m1714():void { var l:Double = (255)+(1); }
	def m1715():void { var l:Double = (255)+(-1); }
	def m1716():void { var l:Double = (255)+(2.2); }
	def m1717():void { var l:Double = (255)+(-2.2); }
	def m1718():void { var l:Double = (255)+(127); }
	def m1719():void { var l:Double = (255)+(-127); }
	def m1720():void { var l:Double = (255)+(128); }
	def m1721():void { var l:Double = (255)+(-128); }
	def m1722():void { var l:Double = (255)+(255); }
	def m1723():void { var l:Double = (255)+(-255); }
	def m1724():void { var l:Double = (255)+(256); }
	def m1725():void { var l:Double = (255)+(-256); }
	def m1726():void { var l:Double = (255)+(32767); }
	def m1727():void { var l:Double = (255)+(-32767); }
	def m1728():void { var l:Double = (255)+(32768); }
	def m1729():void { var l:Double = (255)+(-32768); }
	def m1730():void { var l:Double = (255)+(65535); }
	def m1731():void { var l:Double = (255)+(-65535); }
	def m1732():void { var l:Double = (255)+(65536); }
	def m1733():void { var l:Double = (255)+(-65536); }
	def m1734():void { var l:Double = (255)+(16777216); }
	def m1735():void { var l:Double = (255)+(-16777216); }
	def m1736():void { var l:Double = (255)+(16777217); }
	def m1737():void { var l:Double = (255)+(-16777217); }
	def m1738():void { var l:Double = (255)+(2147483647); }
	def m1739():void { var l:Double = (255)+(-2147483647); }
	def m1740():void { var l:Double = (-255)+(w0); }
	def m1741():void { var l:Double = (-255)+(w1); }
	def m1742():void { var l:Double = (-255)+(w2); }
	def m1743():void { var l:Double = (-255)+(w3); }
	def m1744():void { var l:Double = (-255)+(w4); }
	def m1745():void { var l:Double = (-255)+(w5); }
	def m1746():void { var l:Double = (-255)+(0); }
	def m1747():void { var l:Double = (-255)+(-0); }
	def m1748():void { var l:Double = (-255)+(1); }
	def m1749():void { var l:Double = (-255)+(-1); }
	def m1750():void { var l:Double = (-255)+(2.2); }
	def m1751():void { var l:Double = (-255)+(-2.2); }
	def m1752():void { var l:Double = (-255)+(127); }
	def m1753():void { var l:Double = (-255)+(-127); }
	def m1754():void { var l:Double = (-255)+(128); }
	def m1755():void { var l:Double = (-255)+(-128); }
	def m1756():void { var l:Double = (-255)+(255); }
	def m1757():void { var l:Double = (-255)+(-255); }
	def m1758():void { var l:Double = (-255)+(256); }
	def m1759():void { var l:Double = (-255)+(-256); }
	def m1760():void { var l:Double = (-255)+(32767); }
	def m1761():void { var l:Double = (-255)+(-32767); }
	def m1762():void { var l:Double = (-255)+(32768); }
	def m1763():void { var l:Double = (-255)+(-32768); }
	def m1764():void { var l:Double = (-255)+(65535); }
	def m1765():void { var l:Double = (-255)+(-65535); }
	def m1766():void { var l:Double = (-255)+(65536); }
	def m1767():void { var l:Double = (-255)+(-65536); }
	def m1768():void { var l:Double = (-255)+(16777216); }
	def m1769():void { var l:Double = (-255)+(-16777216); }
	def m1770():void { var l:Double = (-255)+(16777217); }
	def m1771():void { var l:Double = (-255)+(-16777217); }
	def m1772():void { var l:Double = (-255)+(2147483647); }
	def m1773():void { var l:Double = (-255)+(-2147483647); }
	def m1774():void { var l:Double = (256)+(w0); }
	def m1775():void { var l:Double = (256)+(w1); }
	def m1776():void { var l:Double = (256)+(w2); }
	def m1777():void { var l:Double = (256)+(w3); }
	def m1778():void { var l:Double = (256)+(w4); }
	def m1779():void { var l:Double = (256)+(w5); }
	def m1780():void { var l:Double = (256)+(0); }
	def m1781():void { var l:Double = (256)+(-0); }
	def m1782():void { var l:Double = (256)+(1); }
	def m1783():void { var l:Double = (256)+(-1); }
	def m1784():void { var l:Double = (256)+(2.2); }
	def m1785():void { var l:Double = (256)+(-2.2); }
	def m1786():void { var l:Double = (256)+(127); }
	def m1787():void { var l:Double = (256)+(-127); }
	def m1788():void { var l:Double = (256)+(128); }
	def m1789():void { var l:Double = (256)+(-128); }
	def m1790():void { var l:Double = (256)+(255); }
	def m1791():void { var l:Double = (256)+(-255); }
	def m1792():void { var l:Double = (256)+(256); }
	def m1793():void { var l:Double = (256)+(-256); }
	def m1794():void { var l:Double = (256)+(32767); }
	def m1795():void { var l:Double = (256)+(-32767); }
	def m1796():void { var l:Double = (256)+(32768); }
	def m1797():void { var l:Double = (256)+(-32768); }
	def m1798():void { var l:Double = (256)+(65535); }
	def m1799():void { var l:Double = (256)+(-65535); }
	def m1800():void { var l:Double = (256)+(65536); }
	def m1801():void { var l:Double = (256)+(-65536); }
	def m1802():void { var l:Double = (256)+(16777216); }
	def m1803():void { var l:Double = (256)+(-16777216); }
	def m1804():void { var l:Double = (256)+(16777217); }
	def m1805():void { var l:Double = (256)+(-16777217); }
	def m1806():void { var l:Double = (256)+(2147483647); }
	def m1807():void { var l:Double = (256)+(-2147483647); }
	def m1808():void { var l:Double = (-256)+(w0); }
	def m1809():void { var l:Double = (-256)+(w1); }
	def m1810():void { var l:Double = (-256)+(w2); }
	def m1811():void { var l:Double = (-256)+(w3); }
	def m1812():void { var l:Double = (-256)+(w4); }
	def m1813():void { var l:Double = (-256)+(w5); }
	def m1814():void { var l:Double = (-256)+(0); }
	def m1815():void { var l:Double = (-256)+(-0); }
	def m1816():void { var l:Double = (-256)+(1); }
	def m1817():void { var l:Double = (-256)+(-1); }
	def m1818():void { var l:Double = (-256)+(2.2); }
	def m1819():void { var l:Double = (-256)+(-2.2); }
	def m1820():void { var l:Double = (-256)+(127); }
	def m1821():void { var l:Double = (-256)+(-127); }
	def m1822():void { var l:Double = (-256)+(128); }
	def m1823():void { var l:Double = (-256)+(-128); }
	def m1824():void { var l:Double = (-256)+(255); }
	def m1825():void { var l:Double = (-256)+(-255); }
	def m1826():void { var l:Double = (-256)+(256); }
	def m1827():void { var l:Double = (-256)+(-256); }
	def m1828():void { var l:Double = (-256)+(32767); }
	def m1829():void { var l:Double = (-256)+(-32767); }
	def m1830():void { var l:Double = (-256)+(32768); }
	def m1831():void { var l:Double = (-256)+(-32768); }
	def m1832():void { var l:Double = (-256)+(65535); }
	def m1833():void { var l:Double = (-256)+(-65535); }
	def m1834():void { var l:Double = (-256)+(65536); }
	def m1835():void { var l:Double = (-256)+(-65536); }
	def m1836():void { var l:Double = (-256)+(16777216); }
	def m1837():void { var l:Double = (-256)+(-16777216); }
	def m1838():void { var l:Double = (-256)+(16777217); }
	def m1839():void { var l:Double = (-256)+(-16777217); }
	def m1840():void { var l:Double = (-256)+(2147483647); }
	def m1841():void { var l:Double = (-256)+(-2147483647); }
	def m1842():void { var l:Double = (32767)+(w0); }
	def m1843():void { var l:Double = (32767)+(w1); }
	def m1844():void { var l:Double = (32767)+(w2); }
	def m1845():void { var l:Double = (32767)+(w3); }
	def m1846():void { var l:Double = (32767)+(w4); }
	def m1847():void { var l:Double = (32767)+(w5); }
	def m1848():void { var l:Double = (32767)+(0); }
	def m1849():void { var l:Double = (32767)+(-0); }
	def m1850():void { var l:Double = (32767)+(1); }
	def m1851():void { var l:Double = (32767)+(-1); }
	def m1852():void { var l:Double = (32767)+(2.2); }
	def m1853():void { var l:Double = (32767)+(-2.2); }
	def m1854():void { var l:Double = (32767)+(127); }
	def m1855():void { var l:Double = (32767)+(-127); }
	def m1856():void { var l:Double = (32767)+(128); }
	def m1857():void { var l:Double = (32767)+(-128); }
	def m1858():void { var l:Double = (32767)+(255); }
	def m1859():void { var l:Double = (32767)+(-255); }
	def m1860():void { var l:Double = (32767)+(256); }
	def m1861():void { var l:Double = (32767)+(-256); }
	def m1862():void { var l:Double = (32767)+(32767); }
	def m1863():void { var l:Double = (32767)+(-32767); }
	def m1864():void { var l:Double = (32767)+(32768); }
	def m1865():void { var l:Double = (32767)+(-32768); }
	def m1866():void { var l:Double = (32767)+(65535); }
	def m1867():void { var l:Double = (32767)+(-65535); }
	def m1868():void { var l:Double = (32767)+(65536); }
	def m1869():void { var l:Double = (32767)+(-65536); }
	def m1870():void { var l:Double = (32767)+(16777216); }
	def m1871():void { var l:Double = (32767)+(-16777216); }
	def m1872():void { var l:Double = (32767)+(16777217); }
	def m1873():void { var l:Double = (32767)+(-16777217); }
	def m1874():void { var l:Double = (32767)+(2147483647); }
	def m1875():void { var l:Double = (32767)+(-2147483647); }
	def m1876():void { var l:Double = (-32767)+(w0); }
	def m1877():void { var l:Double = (-32767)+(w1); }
	def m1878():void { var l:Double = (-32767)+(w2); }
	def m1879():void { var l:Double = (-32767)+(w3); }
	def m1880():void { var l:Double = (-32767)+(w4); }
	def m1881():void { var l:Double = (-32767)+(w5); }
	def m1882():void { var l:Double = (-32767)+(0); }
	def m1883():void { var l:Double = (-32767)+(-0); }
	def m1884():void { var l:Double = (-32767)+(1); }
	def m1885():void { var l:Double = (-32767)+(-1); }
	def m1886():void { var l:Double = (-32767)+(2.2); }
	def m1887():void { var l:Double = (-32767)+(-2.2); }
	def m1888():void { var l:Double = (-32767)+(127); }
	def m1889():void { var l:Double = (-32767)+(-127); }
	def m1890():void { var l:Double = (-32767)+(128); }
	def m1891():void { var l:Double = (-32767)+(-128); }
	def m1892():void { var l:Double = (-32767)+(255); }
	def m1893():void { var l:Double = (-32767)+(-255); }
	def m1894():void { var l:Double = (-32767)+(256); }
	def m1895():void { var l:Double = (-32767)+(-256); }
	def m1896():void { var l:Double = (-32767)+(32767); }
	def m1897():void { var l:Double = (-32767)+(-32767); }
	def m1898():void { var l:Double = (-32767)+(32768); }
	def m1899():void { var l:Double = (-32767)+(-32768); }
	def m1900():void { var l:Double = (-32767)+(65535); }
	def m1901():void { var l:Double = (-32767)+(-65535); }
	def m1902():void { var l:Double = (-32767)+(65536); }
	def m1903():void { var l:Double = (-32767)+(-65536); }
	def m1904():void { var l:Double = (-32767)+(16777216); }
	def m1905():void { var l:Double = (-32767)+(-16777216); }
	def m1906():void { var l:Double = (-32767)+(16777217); }
	def m1907():void { var l:Double = (-32767)+(-16777217); }
	def m1908():void { var l:Double = (-32767)+(2147483647); }
	def m1909():void { var l:Double = (-32767)+(-2147483647); }
	def m1910():void { var l:Double = (32768)+(w0); }
	def m1911():void { var l:Double = (32768)+(w1); }
	def m1912():void { var l:Double = (32768)+(w2); }
	def m1913():void { var l:Double = (32768)+(w3); }
	def m1914():void { var l:Double = (32768)+(w4); }
	def m1915():void { var l:Double = (32768)+(w5); }
	def m1916():void { var l:Double = (32768)+(0); }
	def m1917():void { var l:Double = (32768)+(-0); }
	def m1918():void { var l:Double = (32768)+(1); }
	def m1919():void { var l:Double = (32768)+(-1); }
	def m1920():void { var l:Double = (32768)+(2.2); }
	def m1921():void { var l:Double = (32768)+(-2.2); }
	def m1922():void { var l:Double = (32768)+(127); }
	def m1923():void { var l:Double = (32768)+(-127); }
	def m1924():void { var l:Double = (32768)+(128); }
	def m1925():void { var l:Double = (32768)+(-128); }
	def m1926():void { var l:Double = (32768)+(255); }
	def m1927():void { var l:Double = (32768)+(-255); }
	def m1928():void { var l:Double = (32768)+(256); }
	def m1929():void { var l:Double = (32768)+(-256); }
	def m1930():void { var l:Double = (32768)+(32767); }
	def m1931():void { var l:Double = (32768)+(-32767); }
	def m1932():void { var l:Double = (32768)+(32768); }
	def m1933():void { var l:Double = (32768)+(-32768); }
	def m1934():void { var l:Double = (32768)+(65535); }
	def m1935():void { var l:Double = (32768)+(-65535); }
	def m1936():void { var l:Double = (32768)+(65536); }
	def m1937():void { var l:Double = (32768)+(-65536); }
	def m1938():void { var l:Double = (32768)+(16777216); }
	def m1939():void { var l:Double = (32768)+(-16777216); }
	def m1940():void { var l:Double = (32768)+(16777217); }
	def m1941():void { var l:Double = (32768)+(-16777217); }
	def m1942():void { var l:Double = (32768)+(2147483647); }
	def m1943():void { var l:Double = (32768)+(-2147483647); }
	def m1944():void { var l:Double = (-32768)+(w0); }
	def m1945():void { var l:Double = (-32768)+(w1); }
	def m1946():void { var l:Double = (-32768)+(w2); }
	def m1947():void { var l:Double = (-32768)+(w3); }
	def m1948():void { var l:Double = (-32768)+(w4); }
	def m1949():void { var l:Double = (-32768)+(w5); }
	def m1950():void { var l:Double = (-32768)+(0); }
	def m1951():void { var l:Double = (-32768)+(-0); }
	def m1952():void { var l:Double = (-32768)+(1); }
	def m1953():void { var l:Double = (-32768)+(-1); }
	def m1954():void { var l:Double = (-32768)+(2.2); }
	def m1955():void { var l:Double = (-32768)+(-2.2); }
	def m1956():void { var l:Double = (-32768)+(127); }
	def m1957():void { var l:Double = (-32768)+(-127); }
	def m1958():void { var l:Double = (-32768)+(128); }
	def m1959():void { var l:Double = (-32768)+(-128); }
	def m1960():void { var l:Double = (-32768)+(255); }
	def m1961():void { var l:Double = (-32768)+(-255); }
	def m1962():void { var l:Double = (-32768)+(256); }
	def m1963():void { var l:Double = (-32768)+(-256); }
	def m1964():void { var l:Double = (-32768)+(32767); }
	def m1965():void { var l:Double = (-32768)+(-32767); }
	def m1966():void { var l:Double = (-32768)+(32768); }
	def m1967():void { var l:Double = (-32768)+(-32768); }
	def m1968():void { var l:Double = (-32768)+(65535); }
	def m1969():void { var l:Double = (-32768)+(-65535); }
	def m1970():void { var l:Double = (-32768)+(65536); }
	def m1971():void { var l:Double = (-32768)+(-65536); }
	def m1972():void { var l:Double = (-32768)+(16777216); }
	def m1973():void { var l:Double = (-32768)+(-16777216); }
	def m1974():void { var l:Double = (-32768)+(16777217); }
	def m1975():void { var l:Double = (-32768)+(-16777217); }
	def m1976():void { var l:Double = (-32768)+(2147483647); }
	def m1977():void { var l:Double = (-32768)+(-2147483647); }
	def m1978():void { var l:Double = (65535)+(w0); }
	def m1979():void { var l:Double = (65535)+(w1); }
	def m1980():void { var l:Double = (65535)+(w2); }
	def m1981():void { var l:Double = (65535)+(w3); }
	def m1982():void { var l:Double = (65535)+(w4); }
	def m1983():void { var l:Double = (65535)+(w5); }
	def m1984():void { var l:Double = (65535)+(0); }
	def m1985():void { var l:Double = (65535)+(-0); }
	def m1986():void { var l:Double = (65535)+(1); }
	def m1987():void { var l:Double = (65535)+(-1); }
	def m1988():void { var l:Double = (65535)+(2.2); }
	def m1989():void { var l:Double = (65535)+(-2.2); }
	def m1990():void { var l:Double = (65535)+(127); }
	def m1991():void { var l:Double = (65535)+(-127); }
	def m1992():void { var l:Double = (65535)+(128); }
	def m1993():void { var l:Double = (65535)+(-128); }
	def m1994():void { var l:Double = (65535)+(255); }
	def m1995():void { var l:Double = (65535)+(-255); }
	def m1996():void { var l:Double = (65535)+(256); }
	def m1997():void { var l:Double = (65535)+(-256); }
	def m1998():void { var l:Double = (65535)+(32767); }
	def m1999():void { var l:Double = (65535)+(-32767); }
	def m2000():void { var l:Double = (65535)+(32768); }
	def m2001():void { var l:Double = (65535)+(-32768); }
	def m2002():void { var l:Double = (65535)+(65535); }
	def m2003():void { var l:Double = (65535)+(-65535); }
	def m2004():void { var l:Double = (65535)+(65536); }
	def m2005():void { var l:Double = (65535)+(-65536); }
	def m2006():void { var l:Double = (65535)+(16777216); }
	def m2007():void { var l:Double = (65535)+(-16777216); }
	def m2008():void { var l:Double = (65535)+(16777217); }
	def m2009():void { var l:Double = (65535)+(-16777217); }
	def m2010():void { var l:Double = (65535)+(2147483647); }
	def m2011():void { var l:Double = (65535)+(-2147483647); }
	def m2012():void { var l:Double = (-65535)+(w0); }
	def m2013():void { var l:Double = (-65535)+(w1); }
	def m2014():void { var l:Double = (-65535)+(w2); }
	def m2015():void { var l:Double = (-65535)+(w3); }
	def m2016():void { var l:Double = (-65535)+(w4); }
	def m2017():void { var l:Double = (-65535)+(w5); }
	def m2018():void { var l:Double = (-65535)+(0); }
	def m2019():void { var l:Double = (-65535)+(-0); }
	def m2020():void { var l:Double = (-65535)+(1); }
	def m2021():void { var l:Double = (-65535)+(-1); }
	def m2022():void { var l:Double = (-65535)+(2.2); }
	def m2023():void { var l:Double = (-65535)+(-2.2); }
	def m2024():void { var l:Double = (-65535)+(127); }
	def m2025():void { var l:Double = (-65535)+(-127); }
	def m2026():void { var l:Double = (-65535)+(128); }
	def m2027():void { var l:Double = (-65535)+(-128); }
	def m2028():void { var l:Double = (-65535)+(255); }
	def m2029():void { var l:Double = (-65535)+(-255); }
	def m2030():void { var l:Double = (-65535)+(256); }
	def m2031():void { var l:Double = (-65535)+(-256); }
	def m2032():void { var l:Double = (-65535)+(32767); }
	def m2033():void { var l:Double = (-65535)+(-32767); }
	def m2034():void { var l:Double = (-65535)+(32768); }
	def m2035():void { var l:Double = (-65535)+(-32768); }
	def m2036():void { var l:Double = (-65535)+(65535); }
	def m2037():void { var l:Double = (-65535)+(-65535); }
	def m2038():void { var l:Double = (-65535)+(65536); }
	def m2039():void { var l:Double = (-65535)+(-65536); }
	def m2040():void { var l:Double = (-65535)+(16777216); }
	def m2041():void { var l:Double = (-65535)+(-16777216); }
	def m2042():void { var l:Double = (-65535)+(16777217); }
	def m2043():void { var l:Double = (-65535)+(-16777217); }
	def m2044():void { var l:Double = (-65535)+(2147483647); }
	def m2045():void { var l:Double = (-65535)+(-2147483647); }
	def m2046():void { var l:Double = (65536)+(w0); }
	def m2047():void { var l:Double = (65536)+(w1); }
	def m2048():void { var l:Double = (65536)+(w2); }
	def m2049():void { var l:Double = (65536)+(w3); }
	def m2050():void { var l:Double = (65536)+(w4); }
	def m2051():void { var l:Double = (65536)+(w5); }
	def m2052():void { var l:Double = (65536)+(0); }
	def m2053():void { var l:Double = (65536)+(-0); }
	def m2054():void { var l:Double = (65536)+(1); }
	def m2055():void { var l:Double = (65536)+(-1); }
	def m2056():void { var l:Double = (65536)+(2.2); }
	def m2057():void { var l:Double = (65536)+(-2.2); }
	def m2058():void { var l:Double = (65536)+(127); }
	def m2059():void { var l:Double = (65536)+(-127); }
	def m2060():void { var l:Double = (65536)+(128); }
	def m2061():void { var l:Double = (65536)+(-128); }
	def m2062():void { var l:Double = (65536)+(255); }
	def m2063():void { var l:Double = (65536)+(-255); }
	def m2064():void { var l:Double = (65536)+(256); }
	def m2065():void { var l:Double = (65536)+(-256); }
	def m2066():void { var l:Double = (65536)+(32767); }
	def m2067():void { var l:Double = (65536)+(-32767); }
	def m2068():void { var l:Double = (65536)+(32768); }
	def m2069():void { var l:Double = (65536)+(-32768); }
	def m2070():void { var l:Double = (65536)+(65535); }
	def m2071():void { var l:Double = (65536)+(-65535); }
	def m2072():void { var l:Double = (65536)+(65536); }
	def m2073():void { var l:Double = (65536)+(-65536); }
	def m2074():void { var l:Double = (65536)+(16777216); }
	def m2075():void { var l:Double = (65536)+(-16777216); }
	def m2076():void { var l:Double = (65536)+(16777217); }
	def m2077():void { var l:Double = (65536)+(-16777217); }
	def m2078():void { var l:Double = (65536)+(2147483647); }
	def m2079():void { var l:Double = (65536)+(-2147483647); }
	def m2080():void { var l:Double = (-65536)+(w0); }
	def m2081():void { var l:Double = (-65536)+(w1); }
	def m2082():void { var l:Double = (-65536)+(w2); }
	def m2083():void { var l:Double = (-65536)+(w3); }
	def m2084():void { var l:Double = (-65536)+(w4); }
	def m2085():void { var l:Double = (-65536)+(w5); }
	def m2086():void { var l:Double = (-65536)+(0); }
	def m2087():void { var l:Double = (-65536)+(-0); }
	def m2088():void { var l:Double = (-65536)+(1); }
	def m2089():void { var l:Double = (-65536)+(-1); }
	def m2090():void { var l:Double = (-65536)+(2.2); }
	def m2091():void { var l:Double = (-65536)+(-2.2); }
	def m2092():void { var l:Double = (-65536)+(127); }
	def m2093():void { var l:Double = (-65536)+(-127); }
	def m2094():void { var l:Double = (-65536)+(128); }
	def m2095():void { var l:Double = (-65536)+(-128); }
	def m2096():void { var l:Double = (-65536)+(255); }
	def m2097():void { var l:Double = (-65536)+(-255); }
	def m2098():void { var l:Double = (-65536)+(256); }
	def m2099():void { var l:Double = (-65536)+(-256); }
	def m2100():void { var l:Double = (-65536)+(32767); }
	def m2101():void { var l:Double = (-65536)+(-32767); }
	def m2102():void { var l:Double = (-65536)+(32768); }
	def m2103():void { var l:Double = (-65536)+(-32768); }
	def m2104():void { var l:Double = (-65536)+(65535); }
	def m2105():void { var l:Double = (-65536)+(-65535); }
	def m2106():void { var l:Double = (-65536)+(65536); }
	def m2107():void { var l:Double = (-65536)+(-65536); }
	def m2108():void { var l:Double = (-65536)+(16777216); }
	def m2109():void { var l:Double = (-65536)+(-16777216); }
	def m2110():void { var l:Double = (-65536)+(16777217); }
	def m2111():void { var l:Double = (-65536)+(-16777217); }
	def m2112():void { var l:Double = (-65536)+(2147483647); }
	def m2113():void { var l:Double = (-65536)+(-2147483647); }
	def m2114():void { var l:Double = (16777216)+(w0); }
	def m2115():void { var l:Double = (16777216)+(w1); }
	def m2116():void { var l:Double = (16777216)+(w2); }
	def m2117():void { var l:Double = (16777216)+(w3); }
	def m2118():void { var l:Double = (16777216)+(w4); }
	def m2119():void { var l:Double = (16777216)+(w5); }
	def m2120():void { var l:Double = (16777216)+(0); }
	def m2121():void { var l:Double = (16777216)+(-0); }
	def m2122():void { var l:Double = (16777216)+(1); }
	def m2123():void { var l:Double = (16777216)+(-1); }
	def m2124():void { var l:Double = (16777216)+(2.2); }
	def m2125():void { var l:Double = (16777216)+(-2.2); }
	def m2126():void { var l:Double = (16777216)+(127); }
	def m2127():void { var l:Double = (16777216)+(-127); }
	def m2128():void { var l:Double = (16777216)+(128); }
	def m2129():void { var l:Double = (16777216)+(-128); }
	def m2130():void { var l:Double = (16777216)+(255); }
	def m2131():void { var l:Double = (16777216)+(-255); }
	def m2132():void { var l:Double = (16777216)+(256); }
	def m2133():void { var l:Double = (16777216)+(-256); }
	def m2134():void { var l:Double = (16777216)+(32767); }
	def m2135():void { var l:Double = (16777216)+(-32767); }
	def m2136():void { var l:Double = (16777216)+(32768); }
	def m2137():void { var l:Double = (16777216)+(-32768); }
	def m2138():void { var l:Double = (16777216)+(65535); }
	def m2139():void { var l:Double = (16777216)+(-65535); }
	def m2140():void { var l:Double = (16777216)+(65536); }
	def m2141():void { var l:Double = (16777216)+(-65536); }
	def m2142():void { var l:Double = (16777216)+(16777216); }
	def m2143():void { var l:Double = (16777216)+(-16777216); }
	def m2144():void { var l:Double = (16777216)+(16777217); }
	def m2145():void { var l:Double = (16777216)+(-16777217); }
	def m2146():void { var l:Double = (16777216)+(2147483647); }
	def m2147():void { var l:Double = (16777216)+(-2147483647); }
	def m2148():void { var l:Double = (-16777216)+(w0); }
	def m2149():void { var l:Double = (-16777216)+(w1); }
	def m2150():void { var l:Double = (-16777216)+(w2); }
	def m2151():void { var l:Double = (-16777216)+(w3); }
	def m2152():void { var l:Double = (-16777216)+(w4); }
	def m2153():void { var l:Double = (-16777216)+(w5); }
	def m2154():void { var l:Double = (-16777216)+(0); }
	def m2155():void { var l:Double = (-16777216)+(-0); }
	def m2156():void { var l:Double = (-16777216)+(1); }
	def m2157():void { var l:Double = (-16777216)+(-1); }
	def m2158():void { var l:Double = (-16777216)+(2.2); }
	def m2159():void { var l:Double = (-16777216)+(-2.2); }
	def m2160():void { var l:Double = (-16777216)+(127); }
	def m2161():void { var l:Double = (-16777216)+(-127); }
	def m2162():void { var l:Double = (-16777216)+(128); }
	def m2163():void { var l:Double = (-16777216)+(-128); }
	def m2164():void { var l:Double = (-16777216)+(255); }
	def m2165():void { var l:Double = (-16777216)+(-255); }
	def m2166():void { var l:Double = (-16777216)+(256); }
	def m2167():void { var l:Double = (-16777216)+(-256); }
	def m2168():void { var l:Double = (-16777216)+(32767); }
	def m2169():void { var l:Double = (-16777216)+(-32767); }
	def m2170():void { var l:Double = (-16777216)+(32768); }
	def m2171():void { var l:Double = (-16777216)+(-32768); }
	def m2172():void { var l:Double = (-16777216)+(65535); }
	def m2173():void { var l:Double = (-16777216)+(-65535); }
	def m2174():void { var l:Double = (-16777216)+(65536); }
	def m2175():void { var l:Double = (-16777216)+(-65536); }
	def m2176():void { var l:Double = (-16777216)+(16777216); }
	def m2177():void { var l:Double = (-16777216)+(-16777216); }
	def m2178():void { var l:Double = (-16777216)+(16777217); }
	def m2179():void { var l:Double = (-16777216)+(-16777217); }
	def m2180():void { var l:Double = (-16777216)+(2147483647); }
	def m2181():void { var l:Double = (-16777216)+(-2147483647); }
	def m2182():void { var l:Double = (16777217)+(w0); }
	def m2183():void { var l:Double = (16777217)+(w1); }
	def m2184():void { var l:Double = (16777217)+(w2); }
	def m2185():void { var l:Double = (16777217)+(w3); }
	def m2186():void { var l:Double = (16777217)+(w4); }
	def m2187():void { var l:Double = (16777217)+(w5); }
	def m2188():void { var l:Double = (16777217)+(0); }
	def m2189():void { var l:Double = (16777217)+(-0); }
	def m2190():void { var l:Double = (16777217)+(1); }
	def m2191():void { var l:Double = (16777217)+(-1); }
	def m2192():void { var l:Double = (16777217)+(2.2); }
	def m2193():void { var l:Double = (16777217)+(-2.2); }
	def m2194():void { var l:Double = (16777217)+(127); }
	def m2195():void { var l:Double = (16777217)+(-127); }
	def m2196():void { var l:Double = (16777217)+(128); }
	def m2197():void { var l:Double = (16777217)+(-128); }
	def m2198():void { var l:Double = (16777217)+(255); }
	def m2199():void { var l:Double = (16777217)+(-255); }
	def m2200():void { var l:Double = (16777217)+(256); }
	def m2201():void { var l:Double = (16777217)+(-256); }
	def m2202():void { var l:Double = (16777217)+(32767); }
	def m2203():void { var l:Double = (16777217)+(-32767); }
	def m2204():void { var l:Double = (16777217)+(32768); }
	def m2205():void { var l:Double = (16777217)+(-32768); }
	def m2206():void { var l:Double = (16777217)+(65535); }
	def m2207():void { var l:Double = (16777217)+(-65535); }
	def m2208():void { var l:Double = (16777217)+(65536); }
	def m2209():void { var l:Double = (16777217)+(-65536); }
	def m2210():void { var l:Double = (16777217)+(16777216); }
	def m2211():void { var l:Double = (16777217)+(-16777216); }
	def m2212():void { var l:Double = (16777217)+(16777217); }
	def m2213():void { var l:Double = (16777217)+(-16777217); }
	def m2214():void { var l:Double = (16777217)+(2147483647); }
	def m2215():void { var l:Double = (16777217)+(-2147483647); }
	def m2216():void { var l:Double = (-16777217)+(w0); }
	def m2217():void { var l:Double = (-16777217)+(w1); }
	def m2218():void { var l:Double = (-16777217)+(w2); }
	def m2219():void { var l:Double = (-16777217)+(w3); }
	def m2220():void { var l:Double = (-16777217)+(w4); }
	def m2221():void { var l:Double = (-16777217)+(w5); }
	def m2222():void { var l:Double = (-16777217)+(0); }
	def m2223():void { var l:Double = (-16777217)+(-0); }
	def m2224():void { var l:Double = (-16777217)+(1); }
	def m2225():void { var l:Double = (-16777217)+(-1); }
	def m2226():void { var l:Double = (-16777217)+(2.2); }
	def m2227():void { var l:Double = (-16777217)+(-2.2); }
	def m2228():void { var l:Double = (-16777217)+(127); }
	def m2229():void { var l:Double = (-16777217)+(-127); }
	def m2230():void { var l:Double = (-16777217)+(128); }
	def m2231():void { var l:Double = (-16777217)+(-128); }
	def m2232():void { var l:Double = (-16777217)+(255); }
	def m2233():void { var l:Double = (-16777217)+(-255); }
	def m2234():void { var l:Double = (-16777217)+(256); }
	def m2235():void { var l:Double = (-16777217)+(-256); }
	def m2236():void { var l:Double = (-16777217)+(32767); }
	def m2237():void { var l:Double = (-16777217)+(-32767); }
	def m2238():void { var l:Double = (-16777217)+(32768); }
	def m2239():void { var l:Double = (-16777217)+(-32768); }
	def m2240():void { var l:Double = (-16777217)+(65535); }
	def m2241():void { var l:Double = (-16777217)+(-65535); }
	def m2242():void { var l:Double = (-16777217)+(65536); }
	def m2243():void { var l:Double = (-16777217)+(-65536); }
	def m2244():void { var l:Double = (-16777217)+(16777216); }
	def m2245():void { var l:Double = (-16777217)+(-16777216); }
	def m2246():void { var l:Double = (-16777217)+(16777217); }
	def m2247():void { var l:Double = (-16777217)+(-16777217); }
	def m2248():void { var l:Double = (-16777217)+(2147483647); }
	def m2249():void { var l:Double = (-16777217)+(-2147483647); }
	def m2250():void { var l:Double = (2147483647)+(w0); }
	def m2251():void { var l:Double = (2147483647)+(w1); }
	def m2252():void { var l:Double = (2147483647)+(w2); }
	def m2253():void { var l:Double = (2147483647)+(w3); }
	def m2254():void { var l:Double = (2147483647)+(w4); }
	def m2255():void { var l:Double = (2147483647)+(w5); }
	def m2256():void { var l:Double = (2147483647)+(0); }
	def m2257():void { var l:Double = (2147483647)+(-0); }
	def m2258():void { var l:Double = (2147483647)+(1); }
	def m2259():void { var l:Double = (2147483647)+(-1); }
	def m2260():void { var l:Double = (2147483647)+(2.2); }
	def m2261():void { var l:Double = (2147483647)+(-2.2); }
	def m2262():void { var l:Double = (2147483647)+(127); }
	def m2263():void { var l:Double = (2147483647)+(-127); }
	def m2264():void { var l:Double = (2147483647)+(128); }
	def m2265():void { var l:Double = (2147483647)+(-128); }
	def m2266():void { var l:Double = (2147483647)+(255); }
	def m2267():void { var l:Double = (2147483647)+(-255); }
	def m2268():void { var l:Double = (2147483647)+(256); }
	def m2269():void { var l:Double = (2147483647)+(-256); }
	def m2270():void { var l:Double = (2147483647)+(32767); }
	def m2271():void { var l:Double = (2147483647)+(-32767); }
	def m2272():void { var l:Double = (2147483647)+(32768); }
	def m2273():void { var l:Double = (2147483647)+(-32768); }
	def m2274():void { var l:Double = (2147483647)+(65535); }
	def m2275():void { var l:Double = (2147483647)+(-65535); }
	def m2276():void { var l:Double = (2147483647)+(65536); }
	def m2277():void { var l:Double = (2147483647)+(-65536); }
	def m2278():void { var l:Double = (2147483647)+(16777216); }
	def m2279():void { var l:Double = (2147483647)+(-16777216); }
	def m2280():void { var l:Double = (2147483647)+(16777217); }
	def m2281():void { var l:Double = (2147483647)+(-16777217); }
	def m2282():void { var l:Double = (2147483647)+(2147483647); }
	def m2283():void { var l:Double = (2147483647)+(-2147483647); }
	def m2284():void { var l:Double = (-2147483647)+(w0); }
	def m2285():void { var l:Double = (-2147483647)+(w1); }
	def m2286():void { var l:Double = (-2147483647)+(w2); }
	def m2287():void { var l:Double = (-2147483647)+(w3); }
	def m2288():void { var l:Double = (-2147483647)+(w4); }
	def m2289():void { var l:Double = (-2147483647)+(w5); }
	def m2290():void { var l:Double = (-2147483647)+(0); }
	def m2291():void { var l:Double = (-2147483647)+(-0); }
	def m2292():void { var l:Double = (-2147483647)+(1); }
	def m2293():void { var l:Double = (-2147483647)+(-1); }
	def m2294():void { var l:Double = (-2147483647)+(2.2); }
	def m2295():void { var l:Double = (-2147483647)+(-2.2); }
	def m2296():void { var l:Double = (-2147483647)+(127); }
	def m2297():void { var l:Double = (-2147483647)+(-127); }
	def m2298():void { var l:Double = (-2147483647)+(128); }
	def m2299():void { var l:Double = (-2147483647)+(-128); }
	def m2300():void { var l:Double = (-2147483647)+(255); }
	def m2301():void { var l:Double = (-2147483647)+(-255); }
	def m2302():void { var l:Double = (-2147483647)+(256); }
	def m2303():void { var l:Double = (-2147483647)+(-256); }
	def m2304():void { var l:Double = (-2147483647)+(32767); }
	def m2305():void { var l:Double = (-2147483647)+(-32767); }
	def m2306():void { var l:Double = (-2147483647)+(32768); }
	def m2307():void { var l:Double = (-2147483647)+(-32768); }
	def m2308():void { var l:Double = (-2147483647)+(65535); }
	def m2309():void { var l:Double = (-2147483647)+(-65535); }
	def m2310():void { var l:Double = (-2147483647)+(65536); }
	def m2311():void { var l:Double = (-2147483647)+(-65536); }
	def m2312():void { var l:Double = (-2147483647)+(16777216); }
	def m2313():void { var l:Double = (-2147483647)+(-16777216); }
	def m2314():void { var l:Double = (-2147483647)+(16777217); }
	def m2315():void { var l:Double = (-2147483647)+(-16777217); }
	def m2316():void { var l:Double = (-2147483647)+(2147483647); }
	def m2317():void { var l:Double = (-2147483647)+(-2147483647); }
	def m2318():void { var l:Byte = (w0)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2319():void { var l:Byte = (w0)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w0)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2320():void { var l:Byte = (w0)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2321():void { var l:Byte = (w0)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2322():void { var l:Byte = (w0)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((SignedTests.this.w4))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2323():void { var l:Byte = (w0)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2324():void { var l:Byte = (w0)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((0))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2325():void { var l:Byte = (w0)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((0))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2326():void { var l:Byte = (w0)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((1))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2327():void { var l:Byte = (w0)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-1))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2328():void { var l:Byte = (w0)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w0)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2329():void { var l:Byte = (w0)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w0)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2330():void { var l:Byte = (w0)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((127))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2331():void { var l:Byte = (w0)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-127))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2332():void { var l:Byte = (w0)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((128))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2333():void { var l:Byte = (w0)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-128))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2334():void { var l:Byte = (w0)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((255))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2335():void { var l:Byte = (w0)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-255))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2336():void { var l:Byte = (w0)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((256))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2337():void { var l:Byte = (w0)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-256))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2338():void { var l:Byte = (w0)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((32767))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2339():void { var l:Byte = (w0)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-32767))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2340():void { var l:Byte = (w0)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((32768))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2341():void { var l:Byte = (w0)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-32768))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2342():void { var l:Byte = (w0)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((65535))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2343():void { var l:Byte = (w0)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-65535))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2344():void { var l:Byte = (w0)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((65536))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2345():void { var l:Byte = (w0)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-65536))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2346():void { var l:Byte = (w0)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((16777216))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2347():void { var l:Byte = (w0)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-16777216))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2348():void { var l:Byte = (w0)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((16777217))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2349():void { var l:Byte = (w0)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-16777217))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2350():void { var l:Byte = (w0)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((2147483647))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2351():void { var l:Byte = (w0)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2352():void { var l:Byte = (w1)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w0))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2353():void { var l:Byte = (w1)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2354():void { var l:Byte = (w1)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2355():void { var l:Byte = (w1)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2356():void { var l:Byte = (w1)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w4))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2357():void { var l:Byte = (w1)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2358():void { var l:Byte = (w1)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2359():void { var l:Byte = (w1)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2360():void { var l:Byte = (w1)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((1))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2361():void { var l:Byte = (w1)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-1))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2362():void { var l:Byte = (w1)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2363():void { var l:Byte = (w1)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2364():void { var l:Byte = (w1)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((127))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2365():void { var l:Byte = (w1)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-127))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2366():void { var l:Byte = (w1)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((128))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2367():void { var l:Byte = (w1)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-128))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2368():void { var l:Byte = (w1)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((255))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2369():void { var l:Byte = (w1)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-255))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2370():void { var l:Byte = (w1)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((256))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2371():void { var l:Byte = (w1)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-256))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2372():void { var l:Byte = (w1)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((32767))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2373():void { var l:Byte = (w1)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-32767))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2374():void { var l:Byte = (w1)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((32768))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2375():void { var l:Byte = (w1)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-32768))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2376():void { var l:Byte = (w1)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((65535))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2377():void { var l:Byte = (w1)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-65535))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2378():void { var l:Byte = (w1)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((65536))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2379():void { var l:Byte = (w1)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-65536))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2380():void { var l:Byte = (w1)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((16777216))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2381():void { var l:Byte = (w1)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-16777216))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2382():void { var l:Byte = (w1)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((16777217))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2383():void { var l:Byte = (w1)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-16777217))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2384():void { var l:Byte = (w1)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((2147483647))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2385():void { var l:Byte = (w1)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2386():void { var l:Byte = (w2)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((SignedTests.this.w2)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2387():void { var l:Byte = (w2)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w2)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2388():void { var l:Byte = (w2)+(w2); }
	def m2389():void { var l:Byte = (w2)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2390():void { var l:Byte = (w2)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((SignedTests.this.w2)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2391():void { var l:Byte = (w2)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Short.implicit_operator_as((SignedTests.this.w2)) + (SignedTests.this.w5)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Short)
	def m2392():void { var l:Byte = (w2)+(0); }  
	def m2393():void { var l:Byte = (w2)+(-0); }  
	def m2394():void { var l:Byte = (w2)+(1); }  
	def m2395():void { var l:Byte = (w2)+(-1); }  
	def m2396():void { var l:Byte = (w2)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w2)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2397():void { var l:Byte = (w2)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w2)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2398():void { var l:Byte = (w2)+(127); }  
	def m2399():void { var l:Byte = (w2)+(-127); }  
	def m2400():void { var l:Byte = (w2)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2401():void { var l:Byte = (w2)+(-128); }  
	def m2402():void { var l:Byte = (w2)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2403():void { var l:Byte = (w2)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2404():void { var l:Byte = (w2)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2405():void { var l:Byte = (w2)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2406():void { var l:Byte = (w2)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2407():void { var l:Byte = (w2)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2408():void { var l:Byte = (w2)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2409():void { var l:Byte = (w2)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2410():void { var l:Byte = (w2)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2411():void { var l:Byte = (w2)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2412():void { var l:Byte = (w2)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2413():void { var l:Byte = (w2)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2414():void { var l:Byte = (w2)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2415():void { var l:Byte = (w2)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2416():void { var l:Byte = (w2)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2417():void { var l:Byte = (w2)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2418():void { var l:Byte = (w2)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2419():void { var l:Byte = (w2)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2420():void { var l:Byte = (w3)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((SignedTests.this.w3)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2421():void { var l:Byte = (w3)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w3)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2422():void { var l:Byte = (w3)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2423():void { var l:Byte = (w3)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2424():void { var l:Byte = (w3)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((SignedTests.this.w3)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2425():void { var l:Byte = (w3)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2426():void { var l:Byte = (w3)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2427():void { var l:Byte = (w3)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2428():void { var l:Byte = (w3)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2429():void { var l:Byte = (w3)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2430():void { var l:Byte = (w3)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w3)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2431():void { var l:Byte = (w3)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w3)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2432():void { var l:Byte = (w3)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2433():void { var l:Byte = (w3)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2434():void { var l:Byte = (w3)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2435():void { var l:Byte = (w3)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2436():void { var l:Byte = (w3)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2437():void { var l:Byte = (w3)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2438():void { var l:Byte = (w3)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2439():void { var l:Byte = (w3)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2440():void { var l:Byte = (w3)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2441():void { var l:Byte = (w3)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2442():void { var l:Byte = (w3)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2443():void { var l:Byte = (w3)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2444():void { var l:Byte = (w3)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2445():void { var l:Byte = (w3)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2446():void { var l:Byte = (w3)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2447():void { var l:Byte = (w3)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2448():void { var l:Byte = (w3)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2449():void { var l:Byte = (w3)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2450():void { var l:Byte = (w3)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2451():void { var l:Byte = (w3)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2452():void { var l:Byte = (w3)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2453():void { var l:Byte = (w3)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2454():void { var l:Byte = (w4)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((SignedTests.this.w4)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2455():void { var l:Byte = (w4)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w4)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2456():void { var l:Byte = (w4)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2457():void { var l:Byte = (w4)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2458():void { var l:Byte = (w4)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2459():void { var l:Byte = (w4)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2460():void { var l:Byte = (w4)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((0))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2461():void { var l:Byte = (w4)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((0))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2462():void { var l:Byte = (w4)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((1))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2463():void { var l:Byte = (w4)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-1))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2464():void { var l:Byte = (w4)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w4)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2465():void { var l:Byte = (w4)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w4)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2466():void { var l:Byte = (w4)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((127))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2467():void { var l:Byte = (w4)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-127))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2468():void { var l:Byte = (w4)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((128))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2469():void { var l:Byte = (w4)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-128))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2470():void { var l:Byte = (w4)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((255))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2471():void { var l:Byte = (w4)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-255))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2472():void { var l:Byte = (w4)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((256))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2473():void { var l:Byte = (w4)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-256))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2474():void { var l:Byte = (w4)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((32767))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2475():void { var l:Byte = (w4)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-32767))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2476():void { var l:Byte = (w4)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((32768))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2477():void { var l:Byte = (w4)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-32768))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2478():void { var l:Byte = (w4)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((65535))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2479():void { var l:Byte = (w4)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-65535))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2480():void { var l:Byte = (w4)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((65536))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2481():void { var l:Byte = (w4)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-65536))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2482():void { var l:Byte = (w4)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((16777216))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2483():void { var l:Byte = (w4)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-16777216))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2484():void { var l:Byte = (w4)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((16777217))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2485():void { var l:Byte = (w4)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-16777217))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2486():void { var l:Byte = (w4)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((2147483647))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2487():void { var l:Byte = (w4)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2488():void { var l:Byte = (w5)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((SignedTests.this.w5)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2489():void { var l:Byte = (w5)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w5)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2490():void { var l:Byte = (w5)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w5) + x10.lang.Short.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Short)
	def m2491():void { var l:Byte = (w5)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2492():void { var l:Byte = (w5)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((SignedTests.this.w5)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2493():void { var l:Byte = (w5)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w5) + (SignedTests.this.w5)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Short)
	def m2494():void { var l:Byte = (w5)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w5) + x10.lang.Short.operator_as((0))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Short)
	def m2495():void { var l:Byte = (w5)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w5) + x10.lang.Short.operator_as((0))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Short)
	def m2496():void { var l:Byte = (w5)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w5) + x10.lang.Short.operator_as((1))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Short)
	def m2497():void { var l:Byte = (w5)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w5) + x10.lang.Short.operator_as((-1))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Short)
	def m2498():void { var l:Byte = (w5)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w5)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2499():void { var l:Byte = (w5)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w5)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2500():void { var l:Byte = (w5)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w5) + x10.lang.Short.operator_as((127))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Short)
	def m2501():void { var l:Byte = (w5)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w5) + x10.lang.Short.operator_as((-127))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Short)
	def m2502():void { var l:Byte = (w5)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w5) + x10.lang.Short.operator_as((128))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Short)
	def m2503():void { var l:Byte = (w5)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w5) + x10.lang.Short.operator_as((-128))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Short)
	def m2504():void { var l:Byte = (w5)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w5) + x10.lang.Short.operator_as((255))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Short)
	def m2505():void { var l:Byte = (w5)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w5) + x10.lang.Short.operator_as((-255))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Short)
	def m2506():void { var l:Byte = (w5)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w5) + x10.lang.Short.operator_as((256))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Short)
	def m2507():void { var l:Byte = (w5)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w5) + x10.lang.Short.operator_as((-256))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Short)
	def m2508():void { var l:Byte = (w5)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w5) + x10.lang.Short.operator_as((32767))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Short)
	def m2509():void { var l:Byte = (w5)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w5) + x10.lang.Short.operator_as((-32767))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Short)
	def m2510():void { var l:Byte = (w5)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2511():void { var l:Byte = (w5)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w5) + x10.lang.Short.operator_as((-32768))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Short)
	def m2512():void { var l:Byte = (w5)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2513():void { var l:Byte = (w5)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2514():void { var l:Byte = (w5)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2515():void { var l:Byte = (w5)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2516():void { var l:Byte = (w5)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2517():void { var l:Byte = (w5)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2518():void { var l:Byte = (w5)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2519():void { var l:Byte = (w5)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2520():void { var l:Byte = (w5)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2521():void { var l:Byte = (w5)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2522():void { var l:Byte = (0)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((0)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2523():void { var l:Byte = (0)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2524():void { var l:Byte = (0)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2525():void { var l:Byte = (0)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2526():void { var l:Byte = (0)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((0)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2527():void { var l:Byte = (0)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2528():void { var l:Byte = (0)+(0); }
	def m2529():void { var l:Byte = (0)+(-0); }
	def m2530():void { var l:Byte = (0)+(1); }
	def m2531():void { var l:Byte = (0)+(-1); }
	def m2532():void { var l:Byte = (0)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2533():void { var l:Byte = (0)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2534():void { var l:Byte = (0)+(127); }
	def m2535():void { var l:Byte = (0)+(-127); }
	def m2536():void { var l:Byte = (0)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2537():void { var l:Byte = (0)+(-128); }
	def m2538():void { var l:Byte = (0)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2539():void { var l:Byte = (0)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2540():void { var l:Byte = (0)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2541():void { var l:Byte = (0)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2542():void { var l:Byte = (0)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2543():void { var l:Byte = (0)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2544():void { var l:Byte = (0)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2545():void { var l:Byte = (0)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2546():void { var l:Byte = (0)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2547():void { var l:Byte = (0)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2548():void { var l:Byte = (0)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2549():void { var l:Byte = (0)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2550():void { var l:Byte = (0)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2551():void { var l:Byte = (0)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2552():void { var l:Byte = (0)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2553():void { var l:Byte = (0)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2554():void { var l:Byte = (0)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2555():void { var l:Byte = (0)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2556():void { var l:Byte = (-0)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((0)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2557():void { var l:Byte = (-0)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2558():void { var l:Byte = (-0)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2559():void { var l:Byte = (-0)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2560():void { var l:Byte = (-0)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((0)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2561():void { var l:Byte = (-0)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2562():void { var l:Byte = (-0)+(0); }
	def m2563():void { var l:Byte = (-0)+(-0); }
	def m2564():void { var l:Byte = (-0)+(1); }
	def m2565():void { var l:Byte = (-0)+(-1); }
	def m2566():void { var l:Byte = (-0)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2567():void { var l:Byte = (-0)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2568():void { var l:Byte = (-0)+(127); }
	def m2569():void { var l:Byte = (-0)+(-127); }
	def m2570():void { var l:Byte = (-0)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2571():void { var l:Byte = (-0)+(-128); }
	def m2572():void { var l:Byte = (-0)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2573():void { var l:Byte = (-0)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2574():void { var l:Byte = (-0)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2575():void { var l:Byte = (-0)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2576():void { var l:Byte = (-0)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2577():void { var l:Byte = (-0)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2578():void { var l:Byte = (-0)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2579():void { var l:Byte = (-0)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2580():void { var l:Byte = (-0)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2581():void { var l:Byte = (-0)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2582():void { var l:Byte = (-0)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2583():void { var l:Byte = (-0)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2584():void { var l:Byte = (-0)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2585():void { var l:Byte = (-0)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2586():void { var l:Byte = (-0)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2587():void { var l:Byte = (-0)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2588():void { var l:Byte = (-0)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2589():void { var l:Byte = (-0)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2590():void { var l:Byte = (1)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((1)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2591():void { var l:Byte = (1)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((1)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2592():void { var l:Byte = (1)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2593():void { var l:Byte = (1)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2594():void { var l:Byte = (1)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((1)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2595():void { var l:Byte = (1)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2596():void { var l:Byte = (1)+(0); }
	def m2597():void { var l:Byte = (1)+(-0); }
	def m2598():void { var l:Byte = (1)+(1); }
	def m2599():void { var l:Byte = (1)+(-1); }
	def m2600():void { var l:Byte = (1)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((1)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2601():void { var l:Byte = (1)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((1)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2602():void { var l:Byte = (1)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2603():void { var l:Byte = (1)+(-127); }
	def m2604():void { var l:Byte = (1)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2605():void { var l:Byte = (1)+(-128); }
	def m2606():void { var l:Byte = (1)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2607():void { var l:Byte = (1)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2608():void { var l:Byte = (1)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2609():void { var l:Byte = (1)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2610():void { var l:Byte = (1)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2611():void { var l:Byte = (1)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2612():void { var l:Byte = (1)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2613():void { var l:Byte = (1)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2614():void { var l:Byte = (1)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2615():void { var l:Byte = (1)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2616():void { var l:Byte = (1)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2617():void { var l:Byte = (1)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2618():void { var l:Byte = (1)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2619():void { var l:Byte = (1)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2620():void { var l:Byte = (1)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2621():void { var l:Byte = (1)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2622():void { var l:Byte = (1)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2623():void { var l:Byte = (1)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2624():void { var l:Byte = (-1)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-1)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2625():void { var l:Byte = (-1)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-1)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2626():void { var l:Byte = (-1)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2627():void { var l:Byte = (-1)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2628():void { var l:Byte = (-1)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-1)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2629():void { var l:Byte = (-1)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2630():void { var l:Byte = (-1)+(0); }
	def m2631():void { var l:Byte = (-1)+(-0); }
	def m2632():void { var l:Byte = (-1)+(1); }
	def m2633():void { var l:Byte = (-1)+(-1); }
	def m2634():void { var l:Byte = (-1)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-1)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2635():void { var l:Byte = (-1)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-1)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2636():void { var l:Byte = (-1)+(127); }
	def m2637():void { var l:Byte = (-1)+(-127); }
	def m2638():void { var l:Byte = (-1)+(128); }
	def m2639():void { var l:Byte = (-1)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2640():void { var l:Byte = (-1)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2641():void { var l:Byte = (-1)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2642():void { var l:Byte = (-1)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2643():void { var l:Byte = (-1)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2644():void { var l:Byte = (-1)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2645():void { var l:Byte = (-1)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2646():void { var l:Byte = (-1)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2647():void { var l:Byte = (-1)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2648():void { var l:Byte = (-1)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2649():void { var l:Byte = (-1)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2650():void { var l:Byte = (-1)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2651():void { var l:Byte = (-1)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2652():void { var l:Byte = (-1)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2653():void { var l:Byte = (-1)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2654():void { var l:Byte = (-1)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2655():void { var l:Byte = (-1)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2656():void { var l:Byte = (-1)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2657():void { var l:Byte = (-1)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2658():void { var l:Byte = (2.2)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w0))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2659():void { var l:Byte = (2.2)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2660():void { var l:Byte = (2.2)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2661():void { var l:Byte = (2.2)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2662():void { var l:Byte = (2.2)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w4))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2663():void { var l:Byte = (2.2)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2664():void { var l:Byte = (2.2)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2665():void { var l:Byte = (2.2)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2666():void { var l:Byte = (2.2)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((1))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2667():void { var l:Byte = (2.2)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-1))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2668():void { var l:Byte = (2.2)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2669():void { var l:Byte = (2.2)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2670():void { var l:Byte = (2.2)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((127))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2671():void { var l:Byte = (2.2)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-127))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2672():void { var l:Byte = (2.2)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((128))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2673():void { var l:Byte = (2.2)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-128))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2674():void { var l:Byte = (2.2)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((255))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2675():void { var l:Byte = (2.2)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-255))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2676():void { var l:Byte = (2.2)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((256))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2677():void { var l:Byte = (2.2)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-256))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2678():void { var l:Byte = (2.2)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((32767))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2679():void { var l:Byte = (2.2)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-32767))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2680():void { var l:Byte = (2.2)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((32768))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2681():void { var l:Byte = (2.2)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-32768))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2682():void { var l:Byte = (2.2)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((65535))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2683():void { var l:Byte = (2.2)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-65535))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2684():void { var l:Byte = (2.2)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((65536))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2685():void { var l:Byte = (2.2)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-65536))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2686():void { var l:Byte = (2.2)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((16777216))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2687():void { var l:Byte = (2.2)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-16777216))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2688():void { var l:Byte = (2.2)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((16777217))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2689():void { var l:Byte = (2.2)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-16777217))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2690():void { var l:Byte = (2.2)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((2147483647))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2691():void { var l:Byte = (2.2)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2692():void { var l:Byte = (-2.2)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w0))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2693():void { var l:Byte = (-2.2)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2694():void { var l:Byte = (-2.2)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2695():void { var l:Byte = (-2.2)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2696():void { var l:Byte = (-2.2)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w4))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2697():void { var l:Byte = (-2.2)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2698():void { var l:Byte = (-2.2)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2699():void { var l:Byte = (-2.2)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2700():void { var l:Byte = (-2.2)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((1))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2701():void { var l:Byte = (-2.2)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-1))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2702():void { var l:Byte = (-2.2)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2703():void { var l:Byte = (-2.2)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2704():void { var l:Byte = (-2.2)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((127))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2705():void { var l:Byte = (-2.2)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-127))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2706():void { var l:Byte = (-2.2)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((128))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2707():void { var l:Byte = (-2.2)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-128))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2708():void { var l:Byte = (-2.2)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((255))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2709():void { var l:Byte = (-2.2)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-255))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2710():void { var l:Byte = (-2.2)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((256))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2711():void { var l:Byte = (-2.2)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-256))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2712():void { var l:Byte = (-2.2)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((32767))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2713():void { var l:Byte = (-2.2)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-32767))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2714():void { var l:Byte = (-2.2)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((32768))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2715():void { var l:Byte = (-2.2)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-32768))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2716():void { var l:Byte = (-2.2)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((65535))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2717():void { var l:Byte = (-2.2)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-65535))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2718():void { var l:Byte = (-2.2)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((65536))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2719():void { var l:Byte = (-2.2)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-65536))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2720():void { var l:Byte = (-2.2)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((16777216))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2721():void { var l:Byte = (-2.2)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-16777216))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2722():void { var l:Byte = (-2.2)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((16777217))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2723():void { var l:Byte = (-2.2)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-16777217))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2724():void { var l:Byte = (-2.2)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((2147483647))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2725():void { var l:Byte = (-2.2)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2726():void { var l:Byte = (127)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((127)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2727():void { var l:Byte = (127)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((127)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2728():void { var l:Byte = (127)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2729():void { var l:Byte = (127)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2730():void { var l:Byte = (127)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((127)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2731():void { var l:Byte = (127)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2732():void { var l:Byte = (127)+(0); }
	def m2733():void { var l:Byte = (127)+(-0); }
	def m2734():void { var l:Byte = (127)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2735():void { var l:Byte = (127)+(-1); }
	def m2736():void { var l:Byte = (127)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((127)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2737():void { var l:Byte = (127)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((127)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2738():void { var l:Byte = (127)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2739():void { var l:Byte = (127)+(-127); }
	def m2740():void { var l:Byte = (127)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2741():void { var l:Byte = (127)+(-128); }
	def m2742():void { var l:Byte = (127)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2743():void { var l:Byte = (127)+(-255); }
	def m2744():void { var l:Byte = (127)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2745():void { var l:Byte = (127)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2746():void { var l:Byte = (127)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2747():void { var l:Byte = (127)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2748():void { var l:Byte = (127)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2749():void { var l:Byte = (127)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2750():void { var l:Byte = (127)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2751():void { var l:Byte = (127)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2752():void { var l:Byte = (127)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2753():void { var l:Byte = (127)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2754():void { var l:Byte = (127)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2755():void { var l:Byte = (127)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2756():void { var l:Byte = (127)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2757():void { var l:Byte = (127)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2758():void { var l:Byte = (127)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2759():void { var l:Byte = (127)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2760():void { var l:Byte = (-127)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-127)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2761():void { var l:Byte = (-127)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-127)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2762():void { var l:Byte = (-127)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2763():void { var l:Byte = (-127)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2764():void { var l:Byte = (-127)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-127)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2765():void { var l:Byte = (-127)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2766():void { var l:Byte = (-127)+(0); }
	def m2767():void { var l:Byte = (-127)+(-0); }
	def m2768():void { var l:Byte = (-127)+(1); }
	def m2769():void { var l:Byte = (-127)+(-1); }
	def m2770():void { var l:Byte = (-127)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-127)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2771():void { var l:Byte = (-127)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-127)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2772():void { var l:Byte = (-127)+(127); }
	def m2773():void { var l:Byte = (-127)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2774():void { var l:Byte = (-127)+(128); }
	def m2775():void { var l:Byte = (-127)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2776():void { var l:Byte = (-127)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2777():void { var l:Byte = (-127)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2778():void { var l:Byte = (-127)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2779():void { var l:Byte = (-127)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2780():void { var l:Byte = (-127)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2781():void { var l:Byte = (-127)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2782():void { var l:Byte = (-127)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2783():void { var l:Byte = (-127)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2784():void { var l:Byte = (-127)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2785():void { var l:Byte = (-127)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2786():void { var l:Byte = (-127)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2787():void { var l:Byte = (-127)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2788():void { var l:Byte = (-127)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2789():void { var l:Byte = (-127)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2790():void { var l:Byte = (-127)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2791():void { var l:Byte = (-127)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2792():void { var l:Byte = (-127)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2793():void { var l:Byte = (-127)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2794():void { var l:Byte = (128)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((128)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2795():void { var l:Byte = (128)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((128)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2796():void { var l:Byte = (128)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2797():void { var l:Byte = (128)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2798():void { var l:Byte = (128)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((128)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2799():void { var l:Byte = (128)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2800():void { var l:Byte = (128)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2801():void { var l:Byte = (128)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2802():void { var l:Byte = (128)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2803():void { var l:Byte = (128)+(-1); }
	def m2804():void { var l:Byte = (128)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((128)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2805():void { var l:Byte = (128)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((128)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2806():void { var l:Byte = (128)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2807():void { var l:Byte = (128)+(-127); }
	def m2808():void { var l:Byte = (128)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2809():void { var l:Byte = (128)+(-128); }
	def m2810():void { var l:Byte = (128)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2811():void { var l:Byte = (128)+(-255); }
	def m2812():void { var l:Byte = (128)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2813():void { var l:Byte = (128)+(-256); }
	def m2814():void { var l:Byte = (128)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2815():void { var l:Byte = (128)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2816():void { var l:Byte = (128)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2817():void { var l:Byte = (128)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2818():void { var l:Byte = (128)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2819():void { var l:Byte = (128)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2820():void { var l:Byte = (128)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2821():void { var l:Byte = (128)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2822():void { var l:Byte = (128)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2823():void { var l:Byte = (128)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2824():void { var l:Byte = (128)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2825():void { var l:Byte = (128)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2826():void { var l:Byte = (128)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2827():void { var l:Byte = (128)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2828():void { var l:Byte = (-128)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-128)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2829():void { var l:Byte = (-128)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-128)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2830():void { var l:Byte = (-128)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2831():void { var l:Byte = (-128)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2832():void { var l:Byte = (-128)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-128)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2833():void { var l:Byte = (-128)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2834():void { var l:Byte = (-128)+(0); }
	def m2835():void { var l:Byte = (-128)+(-0); }
	def m2836():void { var l:Byte = (-128)+(1); }
	def m2837():void { var l:Byte = (-128)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2838():void { var l:Byte = (-128)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-128)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2839():void { var l:Byte = (-128)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-128)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2840():void { var l:Byte = (-128)+(127); }
	def m2841():void { var l:Byte = (-128)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2842():void { var l:Byte = (-128)+(128); }
	def m2843():void { var l:Byte = (-128)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2844():void { var l:Byte = (-128)+(255); }
	def m2845():void { var l:Byte = (-128)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2846():void { var l:Byte = (-128)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2847():void { var l:Byte = (-128)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2848():void { var l:Byte = (-128)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2849():void { var l:Byte = (-128)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2850():void { var l:Byte = (-128)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2851():void { var l:Byte = (-128)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2852():void { var l:Byte = (-128)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2853():void { var l:Byte = (-128)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2854():void { var l:Byte = (-128)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2855():void { var l:Byte = (-128)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2856():void { var l:Byte = (-128)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2857():void { var l:Byte = (-128)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2858():void { var l:Byte = (-128)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2859():void { var l:Byte = (-128)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2860():void { var l:Byte = (-128)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2861():void { var l:Byte = (-128)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2862():void { var l:Byte = (255)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((255)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2863():void { var l:Byte = (255)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((255)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2864():void { var l:Byte = (255)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2865():void { var l:Byte = (255)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2866():void { var l:Byte = (255)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((255)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2867():void { var l:Byte = (255)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2868():void { var l:Byte = (255)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2869():void { var l:Byte = (255)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2870():void { var l:Byte = (255)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2871():void { var l:Byte = (255)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2872():void { var l:Byte = (255)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((255)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2873():void { var l:Byte = (255)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((255)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2874():void { var l:Byte = (255)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2875():void { var l:Byte = (255)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2876():void { var l:Byte = (255)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2877():void { var l:Byte = (255)+(-128); }
	def m2878():void { var l:Byte = (255)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2879():void { var l:Byte = (255)+(-255); }
	def m2880():void { var l:Byte = (255)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2881():void { var l:Byte = (255)+(-256); }
	def m2882():void { var l:Byte = (255)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2883():void { var l:Byte = (255)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2884():void { var l:Byte = (255)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2885():void { var l:Byte = (255)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2886():void { var l:Byte = (255)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2887():void { var l:Byte = (255)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2888():void { var l:Byte = (255)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2889():void { var l:Byte = (255)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2890():void { var l:Byte = (255)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2891():void { var l:Byte = (255)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2892():void { var l:Byte = (255)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2893():void { var l:Byte = (255)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2894():void { var l:Byte = (255)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2895():void { var l:Byte = (255)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2896():void { var l:Byte = (-255)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-255)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2897():void { var l:Byte = (-255)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-255)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2898():void { var l:Byte = (-255)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2899():void { var l:Byte = (-255)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2900():void { var l:Byte = (-255)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-255)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2901():void { var l:Byte = (-255)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2902():void { var l:Byte = (-255)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2903():void { var l:Byte = (-255)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2904():void { var l:Byte = (-255)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2905():void { var l:Byte = (-255)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2906():void { var l:Byte = (-255)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-255)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2907():void { var l:Byte = (-255)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-255)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2908():void { var l:Byte = (-255)+(127); }
	def m2909():void { var l:Byte = (-255)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2910():void { var l:Byte = (-255)+(128); }
	def m2911():void { var l:Byte = (-255)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2912():void { var l:Byte = (-255)+(255); }
	def m2913():void { var l:Byte = (-255)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2914():void { var l:Byte = (-255)+(256); }
	def m2915():void { var l:Byte = (-255)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2916():void { var l:Byte = (-255)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2917():void { var l:Byte = (-255)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2918():void { var l:Byte = (-255)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2919():void { var l:Byte = (-255)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2920():void { var l:Byte = (-255)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2921():void { var l:Byte = (-255)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2922():void { var l:Byte = (-255)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2923():void { var l:Byte = (-255)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2924():void { var l:Byte = (-255)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2925():void { var l:Byte = (-255)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2926():void { var l:Byte = (-255)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2927():void { var l:Byte = (-255)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2928():void { var l:Byte = (-255)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2929():void { var l:Byte = (-255)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2930():void { var l:Byte = (256)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((256)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2931():void { var l:Byte = (256)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((256)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2932():void { var l:Byte = (256)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2933():void { var l:Byte = (256)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2934():void { var l:Byte = (256)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((256)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2935():void { var l:Byte = (256)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2936():void { var l:Byte = (256)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2937():void { var l:Byte = (256)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2938():void { var l:Byte = (256)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2939():void { var l:Byte = (256)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2940():void { var l:Byte = (256)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((256)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2941():void { var l:Byte = (256)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((256)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2942():void { var l:Byte = (256)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2943():void { var l:Byte = (256)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2944():void { var l:Byte = (256)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2945():void { var l:Byte = (256)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2946():void { var l:Byte = (256)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2947():void { var l:Byte = (256)+(-255); }
	def m2948():void { var l:Byte = (256)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2949():void { var l:Byte = (256)+(-256); }
	def m2950():void { var l:Byte = (256)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2951():void { var l:Byte = (256)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2952():void { var l:Byte = (256)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2953():void { var l:Byte = (256)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2954():void { var l:Byte = (256)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2955():void { var l:Byte = (256)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2956():void { var l:Byte = (256)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2957():void { var l:Byte = (256)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2958():void { var l:Byte = (256)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2959():void { var l:Byte = (256)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2960():void { var l:Byte = (256)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2961():void { var l:Byte = (256)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2962():void { var l:Byte = (256)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2963():void { var l:Byte = (256)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2964():void { var l:Byte = (-256)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-256)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2965():void { var l:Byte = (-256)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-256)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2966():void { var l:Byte = (-256)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2967():void { var l:Byte = (-256)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2968():void { var l:Byte = (-256)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-256)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m2969():void { var l:Byte = (-256)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2970():void { var l:Byte = (-256)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2971():void { var l:Byte = (-256)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2972():void { var l:Byte = (-256)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2973():void { var l:Byte = (-256)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2974():void { var l:Byte = (-256)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-256)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2975():void { var l:Byte = (-256)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-256)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m2976():void { var l:Byte = (-256)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2977():void { var l:Byte = (-256)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2978():void { var l:Byte = (-256)+(128); }
	def m2979():void { var l:Byte = (-256)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2980():void { var l:Byte = (-256)+(255); }
	def m2981():void { var l:Byte = (-256)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2982():void { var l:Byte = (-256)+(256); }
	def m2983():void { var l:Byte = (-256)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2984():void { var l:Byte = (-256)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2985():void { var l:Byte = (-256)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2986():void { var l:Byte = (-256)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2987():void { var l:Byte = (-256)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2988():void { var l:Byte = (-256)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2989():void { var l:Byte = (-256)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2990():void { var l:Byte = (-256)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2991():void { var l:Byte = (-256)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2992():void { var l:Byte = (-256)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2993():void { var l:Byte = (-256)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2994():void { var l:Byte = (-256)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2995():void { var l:Byte = (-256)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2996():void { var l:Byte = (-256)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2997():void { var l:Byte = (-256)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m2998():void { var l:Byte = (32767)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((32767)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m2999():void { var l:Byte = (32767)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32767)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3000():void { var l:Byte = (32767)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3001():void { var l:Byte = (32767)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3002():void { var l:Byte = (32767)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((32767)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m3003():void { var l:Byte = (32767)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3004():void { var l:Byte = (32767)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3005():void { var l:Byte = (32767)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3006():void { var l:Byte = (32767)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3007():void { var l:Byte = (32767)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3008():void { var l:Byte = (32767)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32767)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3009():void { var l:Byte = (32767)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32767)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3010():void { var l:Byte = (32767)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3011():void { var l:Byte = (32767)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3012():void { var l:Byte = (32767)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3013():void { var l:Byte = (32767)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3014():void { var l:Byte = (32767)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3015():void { var l:Byte = (32767)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3016():void { var l:Byte = (32767)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3017():void { var l:Byte = (32767)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3018():void { var l:Byte = (32767)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3019():void { var l:Byte = (32767)+(-32767); }
	def m3020():void { var l:Byte = (32767)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3021():void { var l:Byte = (32767)+(-32768); }
	def m3022():void { var l:Byte = (32767)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3023():void { var l:Byte = (32767)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3024():void { var l:Byte = (32767)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3025():void { var l:Byte = (32767)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3026():void { var l:Byte = (32767)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3027():void { var l:Byte = (32767)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3028():void { var l:Byte = (32767)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3029():void { var l:Byte = (32767)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3030():void { var l:Byte = (32767)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3031():void { var l:Byte = (32767)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3032():void { var l:Byte = (-32767)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-32767)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m3033():void { var l:Byte = (-32767)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32767)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3034():void { var l:Byte = (-32767)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3035():void { var l:Byte = (-32767)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3036():void { var l:Byte = (-32767)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-32767)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m3037():void { var l:Byte = (-32767)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3038():void { var l:Byte = (-32767)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3039():void { var l:Byte = (-32767)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3040():void { var l:Byte = (-32767)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3041():void { var l:Byte = (-32767)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3042():void { var l:Byte = (-32767)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32767)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3043():void { var l:Byte = (-32767)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32767)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3044():void { var l:Byte = (-32767)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3045():void { var l:Byte = (-32767)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3046():void { var l:Byte = (-32767)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3047():void { var l:Byte = (-32767)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3048():void { var l:Byte = (-32767)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3049():void { var l:Byte = (-32767)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3050():void { var l:Byte = (-32767)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3051():void { var l:Byte = (-32767)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3052():void { var l:Byte = (-32767)+(32767); }
	def m3053():void { var l:Byte = (-32767)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3054():void { var l:Byte = (-32767)+(32768); }
	def m3055():void { var l:Byte = (-32767)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3056():void { var l:Byte = (-32767)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3057():void { var l:Byte = (-32767)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3058():void { var l:Byte = (-32767)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3059():void { var l:Byte = (-32767)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3060():void { var l:Byte = (-32767)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3061():void { var l:Byte = (-32767)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3062():void { var l:Byte = (-32767)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3063():void { var l:Byte = (-32767)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3064():void { var l:Byte = (-32767)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3065():void { var l:Byte = (-32767)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3066():void { var l:Byte = (32768)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((32768)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m3067():void { var l:Byte = (32768)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32768)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3068():void { var l:Byte = (32768)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3069():void { var l:Byte = (32768)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3070():void { var l:Byte = (32768)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((32768)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m3071():void { var l:Byte = (32768)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3072():void { var l:Byte = (32768)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3073():void { var l:Byte = (32768)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3074():void { var l:Byte = (32768)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3075():void { var l:Byte = (32768)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3076():void { var l:Byte = (32768)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32768)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3077():void { var l:Byte = (32768)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32768)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3078():void { var l:Byte = (32768)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3079():void { var l:Byte = (32768)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3080():void { var l:Byte = (32768)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3081():void { var l:Byte = (32768)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3082():void { var l:Byte = (32768)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3083():void { var l:Byte = (32768)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3084():void { var l:Byte = (32768)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3085():void { var l:Byte = (32768)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3086():void { var l:Byte = (32768)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3087():void { var l:Byte = (32768)+(-32767); }
	def m3088():void { var l:Byte = (32768)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3089():void { var l:Byte = (32768)+(-32768); }
	def m3090():void { var l:Byte = (32768)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3091():void { var l:Byte = (32768)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3092():void { var l:Byte = (32768)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3093():void { var l:Byte = (32768)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3094():void { var l:Byte = (32768)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3095():void { var l:Byte = (32768)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3096():void { var l:Byte = (32768)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3097():void { var l:Byte = (32768)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3098():void { var l:Byte = (32768)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3099():void { var l:Byte = (32768)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3100():void { var l:Byte = (-32768)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-32768)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m3101():void { var l:Byte = (-32768)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32768)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3102():void { var l:Byte = (-32768)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3103():void { var l:Byte = (-32768)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3104():void { var l:Byte = (-32768)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-32768)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m3105():void { var l:Byte = (-32768)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3106():void { var l:Byte = (-32768)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3107():void { var l:Byte = (-32768)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3108():void { var l:Byte = (-32768)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3109():void { var l:Byte = (-32768)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3110():void { var l:Byte = (-32768)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32768)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3111():void { var l:Byte = (-32768)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32768)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3112():void { var l:Byte = (-32768)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3113():void { var l:Byte = (-32768)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3114():void { var l:Byte = (-32768)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3115():void { var l:Byte = (-32768)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3116():void { var l:Byte = (-32768)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3117():void { var l:Byte = (-32768)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3118():void { var l:Byte = (-32768)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3119():void { var l:Byte = (-32768)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3120():void { var l:Byte = (-32768)+(32767); }
	def m3121():void { var l:Byte = (-32768)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3122():void { var l:Byte = (-32768)+(32768); }
	def m3123():void { var l:Byte = (-32768)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3124():void { var l:Byte = (-32768)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3125():void { var l:Byte = (-32768)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3126():void { var l:Byte = (-32768)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3127():void { var l:Byte = (-32768)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3128():void { var l:Byte = (-32768)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3129():void { var l:Byte = (-32768)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3130():void { var l:Byte = (-32768)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3131():void { var l:Byte = (-32768)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3132():void { var l:Byte = (-32768)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3133():void { var l:Byte = (-32768)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3134():void { var l:Byte = (65535)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((65535)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m3135():void { var l:Byte = (65535)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65535)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3136():void { var l:Byte = (65535)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3137():void { var l:Byte = (65535)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3138():void { var l:Byte = (65535)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((65535)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m3139():void { var l:Byte = (65535)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3140():void { var l:Byte = (65535)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3141():void { var l:Byte = (65535)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3142():void { var l:Byte = (65535)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3143():void { var l:Byte = (65535)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3144():void { var l:Byte = (65535)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65535)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3145():void { var l:Byte = (65535)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65535)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3146():void { var l:Byte = (65535)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3147():void { var l:Byte = (65535)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3148():void { var l:Byte = (65535)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3149():void { var l:Byte = (65535)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3150():void { var l:Byte = (65535)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3151():void { var l:Byte = (65535)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3152():void { var l:Byte = (65535)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3153():void { var l:Byte = (65535)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3154():void { var l:Byte = (65535)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3155():void { var l:Byte = (65535)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3156():void { var l:Byte = (65535)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3157():void { var l:Byte = (65535)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3158():void { var l:Byte = (65535)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3159():void { var l:Byte = (65535)+(-65535); }
	def m3160():void { var l:Byte = (65535)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3161():void { var l:Byte = (65535)+(-65536); }
	def m3162():void { var l:Byte = (65535)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3163():void { var l:Byte = (65535)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3164():void { var l:Byte = (65535)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3165():void { var l:Byte = (65535)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3166():void { var l:Byte = (65535)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3167():void { var l:Byte = (65535)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3168():void { var l:Byte = (-65535)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-65535)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m3169():void { var l:Byte = (-65535)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65535)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3170():void { var l:Byte = (-65535)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3171():void { var l:Byte = (-65535)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3172():void { var l:Byte = (-65535)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-65535)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m3173():void { var l:Byte = (-65535)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3174():void { var l:Byte = (-65535)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3175():void { var l:Byte = (-65535)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3176():void { var l:Byte = (-65535)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3177():void { var l:Byte = (-65535)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3178():void { var l:Byte = (-65535)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65535)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3179():void { var l:Byte = (-65535)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65535)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3180():void { var l:Byte = (-65535)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3181():void { var l:Byte = (-65535)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3182():void { var l:Byte = (-65535)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3183():void { var l:Byte = (-65535)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3184():void { var l:Byte = (-65535)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3185():void { var l:Byte = (-65535)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3186():void { var l:Byte = (-65535)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3187():void { var l:Byte = (-65535)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3188():void { var l:Byte = (-65535)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3189():void { var l:Byte = (-65535)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3190():void { var l:Byte = (-65535)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3191():void { var l:Byte = (-65535)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3192():void { var l:Byte = (-65535)+(65535); }
	def m3193():void { var l:Byte = (-65535)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3194():void { var l:Byte = (-65535)+(65536); }
	def m3195():void { var l:Byte = (-65535)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3196():void { var l:Byte = (-65535)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3197():void { var l:Byte = (-65535)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3198():void { var l:Byte = (-65535)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3199():void { var l:Byte = (-65535)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3200():void { var l:Byte = (-65535)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3201():void { var l:Byte = (-65535)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3202():void { var l:Byte = (65536)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((65536)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m3203():void { var l:Byte = (65536)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65536)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3204():void { var l:Byte = (65536)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3205():void { var l:Byte = (65536)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3206():void { var l:Byte = (65536)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((65536)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m3207():void { var l:Byte = (65536)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3208():void { var l:Byte = (65536)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3209():void { var l:Byte = (65536)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3210():void { var l:Byte = (65536)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3211():void { var l:Byte = (65536)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3212():void { var l:Byte = (65536)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65536)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3213():void { var l:Byte = (65536)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65536)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3214():void { var l:Byte = (65536)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3215():void { var l:Byte = (65536)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3216():void { var l:Byte = (65536)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3217():void { var l:Byte = (65536)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3218():void { var l:Byte = (65536)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3219():void { var l:Byte = (65536)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3220():void { var l:Byte = (65536)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3221():void { var l:Byte = (65536)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3222():void { var l:Byte = (65536)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3223():void { var l:Byte = (65536)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3224():void { var l:Byte = (65536)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3225():void { var l:Byte = (65536)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3226():void { var l:Byte = (65536)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3227():void { var l:Byte = (65536)+(-65535); }
	def m3228():void { var l:Byte = (65536)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3229():void { var l:Byte = (65536)+(-65536); }
	def m3230():void { var l:Byte = (65536)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3231():void { var l:Byte = (65536)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3232():void { var l:Byte = (65536)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3233():void { var l:Byte = (65536)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3234():void { var l:Byte = (65536)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3235():void { var l:Byte = (65536)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3236():void { var l:Byte = (-65536)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-65536)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m3237():void { var l:Byte = (-65536)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65536)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3238():void { var l:Byte = (-65536)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3239():void { var l:Byte = (-65536)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3240():void { var l:Byte = (-65536)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-65536)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m3241():void { var l:Byte = (-65536)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3242():void { var l:Byte = (-65536)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3243():void { var l:Byte = (-65536)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3244():void { var l:Byte = (-65536)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3245():void { var l:Byte = (-65536)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3246():void { var l:Byte = (-65536)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65536)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3247():void { var l:Byte = (-65536)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65536)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3248():void { var l:Byte = (-65536)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3249():void { var l:Byte = (-65536)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3250():void { var l:Byte = (-65536)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3251():void { var l:Byte = (-65536)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3252():void { var l:Byte = (-65536)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3253():void { var l:Byte = (-65536)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3254():void { var l:Byte = (-65536)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3255():void { var l:Byte = (-65536)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3256():void { var l:Byte = (-65536)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3257():void { var l:Byte = (-65536)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3258():void { var l:Byte = (-65536)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3259():void { var l:Byte = (-65536)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3260():void { var l:Byte = (-65536)+(65535); }
	def m3261():void { var l:Byte = (-65536)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3262():void { var l:Byte = (-65536)+(65536); }
	def m3263():void { var l:Byte = (-65536)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3264():void { var l:Byte = (-65536)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3265():void { var l:Byte = (-65536)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3266():void { var l:Byte = (-65536)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3267():void { var l:Byte = (-65536)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3268():void { var l:Byte = (-65536)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3269():void { var l:Byte = (-65536)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3270():void { var l:Byte = (16777216)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((16777216)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m3271():void { var l:Byte = (16777216)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777216)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3272():void { var l:Byte = (16777216)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3273():void { var l:Byte = (16777216)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3274():void { var l:Byte = (16777216)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((16777216)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m3275():void { var l:Byte = (16777216)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3276():void { var l:Byte = (16777216)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3277():void { var l:Byte = (16777216)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3278():void { var l:Byte = (16777216)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3279():void { var l:Byte = (16777216)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3280():void { var l:Byte = (16777216)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777216)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3281():void { var l:Byte = (16777216)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777216)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3282():void { var l:Byte = (16777216)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3283():void { var l:Byte = (16777216)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3284():void { var l:Byte = (16777216)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3285():void { var l:Byte = (16777216)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3286():void { var l:Byte = (16777216)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3287():void { var l:Byte = (16777216)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3288():void { var l:Byte = (16777216)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3289():void { var l:Byte = (16777216)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3290():void { var l:Byte = (16777216)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3291():void { var l:Byte = (16777216)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3292():void { var l:Byte = (16777216)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3293():void { var l:Byte = (16777216)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3294():void { var l:Byte = (16777216)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3295():void { var l:Byte = (16777216)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3296():void { var l:Byte = (16777216)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3297():void { var l:Byte = (16777216)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3298():void { var l:Byte = (16777216)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3299():void { var l:Byte = (16777216)+(-16777216); }
	def m3300():void { var l:Byte = (16777216)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3301():void { var l:Byte = (16777216)+(-16777217); }
	def m3302():void { var l:Byte = (16777216)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3303():void { var l:Byte = (16777216)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3304():void { var l:Byte = (-16777216)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-16777216)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m3305():void { var l:Byte = (-16777216)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777216)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3306():void { var l:Byte = (-16777216)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3307():void { var l:Byte = (-16777216)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3308():void { var l:Byte = (-16777216)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-16777216)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m3309():void { var l:Byte = (-16777216)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3310():void { var l:Byte = (-16777216)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3311():void { var l:Byte = (-16777216)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3312():void { var l:Byte = (-16777216)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3313():void { var l:Byte = (-16777216)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3314():void { var l:Byte = (-16777216)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777216)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3315():void { var l:Byte = (-16777216)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777216)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3316():void { var l:Byte = (-16777216)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3317():void { var l:Byte = (-16777216)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3318():void { var l:Byte = (-16777216)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3319():void { var l:Byte = (-16777216)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3320():void { var l:Byte = (-16777216)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3321():void { var l:Byte = (-16777216)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3322():void { var l:Byte = (-16777216)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3323():void { var l:Byte = (-16777216)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3324():void { var l:Byte = (-16777216)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3325():void { var l:Byte = (-16777216)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3326():void { var l:Byte = (-16777216)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3327():void { var l:Byte = (-16777216)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3328():void { var l:Byte = (-16777216)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3329():void { var l:Byte = (-16777216)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3330():void { var l:Byte = (-16777216)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3331():void { var l:Byte = (-16777216)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3332():void { var l:Byte = (-16777216)+(16777216); }
	def m3333():void { var l:Byte = (-16777216)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3334():void { var l:Byte = (-16777216)+(16777217); }
	def m3335():void { var l:Byte = (-16777216)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3336():void { var l:Byte = (-16777216)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3337():void { var l:Byte = (-16777216)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3338():void { var l:Byte = (16777217)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((16777217)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m3339():void { var l:Byte = (16777217)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777217)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3340():void { var l:Byte = (16777217)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3341():void { var l:Byte = (16777217)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3342():void { var l:Byte = (16777217)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((16777217)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m3343():void { var l:Byte = (16777217)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3344():void { var l:Byte = (16777217)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3345():void { var l:Byte = (16777217)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3346():void { var l:Byte = (16777217)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3347():void { var l:Byte = (16777217)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3348():void { var l:Byte = (16777217)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777217)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3349():void { var l:Byte = (16777217)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777217)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3350():void { var l:Byte = (16777217)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3351():void { var l:Byte = (16777217)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3352():void { var l:Byte = (16777217)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3353():void { var l:Byte = (16777217)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3354():void { var l:Byte = (16777217)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3355():void { var l:Byte = (16777217)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3356():void { var l:Byte = (16777217)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3357():void { var l:Byte = (16777217)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3358():void { var l:Byte = (16777217)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3359():void { var l:Byte = (16777217)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3360():void { var l:Byte = (16777217)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3361():void { var l:Byte = (16777217)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3362():void { var l:Byte = (16777217)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3363():void { var l:Byte = (16777217)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3364():void { var l:Byte = (16777217)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3365():void { var l:Byte = (16777217)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3366():void { var l:Byte = (16777217)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3367():void { var l:Byte = (16777217)+(-16777216); }
	def m3368():void { var l:Byte = (16777217)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3369():void { var l:Byte = (16777217)+(-16777217); }
	def m3370():void { var l:Byte = (16777217)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3371():void { var l:Byte = (16777217)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3372():void { var l:Byte = (-16777217)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-16777217)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m3373():void { var l:Byte = (-16777217)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777217)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3374():void { var l:Byte = (-16777217)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3375():void { var l:Byte = (-16777217)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3376():void { var l:Byte = (-16777217)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-16777217)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m3377():void { var l:Byte = (-16777217)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3378():void { var l:Byte = (-16777217)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3379():void { var l:Byte = (-16777217)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3380():void { var l:Byte = (-16777217)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3381():void { var l:Byte = (-16777217)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3382():void { var l:Byte = (-16777217)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777217)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3383():void { var l:Byte = (-16777217)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777217)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3384():void { var l:Byte = (-16777217)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3385():void { var l:Byte = (-16777217)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3386():void { var l:Byte = (-16777217)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3387():void { var l:Byte = (-16777217)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3388():void { var l:Byte = (-16777217)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3389():void { var l:Byte = (-16777217)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3390():void { var l:Byte = (-16777217)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3391():void { var l:Byte = (-16777217)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3392():void { var l:Byte = (-16777217)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3393():void { var l:Byte = (-16777217)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3394():void { var l:Byte = (-16777217)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3395():void { var l:Byte = (-16777217)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3396():void { var l:Byte = (-16777217)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3397():void { var l:Byte = (-16777217)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3398():void { var l:Byte = (-16777217)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3399():void { var l:Byte = (-16777217)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3400():void { var l:Byte = (-16777217)+(16777216); }
	def m3401():void { var l:Byte = (-16777217)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3402():void { var l:Byte = (-16777217)+(16777217); }
	def m3403():void { var l:Byte = (-16777217)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3404():void { var l:Byte = (-16777217)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3405():void { var l:Byte = (-16777217)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-2147483647)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3406():void { var l:Byte = (2147483647)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((2147483647)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m3407():void { var l:Byte = (2147483647)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((2147483647)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3408():void { var l:Byte = (2147483647)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3409():void { var l:Byte = (2147483647)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3410():void { var l:Byte = (2147483647)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((2147483647)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m3411():void { var l:Byte = (2147483647)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3412():void { var l:Byte = (2147483647)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3413():void { var l:Byte = (2147483647)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3414():void { var l:Byte = (2147483647)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3415():void { var l:Byte = (2147483647)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3416():void { var l:Byte = (2147483647)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((2147483647)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3417():void { var l:Byte = (2147483647)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((2147483647)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3418():void { var l:Byte = (2147483647)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3419():void { var l:Byte = (2147483647)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3420():void { var l:Byte = (2147483647)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3421():void { var l:Byte = (2147483647)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3422():void { var l:Byte = (2147483647)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3423():void { var l:Byte = (2147483647)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3424():void { var l:Byte = (2147483647)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3425():void { var l:Byte = (2147483647)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3426():void { var l:Byte = (2147483647)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3427():void { var l:Byte = (2147483647)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3428():void { var l:Byte = (2147483647)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3429():void { var l:Byte = (2147483647)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3430():void { var l:Byte = (2147483647)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3431():void { var l:Byte = (2147483647)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3432():void { var l:Byte = (2147483647)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3433():void { var l:Byte = (2147483647)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3434():void { var l:Byte = (2147483647)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3435():void { var l:Byte = (2147483647)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3436():void { var l:Byte = (2147483647)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3437():void { var l:Byte = (2147483647)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3438():void { var l:Byte = (2147483647)+(2147483647); }
	def m3439():void { var l:Byte = (2147483647)+(-2147483647); }
	def m3440():void { var l:Byte = (-2147483647)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-2147483647)) + (SignedTests.this.w0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Float)
	def m3441():void { var l:Byte = (-2147483647)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-2147483647)) + (SignedTests.this.w1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3442():void { var l:Byte = (-2147483647)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3443():void { var l:Byte = (-2147483647)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (SignedTests.this.w3)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3444():void { var l:Byte = (-2147483647)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-2147483647)) + (SignedTests.this.w4)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Long)
	def m3445():void { var l:Byte = (-2147483647)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3446():void { var l:Byte = (-2147483647)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3447():void { var l:Byte = (-2147483647)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (0)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3448():void { var l:Byte = (-2147483647)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3449():void { var l:Byte = (-2147483647)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-1)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3450():void { var l:Byte = (-2147483647)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-2147483647)) + (2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3451():void { var l:Byte = (-2147483647)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-2147483647)) + (-2.2)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Double)
	def m3452():void { var l:Byte = (-2147483647)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3453():void { var l:Byte = (-2147483647)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-127)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3454():void { var l:Byte = (-2147483647)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3455():void { var l:Byte = (-2147483647)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-128)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3456():void { var l:Byte = (-2147483647)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3457():void { var l:Byte = (-2147483647)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-255)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3458():void { var l:Byte = (-2147483647)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3459():void { var l:Byte = (-2147483647)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-256)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3460():void { var l:Byte = (-2147483647)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3461():void { var l:Byte = (-2147483647)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-32767)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3462():void { var l:Byte = (-2147483647)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3463():void { var l:Byte = (-2147483647)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-32768)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3464():void { var l:Byte = (-2147483647)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3465():void { var l:Byte = (-2147483647)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-65535)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3466():void { var l:Byte = (-2147483647)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3467():void { var l:Byte = (-2147483647)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-65536)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3468():void { var l:Byte = (-2147483647)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3469():void { var l:Byte = (-2147483647)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-16777216)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3470():void { var l:Byte = (-2147483647)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3471():void { var l:Byte = (-2147483647)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-16777217)		 Expected type: x10.lang.Byte		 Found type: x10.lang.Int)
	def m3472():void { var l:Byte = (-2147483647)+(2147483647); }
	def m3473():void { var l:Byte = (-2147483647)+(-2147483647); }
	def m3474():void { var l:Int = (w0)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3475():void { var l:Int = (w0)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w0)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3476():void { var l:Int = (w0)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3477():void { var l:Int = (w0)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3478():void { var l:Int = (w0)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((SignedTests.this.w4))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3479():void { var l:Int = (w0)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3480():void { var l:Int = (w0)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((0))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3481():void { var l:Int = (w0)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((0))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3482():void { var l:Int = (w0)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((1))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3483():void { var l:Int = (w0)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-1))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3484():void { var l:Int = (w0)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w0)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3485():void { var l:Int = (w0)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w0)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3486():void { var l:Int = (w0)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((127))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3487():void { var l:Int = (w0)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-127))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3488():void { var l:Int = (w0)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((128))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3489():void { var l:Int = (w0)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-128))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3490():void { var l:Int = (w0)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((255))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3491():void { var l:Int = (w0)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-255))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3492():void { var l:Int = (w0)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((256))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3493():void { var l:Int = (w0)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-256))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3494():void { var l:Int = (w0)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((32767))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3495():void { var l:Int = (w0)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-32767))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3496():void { var l:Int = (w0)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((32768))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3497():void { var l:Int = (w0)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-32768))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3498():void { var l:Int = (w0)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((65535))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3499():void { var l:Int = (w0)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-65535))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3500():void { var l:Int = (w0)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((65536))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3501():void { var l:Int = (w0)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-65536))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3502():void { var l:Int = (w0)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((16777216))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3503():void { var l:Int = (w0)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-16777216))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3504():void { var l:Int = (w0)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((16777217))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3505():void { var l:Int = (w0)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-16777217))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3506():void { var l:Int = (w0)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((2147483647))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3507():void { var l:Int = (w0)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3508():void { var l:Int = (w1)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w0))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3509():void { var l:Int = (w1)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3510():void { var l:Int = (w1)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3511():void { var l:Int = (w1)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3512():void { var l:Int = (w1)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w4))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3513():void { var l:Int = (w1)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3514():void { var l:Int = (w1)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3515():void { var l:Int = (w1)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3516():void { var l:Int = (w1)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((1))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3517():void { var l:Int = (w1)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-1))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3518():void { var l:Int = (w1)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3519():void { var l:Int = (w1)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3520():void { var l:Int = (w1)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((127))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3521():void { var l:Int = (w1)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-127))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3522():void { var l:Int = (w1)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((128))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3523():void { var l:Int = (w1)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-128))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3524():void { var l:Int = (w1)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((255))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3525():void { var l:Int = (w1)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-255))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3526():void { var l:Int = (w1)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((256))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3527():void { var l:Int = (w1)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-256))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3528():void { var l:Int = (w1)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((32767))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3529():void { var l:Int = (w1)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-32767))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3530():void { var l:Int = (w1)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((32768))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3531():void { var l:Int = (w1)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-32768))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3532():void { var l:Int = (w1)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((65535))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3533():void { var l:Int = (w1)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-65535))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3534():void { var l:Int = (w1)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((65536))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3535():void { var l:Int = (w1)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-65536))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3536():void { var l:Int = (w1)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((16777216))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3537():void { var l:Int = (w1)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-16777216))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3538():void { var l:Int = (w1)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((16777217))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3539():void { var l:Int = (w1)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-16777217))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3540():void { var l:Int = (w1)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((2147483647))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3541():void { var l:Int = (w1)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3542():void { var l:Int = (w2)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((SignedTests.this.w2)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3543():void { var l:Int = (w2)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w2)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3544():void { var l:Int = (w2)+(w2); }
	def m3545():void { var l:Int = (w2)+(w3); }
	def m3546():void { var l:Int = (w2)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((SignedTests.this.w2)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3547():void { var l:Int = (w2)+(w5); }
	def m3548():void { var l:Int = (w2)+(0); }
	def m3549():void { var l:Int = (w2)+(-0); }
	def m3550():void { var l:Int = (w2)+(1); }
	def m3551():void { var l:Int = (w2)+(-1); }
	def m3552():void { var l:Int = (w2)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w2)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3553():void { var l:Int = (w2)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w2)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3554():void { var l:Int = (w2)+(127); }
	def m3555():void { var l:Int = (w2)+(-127); }
	def m3556():void { var l:Int = (w2)+(128); }
	def m3557():void { var l:Int = (w2)+(-128); }
	def m3558():void { var l:Int = (w2)+(255); }
	def m3559():void { var l:Int = (w2)+(-255); }
	def m3560():void { var l:Int = (w2)+(256); }
	def m3561():void { var l:Int = (w2)+(-256); }
	def m3562():void { var l:Int = (w2)+(32767); }
	def m3563():void { var l:Int = (w2)+(-32767); }
	def m3564():void { var l:Int = (w2)+(32768); }
	def m3565():void { var l:Int = (w2)+(-32768); }
	def m3566():void { var l:Int = (w2)+(65535); }
	def m3567():void { var l:Int = (w2)+(-65535); }
	def m3568():void { var l:Int = (w2)+(65536); }
	def m3569():void { var l:Int = (w2)+(-65536); }
	def m3570():void { var l:Int = (w2)+(16777216); }
	def m3571():void { var l:Int = (w2)+(-16777216); }
	def m3572():void { var l:Int = (w2)+(16777217); }
	def m3573():void { var l:Int = (w2)+(-16777217); }
	def m3574():void { var l:Int = (w2)+(2147483647); }
	def m3575():void { var l:Int = (w2)+(-2147483647); }
	def m3576():void { var l:Int = (w3)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((SignedTests.this.w3)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3577():void { var l:Int = (w3)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w3)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3578():void { var l:Int = (w3)+(w2); }
	def m3579():void { var l:Int = (w3)+(w3); }
	def m3580():void { var l:Int = (w3)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((SignedTests.this.w3)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3581():void { var l:Int = (w3)+(w5); }
	def m3582():void { var l:Int = (w3)+(0); }
	def m3583():void { var l:Int = (w3)+(-0); }
	def m3584():void { var l:Int = (w3)+(1); }
	def m3585():void { var l:Int = (w3)+(-1); }
	def m3586():void { var l:Int = (w3)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w3)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3587():void { var l:Int = (w3)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w3)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3588():void { var l:Int = (w3)+(127); }
	def m3589():void { var l:Int = (w3)+(-127); }
	def m3590():void { var l:Int = (w3)+(128); }
	def m3591():void { var l:Int = (w3)+(-128); }
	def m3592():void { var l:Int = (w3)+(255); }
	def m3593():void { var l:Int = (w3)+(-255); }
	def m3594():void { var l:Int = (w3)+(256); }
	def m3595():void { var l:Int = (w3)+(-256); }
	def m3596():void { var l:Int = (w3)+(32767); }
	def m3597():void { var l:Int = (w3)+(-32767); }
	def m3598():void { var l:Int = (w3)+(32768); }
	def m3599():void { var l:Int = (w3)+(-32768); }
	def m3600():void { var l:Int = (w3)+(65535); }
	def m3601():void { var l:Int = (w3)+(-65535); }
	def m3602():void { var l:Int = (w3)+(65536); }
	def m3603():void { var l:Int = (w3)+(-65536); }
	def m3604():void { var l:Int = (w3)+(16777216); }
	def m3605():void { var l:Int = (w3)+(-16777216); }
	def m3606():void { var l:Int = (w3)+(16777217); }
	def m3607():void { var l:Int = (w3)+(-16777217); }
	def m3608():void { var l:Int = (w3)+(2147483647); }
	def m3609():void { var l:Int = (w3)+(-2147483647); }
	def m3610():void { var l:Int = (w4)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((SignedTests.this.w4)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3611():void { var l:Int = (w4)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w4)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3612():void { var l:Int = (w4)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3613():void { var l:Int = (w4)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3614():void { var l:Int = (w4)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3615():void { var l:Int = (w4)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3616():void { var l:Int = (w4)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((0))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3617():void { var l:Int = (w4)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((0))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3618():void { var l:Int = (w4)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((1))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3619():void { var l:Int = (w4)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-1))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3620():void { var l:Int = (w4)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w4)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3621():void { var l:Int = (w4)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w4)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3622():void { var l:Int = (w4)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((127))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3623():void { var l:Int = (w4)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-127))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3624():void { var l:Int = (w4)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((128))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3625():void { var l:Int = (w4)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-128))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3626():void { var l:Int = (w4)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((255))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3627():void { var l:Int = (w4)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-255))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3628():void { var l:Int = (w4)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((256))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3629():void { var l:Int = (w4)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-256))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3630():void { var l:Int = (w4)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((32767))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3631():void { var l:Int = (w4)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-32767))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3632():void { var l:Int = (w4)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((32768))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3633():void { var l:Int = (w4)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-32768))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3634():void { var l:Int = (w4)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((65535))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3635():void { var l:Int = (w4)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-65535))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3636():void { var l:Int = (w4)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((65536))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3637():void { var l:Int = (w4)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-65536))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3638():void { var l:Int = (w4)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((16777216))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3639():void { var l:Int = (w4)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-16777216))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3640():void { var l:Int = (w4)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((16777217))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3641():void { var l:Int = (w4)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-16777217))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3642():void { var l:Int = (w4)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((2147483647))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3643():void { var l:Int = (w4)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3644():void { var l:Int = (w5)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((SignedTests.this.w5)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3645():void { var l:Int = (w5)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w5)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3646():void { var l:Int = (w5)+(w2); }
	def m3647():void { var l:Int = (w5)+(w3); }
	def m3648():void { var l:Int = (w5)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((SignedTests.this.w5)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3649():void { var l:Int = (w5)+(w5); }
	def m3650():void { var l:Int = (w5)+(0); }
	def m3651():void { var l:Int = (w5)+(-0); }
	def m3652():void { var l:Int = (w5)+(1); }
	def m3653():void { var l:Int = (w5)+(-1); }
	def m3654():void { var l:Int = (w5)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w5)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3655():void { var l:Int = (w5)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w5)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3656():void { var l:Int = (w5)+(127); }
	def m3657():void { var l:Int = (w5)+(-127); }
	def m3658():void { var l:Int = (w5)+(128); }
	def m3659():void { var l:Int = (w5)+(-128); }
	def m3660():void { var l:Int = (w5)+(255); }
	def m3661():void { var l:Int = (w5)+(-255); }
	def m3662():void { var l:Int = (w5)+(256); }
	def m3663():void { var l:Int = (w5)+(-256); }
	def m3664():void { var l:Int = (w5)+(32767); }
	def m3665():void { var l:Int = (w5)+(-32767); }
	def m3666():void { var l:Int = (w5)+(32768); }
	def m3667():void { var l:Int = (w5)+(-32768); }
	def m3668():void { var l:Int = (w5)+(65535); }
	def m3669():void { var l:Int = (w5)+(-65535); }
	def m3670():void { var l:Int = (w5)+(65536); }
	def m3671():void { var l:Int = (w5)+(-65536); }
	def m3672():void { var l:Int = (w5)+(16777216); }
	def m3673():void { var l:Int = (w5)+(-16777216); }
	def m3674():void { var l:Int = (w5)+(16777217); }
	def m3675():void { var l:Int = (w5)+(-16777217); }
	def m3676():void { var l:Int = (w5)+(2147483647); }
	def m3677():void { var l:Int = (w5)+(-2147483647); }
	def m3678():void { var l:Int = (0)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((0)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3679():void { var l:Int = (0)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3680():void { var l:Int = (0)+(w2); }
	def m3681():void { var l:Int = (0)+(w3); }
	def m3682():void { var l:Int = (0)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((0)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3683():void { var l:Int = (0)+(w5); }
	def m3684():void { var l:Int = (0)+(0); }
	def m3685():void { var l:Int = (0)+(-0); }
	def m3686():void { var l:Int = (0)+(1); }
	def m3687():void { var l:Int = (0)+(-1); }
	def m3688():void { var l:Int = (0)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3689():void { var l:Int = (0)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3690():void { var l:Int = (0)+(127); }
	def m3691():void { var l:Int = (0)+(-127); }
	def m3692():void { var l:Int = (0)+(128); }
	def m3693():void { var l:Int = (0)+(-128); }
	def m3694():void { var l:Int = (0)+(255); }
	def m3695():void { var l:Int = (0)+(-255); }
	def m3696():void { var l:Int = (0)+(256); }
	def m3697():void { var l:Int = (0)+(-256); }
	def m3698():void { var l:Int = (0)+(32767); }
	def m3699():void { var l:Int = (0)+(-32767); }
	def m3700():void { var l:Int = (0)+(32768); }
	def m3701():void { var l:Int = (0)+(-32768); }
	def m3702():void { var l:Int = (0)+(65535); }
	def m3703():void { var l:Int = (0)+(-65535); }
	def m3704():void { var l:Int = (0)+(65536); }
	def m3705():void { var l:Int = (0)+(-65536); }
	def m3706():void { var l:Int = (0)+(16777216); }
	def m3707():void { var l:Int = (0)+(-16777216); }
	def m3708():void { var l:Int = (0)+(16777217); }
	def m3709():void { var l:Int = (0)+(-16777217); }
	def m3710():void { var l:Int = (0)+(2147483647); }
	def m3711():void { var l:Int = (0)+(-2147483647); }
	def m3712():void { var l:Int = (-0)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((0)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3713():void { var l:Int = (-0)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3714():void { var l:Int = (-0)+(w2); }
	def m3715():void { var l:Int = (-0)+(w3); }
	def m3716():void { var l:Int = (-0)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((0)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3717():void { var l:Int = (-0)+(w5); }
	def m3718():void { var l:Int = (-0)+(0); }
	def m3719():void { var l:Int = (-0)+(-0); }
	def m3720():void { var l:Int = (-0)+(1); }
	def m3721():void { var l:Int = (-0)+(-1); }
	def m3722():void { var l:Int = (-0)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3723():void { var l:Int = (-0)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3724():void { var l:Int = (-0)+(127); }
	def m3725():void { var l:Int = (-0)+(-127); }
	def m3726():void { var l:Int = (-0)+(128); }
	def m3727():void { var l:Int = (-0)+(-128); }
	def m3728():void { var l:Int = (-0)+(255); }
	def m3729():void { var l:Int = (-0)+(-255); }
	def m3730():void { var l:Int = (-0)+(256); }
	def m3731():void { var l:Int = (-0)+(-256); }
	def m3732():void { var l:Int = (-0)+(32767); }
	def m3733():void { var l:Int = (-0)+(-32767); }
	def m3734():void { var l:Int = (-0)+(32768); }
	def m3735():void { var l:Int = (-0)+(-32768); }
	def m3736():void { var l:Int = (-0)+(65535); }
	def m3737():void { var l:Int = (-0)+(-65535); }
	def m3738():void { var l:Int = (-0)+(65536); }
	def m3739():void { var l:Int = (-0)+(-65536); }
	def m3740():void { var l:Int = (-0)+(16777216); }
	def m3741():void { var l:Int = (-0)+(-16777216); }
	def m3742():void { var l:Int = (-0)+(16777217); }
	def m3743():void { var l:Int = (-0)+(-16777217); }
	def m3744():void { var l:Int = (-0)+(2147483647); }
	def m3745():void { var l:Int = (-0)+(-2147483647); }
	def m3746():void { var l:Int = (1)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((1)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3747():void { var l:Int = (1)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((1)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3748():void { var l:Int = (1)+(w2); }
	def m3749():void { var l:Int = (1)+(w3); }
	def m3750():void { var l:Int = (1)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((1)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3751():void { var l:Int = (1)+(w5); }
	def m3752():void { var l:Int = (1)+(0); }
	def m3753():void { var l:Int = (1)+(-0); }
	def m3754():void { var l:Int = (1)+(1); }
	def m3755():void { var l:Int = (1)+(-1); }
	def m3756():void { var l:Int = (1)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((1)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3757():void { var l:Int = (1)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((1)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3758():void { var l:Int = (1)+(127); }
	def m3759():void { var l:Int = (1)+(-127); }
	def m3760():void { var l:Int = (1)+(128); }
	def m3761():void { var l:Int = (1)+(-128); }
	def m3762():void { var l:Int = (1)+(255); }
	def m3763():void { var l:Int = (1)+(-255); }
	def m3764():void { var l:Int = (1)+(256); }
	def m3765():void { var l:Int = (1)+(-256); }
	def m3766():void { var l:Int = (1)+(32767); }
	def m3767():void { var l:Int = (1)+(-32767); }
	def m3768():void { var l:Int = (1)+(32768); }
	def m3769():void { var l:Int = (1)+(-32768); }
	def m3770():void { var l:Int = (1)+(65535); }
	def m3771():void { var l:Int = (1)+(-65535); }
	def m3772():void { var l:Int = (1)+(65536); }
	def m3773():void { var l:Int = (1)+(-65536); }
	def m3774():void { var l:Int = (1)+(16777216); }
	def m3775():void { var l:Int = (1)+(-16777216); }
	def m3776():void { var l:Int = (1)+(16777217); }
	def m3777():void { var l:Int = (1)+(-16777217); }
	def m3778():void { var l:Int = (1)+(2147483647); }
	def m3779():void { var l:Int = (1)+(-2147483647); }
	def m3780():void { var l:Int = (-1)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-1)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3781():void { var l:Int = (-1)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-1)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3782():void { var l:Int = (-1)+(w2); }
	def m3783():void { var l:Int = (-1)+(w3); }
	def m3784():void { var l:Int = (-1)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-1)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3785():void { var l:Int = (-1)+(w5); }
	def m3786():void { var l:Int = (-1)+(0); }
	def m3787():void { var l:Int = (-1)+(-0); }
	def m3788():void { var l:Int = (-1)+(1); }
	def m3789():void { var l:Int = (-1)+(-1); }
	def m3790():void { var l:Int = (-1)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-1)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3791():void { var l:Int = (-1)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-1)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3792():void { var l:Int = (-1)+(127); }
	def m3793():void { var l:Int = (-1)+(-127); }
	def m3794():void { var l:Int = (-1)+(128); }
	def m3795():void { var l:Int = (-1)+(-128); }
	def m3796():void { var l:Int = (-1)+(255); }
	def m3797():void { var l:Int = (-1)+(-255); }
	def m3798():void { var l:Int = (-1)+(256); }
	def m3799():void { var l:Int = (-1)+(-256); }
	def m3800():void { var l:Int = (-1)+(32767); }
	def m3801():void { var l:Int = (-1)+(-32767); }
	def m3802():void { var l:Int = (-1)+(32768); }
	def m3803():void { var l:Int = (-1)+(-32768); }
	def m3804():void { var l:Int = (-1)+(65535); }
	def m3805():void { var l:Int = (-1)+(-65535); }
	def m3806():void { var l:Int = (-1)+(65536); }
	def m3807():void { var l:Int = (-1)+(-65536); }
	def m3808():void { var l:Int = (-1)+(16777216); }
	def m3809():void { var l:Int = (-1)+(-16777216); }
	def m3810():void { var l:Int = (-1)+(16777217); }
	def m3811():void { var l:Int = (-1)+(-16777217); }
	def m3812():void { var l:Int = (-1)+(2147483647); }
	def m3813():void { var l:Int = (-1)+(-2147483647); }
	def m3814():void { var l:Int = (2.2)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w0))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3815():void { var l:Int = (2.2)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3816():void { var l:Int = (2.2)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3817():void { var l:Int = (2.2)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3818():void { var l:Int = (2.2)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w4))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3819():void { var l:Int = (2.2)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3820():void { var l:Int = (2.2)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3821():void { var l:Int = (2.2)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3822():void { var l:Int = (2.2)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((1))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3823():void { var l:Int = (2.2)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-1))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3824():void { var l:Int = (2.2)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3825():void { var l:Int = (2.2)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3826():void { var l:Int = (2.2)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((127))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3827():void { var l:Int = (2.2)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-127))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3828():void { var l:Int = (2.2)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((128))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3829():void { var l:Int = (2.2)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-128))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3830():void { var l:Int = (2.2)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((255))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3831():void { var l:Int = (2.2)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-255))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3832():void { var l:Int = (2.2)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((256))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3833():void { var l:Int = (2.2)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-256))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3834():void { var l:Int = (2.2)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((32767))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3835():void { var l:Int = (2.2)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-32767))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3836():void { var l:Int = (2.2)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((32768))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3837():void { var l:Int = (2.2)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-32768))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3838():void { var l:Int = (2.2)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((65535))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3839():void { var l:Int = (2.2)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-65535))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3840():void { var l:Int = (2.2)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((65536))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3841():void { var l:Int = (2.2)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-65536))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3842():void { var l:Int = (2.2)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((16777216))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3843():void { var l:Int = (2.2)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-16777216))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3844():void { var l:Int = (2.2)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((16777217))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3845():void { var l:Int = (2.2)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-16777217))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3846():void { var l:Int = (2.2)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((2147483647))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3847():void { var l:Int = (2.2)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3848():void { var l:Int = (-2.2)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w0))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3849():void { var l:Int = (-2.2)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3850():void { var l:Int = (-2.2)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3851():void { var l:Int = (-2.2)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3852():void { var l:Int = (-2.2)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w4))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3853():void { var l:Int = (-2.2)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3854():void { var l:Int = (-2.2)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3855():void { var l:Int = (-2.2)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3856():void { var l:Int = (-2.2)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((1))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3857():void { var l:Int = (-2.2)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-1))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3858():void { var l:Int = (-2.2)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3859():void { var l:Int = (-2.2)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3860():void { var l:Int = (-2.2)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((127))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3861():void { var l:Int = (-2.2)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-127))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3862():void { var l:Int = (-2.2)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((128))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3863():void { var l:Int = (-2.2)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-128))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3864():void { var l:Int = (-2.2)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((255))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3865():void { var l:Int = (-2.2)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-255))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3866():void { var l:Int = (-2.2)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((256))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3867():void { var l:Int = (-2.2)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-256))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3868():void { var l:Int = (-2.2)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((32767))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3869():void { var l:Int = (-2.2)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-32767))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3870():void { var l:Int = (-2.2)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((32768))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3871():void { var l:Int = (-2.2)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-32768))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3872():void { var l:Int = (-2.2)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((65535))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3873():void { var l:Int = (-2.2)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-65535))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3874():void { var l:Int = (-2.2)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((65536))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3875():void { var l:Int = (-2.2)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-65536))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3876():void { var l:Int = (-2.2)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((16777216))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3877():void { var l:Int = (-2.2)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-16777216))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3878():void { var l:Int = (-2.2)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((16777217))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3879():void { var l:Int = (-2.2)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-16777217))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3880():void { var l:Int = (-2.2)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((2147483647))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3881():void { var l:Int = (-2.2)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3882():void { var l:Int = (127)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((127)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3883():void { var l:Int = (127)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((127)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3884():void { var l:Int = (127)+(w2); }
	def m3885():void { var l:Int = (127)+(w3); }
	def m3886():void { var l:Int = (127)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((127)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3887():void { var l:Int = (127)+(w5); }
	def m3888():void { var l:Int = (127)+(0); }
	def m3889():void { var l:Int = (127)+(-0); }
	def m3890():void { var l:Int = (127)+(1); }
	def m3891():void { var l:Int = (127)+(-1); }
	def m3892():void { var l:Int = (127)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((127)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3893():void { var l:Int = (127)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((127)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3894():void { var l:Int = (127)+(127); }
	def m3895():void { var l:Int = (127)+(-127); }
	def m3896():void { var l:Int = (127)+(128); }
	def m3897():void { var l:Int = (127)+(-128); }
	def m3898():void { var l:Int = (127)+(255); }
	def m3899():void { var l:Int = (127)+(-255); }
	def m3900():void { var l:Int = (127)+(256); }
	def m3901():void { var l:Int = (127)+(-256); }
	def m3902():void { var l:Int = (127)+(32767); }
	def m3903():void { var l:Int = (127)+(-32767); }
	def m3904():void { var l:Int = (127)+(32768); }
	def m3905():void { var l:Int = (127)+(-32768); }
	def m3906():void { var l:Int = (127)+(65535); }
	def m3907():void { var l:Int = (127)+(-65535); }
	def m3908():void { var l:Int = (127)+(65536); }
	def m3909():void { var l:Int = (127)+(-65536); }
	def m3910():void { var l:Int = (127)+(16777216); }
	def m3911():void { var l:Int = (127)+(-16777216); }
	def m3912():void { var l:Int = (127)+(16777217); }
	def m3913():void { var l:Int = (127)+(-16777217); }
	def m3914():void { var l:Int = (127)+(2147483647); }
	def m3915():void { var l:Int = (127)+(-2147483647); }
	def m3916():void { var l:Int = (-127)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-127)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3917():void { var l:Int = (-127)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-127)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3918():void { var l:Int = (-127)+(w2); }
	def m3919():void { var l:Int = (-127)+(w3); }
	def m3920():void { var l:Int = (-127)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-127)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3921():void { var l:Int = (-127)+(w5); }
	def m3922():void { var l:Int = (-127)+(0); }
	def m3923():void { var l:Int = (-127)+(-0); }
	def m3924():void { var l:Int = (-127)+(1); }
	def m3925():void { var l:Int = (-127)+(-1); }
	def m3926():void { var l:Int = (-127)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-127)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3927():void { var l:Int = (-127)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-127)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3928():void { var l:Int = (-127)+(127); }
	def m3929():void { var l:Int = (-127)+(-127); }
	def m3930():void { var l:Int = (-127)+(128); }
	def m3931():void { var l:Int = (-127)+(-128); }
	def m3932():void { var l:Int = (-127)+(255); }
	def m3933():void { var l:Int = (-127)+(-255); }
	def m3934():void { var l:Int = (-127)+(256); }
	def m3935():void { var l:Int = (-127)+(-256); }
	def m3936():void { var l:Int = (-127)+(32767); }
	def m3937():void { var l:Int = (-127)+(-32767); }
	def m3938():void { var l:Int = (-127)+(32768); }
	def m3939():void { var l:Int = (-127)+(-32768); }
	def m3940():void { var l:Int = (-127)+(65535); }
	def m3941():void { var l:Int = (-127)+(-65535); }
	def m3942():void { var l:Int = (-127)+(65536); }
	def m3943():void { var l:Int = (-127)+(-65536); }
	def m3944():void { var l:Int = (-127)+(16777216); }
	def m3945():void { var l:Int = (-127)+(-16777216); }
	def m3946():void { var l:Int = (-127)+(16777217); }
	def m3947():void { var l:Int = (-127)+(-16777217); }
	def m3948():void { var l:Int = (-127)+(2147483647); }
	def m3949():void { var l:Int = (-127)+(-2147483647); }
	def m3950():void { var l:Int = (128)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((128)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3951():void { var l:Int = (128)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((128)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3952():void { var l:Int = (128)+(w2); }
	def m3953():void { var l:Int = (128)+(w3); }
	def m3954():void { var l:Int = (128)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((128)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3955():void { var l:Int = (128)+(w5); }
	def m3956():void { var l:Int = (128)+(0); }
	def m3957():void { var l:Int = (128)+(-0); }
	def m3958():void { var l:Int = (128)+(1); }
	def m3959():void { var l:Int = (128)+(-1); }
	def m3960():void { var l:Int = (128)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((128)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3961():void { var l:Int = (128)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((128)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3962():void { var l:Int = (128)+(127); }
	def m3963():void { var l:Int = (128)+(-127); }
	def m3964():void { var l:Int = (128)+(128); }
	def m3965():void { var l:Int = (128)+(-128); }
	def m3966():void { var l:Int = (128)+(255); }
	def m3967():void { var l:Int = (128)+(-255); }
	def m3968():void { var l:Int = (128)+(256); }
	def m3969():void { var l:Int = (128)+(-256); }
	def m3970():void { var l:Int = (128)+(32767); }
	def m3971():void { var l:Int = (128)+(-32767); }
	def m3972():void { var l:Int = (128)+(32768); }
	def m3973():void { var l:Int = (128)+(-32768); }
	def m3974():void { var l:Int = (128)+(65535); }
	def m3975():void { var l:Int = (128)+(-65535); }
	def m3976():void { var l:Int = (128)+(65536); }
	def m3977():void { var l:Int = (128)+(-65536); }
	def m3978():void { var l:Int = (128)+(16777216); }
	def m3979():void { var l:Int = (128)+(-16777216); }
	def m3980():void { var l:Int = (128)+(16777217); }
	def m3981():void { var l:Int = (128)+(-16777217); }
	def m3982():void { var l:Int = (128)+(2147483647); }
	def m3983():void { var l:Int = (128)+(-2147483647); }
	def m3984():void { var l:Int = (-128)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-128)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m3985():void { var l:Int = (-128)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-128)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3986():void { var l:Int = (-128)+(w2); }
	def m3987():void { var l:Int = (-128)+(w3); }
	def m3988():void { var l:Int = (-128)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-128)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m3989():void { var l:Int = (-128)+(w5); }
	def m3990():void { var l:Int = (-128)+(0); }
	def m3991():void { var l:Int = (-128)+(-0); }
	def m3992():void { var l:Int = (-128)+(1); }
	def m3993():void { var l:Int = (-128)+(-1); }
	def m3994():void { var l:Int = (-128)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-128)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3995():void { var l:Int = (-128)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-128)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m3996():void { var l:Int = (-128)+(127); }
	def m3997():void { var l:Int = (-128)+(-127); }
	def m3998():void { var l:Int = (-128)+(128); }
	def m3999():void { var l:Int = (-128)+(-128); }
	def m4000():void { var l:Int = (-128)+(255); }
	def m4001():void { var l:Int = (-128)+(-255); }
	def m4002():void { var l:Int = (-128)+(256); }
	def m4003():void { var l:Int = (-128)+(-256); }
	def m4004():void { var l:Int = (-128)+(32767); }
	def m4005():void { var l:Int = (-128)+(-32767); }
	def m4006():void { var l:Int = (-128)+(32768); }
	def m4007():void { var l:Int = (-128)+(-32768); }
	def m4008():void { var l:Int = (-128)+(65535); }
	def m4009():void { var l:Int = (-128)+(-65535); }
	def m4010():void { var l:Int = (-128)+(65536); }
	def m4011():void { var l:Int = (-128)+(-65536); }
	def m4012():void { var l:Int = (-128)+(16777216); }
	def m4013():void { var l:Int = (-128)+(-16777216); }
	def m4014():void { var l:Int = (-128)+(16777217); }
	def m4015():void { var l:Int = (-128)+(-16777217); }
	def m4016():void { var l:Int = (-128)+(2147483647); }
	def m4017():void { var l:Int = (-128)+(-2147483647); }
	def m4018():void { var l:Int = (255)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((255)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m4019():void { var l:Int = (255)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((255)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4020():void { var l:Int = (255)+(w2); }
	def m4021():void { var l:Int = (255)+(w3); }
	def m4022():void { var l:Int = (255)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((255)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m4023():void { var l:Int = (255)+(w5); }
	def m4024():void { var l:Int = (255)+(0); }
	def m4025():void { var l:Int = (255)+(-0); }
	def m4026():void { var l:Int = (255)+(1); }
	def m4027():void { var l:Int = (255)+(-1); }
	def m4028():void { var l:Int = (255)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((255)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4029():void { var l:Int = (255)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((255)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4030():void { var l:Int = (255)+(127); }
	def m4031():void { var l:Int = (255)+(-127); }
	def m4032():void { var l:Int = (255)+(128); }
	def m4033():void { var l:Int = (255)+(-128); }
	def m4034():void { var l:Int = (255)+(255); }
	def m4035():void { var l:Int = (255)+(-255); }
	def m4036():void { var l:Int = (255)+(256); }
	def m4037():void { var l:Int = (255)+(-256); }
	def m4038():void { var l:Int = (255)+(32767); }
	def m4039():void { var l:Int = (255)+(-32767); }
	def m4040():void { var l:Int = (255)+(32768); }
	def m4041():void { var l:Int = (255)+(-32768); }
	def m4042():void { var l:Int = (255)+(65535); }
	def m4043():void { var l:Int = (255)+(-65535); }
	def m4044():void { var l:Int = (255)+(65536); }
	def m4045():void { var l:Int = (255)+(-65536); }
	def m4046():void { var l:Int = (255)+(16777216); }
	def m4047():void { var l:Int = (255)+(-16777216); }
	def m4048():void { var l:Int = (255)+(16777217); }
	def m4049():void { var l:Int = (255)+(-16777217); }
	def m4050():void { var l:Int = (255)+(2147483647); }
	def m4051():void { var l:Int = (255)+(-2147483647); }
	def m4052():void { var l:Int = (-255)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-255)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m4053():void { var l:Int = (-255)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-255)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4054():void { var l:Int = (-255)+(w2); }
	def m4055():void { var l:Int = (-255)+(w3); }
	def m4056():void { var l:Int = (-255)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-255)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m4057():void { var l:Int = (-255)+(w5); }
	def m4058():void { var l:Int = (-255)+(0); }
	def m4059():void { var l:Int = (-255)+(-0); }
	def m4060():void { var l:Int = (-255)+(1); }
	def m4061():void { var l:Int = (-255)+(-1); }
	def m4062():void { var l:Int = (-255)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-255)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4063():void { var l:Int = (-255)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-255)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4064():void { var l:Int = (-255)+(127); }
	def m4065():void { var l:Int = (-255)+(-127); }
	def m4066():void { var l:Int = (-255)+(128); }
	def m4067():void { var l:Int = (-255)+(-128); }
	def m4068():void { var l:Int = (-255)+(255); }
	def m4069():void { var l:Int = (-255)+(-255); }
	def m4070():void { var l:Int = (-255)+(256); }
	def m4071():void { var l:Int = (-255)+(-256); }
	def m4072():void { var l:Int = (-255)+(32767); }
	def m4073():void { var l:Int = (-255)+(-32767); }
	def m4074():void { var l:Int = (-255)+(32768); }
	def m4075():void { var l:Int = (-255)+(-32768); }
	def m4076():void { var l:Int = (-255)+(65535); }
	def m4077():void { var l:Int = (-255)+(-65535); }
	def m4078():void { var l:Int = (-255)+(65536); }
	def m4079():void { var l:Int = (-255)+(-65536); }
	def m4080():void { var l:Int = (-255)+(16777216); }
	def m4081():void { var l:Int = (-255)+(-16777216); }
	def m4082():void { var l:Int = (-255)+(16777217); }
	def m4083():void { var l:Int = (-255)+(-16777217); }
	def m4084():void { var l:Int = (-255)+(2147483647); }
	def m4085():void { var l:Int = (-255)+(-2147483647); }
	def m4086():void { var l:Int = (256)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((256)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m4087():void { var l:Int = (256)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((256)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4088():void { var l:Int = (256)+(w2); }
	def m4089():void { var l:Int = (256)+(w3); }
	def m4090():void { var l:Int = (256)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((256)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m4091():void { var l:Int = (256)+(w5); }
	def m4092():void { var l:Int = (256)+(0); }
	def m4093():void { var l:Int = (256)+(-0); }
	def m4094():void { var l:Int = (256)+(1); }
	def m4095():void { var l:Int = (256)+(-1); }
	def m4096():void { var l:Int = (256)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((256)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4097():void { var l:Int = (256)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((256)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4098():void { var l:Int = (256)+(127); }
	def m4099():void { var l:Int = (256)+(-127); }
	def m4100():void { var l:Int = (256)+(128); }
	def m4101():void { var l:Int = (256)+(-128); }
	def m4102():void { var l:Int = (256)+(255); }
	def m4103():void { var l:Int = (256)+(-255); }
	def m4104():void { var l:Int = (256)+(256); }
	def m4105():void { var l:Int = (256)+(-256); }
	def m4106():void { var l:Int = (256)+(32767); }
	def m4107():void { var l:Int = (256)+(-32767); }
	def m4108():void { var l:Int = (256)+(32768); }
	def m4109():void { var l:Int = (256)+(-32768); }
	def m4110():void { var l:Int = (256)+(65535); }
	def m4111():void { var l:Int = (256)+(-65535); }
	def m4112():void { var l:Int = (256)+(65536); }
	def m4113():void { var l:Int = (256)+(-65536); }
	def m4114():void { var l:Int = (256)+(16777216); }
	def m4115():void { var l:Int = (256)+(-16777216); }
	def m4116():void { var l:Int = (256)+(16777217); }
	def m4117():void { var l:Int = (256)+(-16777217); }
	def m4118():void { var l:Int = (256)+(2147483647); }
	def m4119():void { var l:Int = (256)+(-2147483647); }
	def m4120():void { var l:Int = (-256)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-256)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m4121():void { var l:Int = (-256)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-256)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4122():void { var l:Int = (-256)+(w2); }
	def m4123():void { var l:Int = (-256)+(w3); }
	def m4124():void { var l:Int = (-256)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-256)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m4125():void { var l:Int = (-256)+(w5); }
	def m4126():void { var l:Int = (-256)+(0); }
	def m4127():void { var l:Int = (-256)+(-0); }
	def m4128():void { var l:Int = (-256)+(1); }
	def m4129():void { var l:Int = (-256)+(-1); }
	def m4130():void { var l:Int = (-256)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-256)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4131():void { var l:Int = (-256)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-256)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4132():void { var l:Int = (-256)+(127); }
	def m4133():void { var l:Int = (-256)+(-127); }
	def m4134():void { var l:Int = (-256)+(128); }
	def m4135():void { var l:Int = (-256)+(-128); }
	def m4136():void { var l:Int = (-256)+(255); }
	def m4137():void { var l:Int = (-256)+(-255); }
	def m4138():void { var l:Int = (-256)+(256); }
	def m4139():void { var l:Int = (-256)+(-256); }
	def m4140():void { var l:Int = (-256)+(32767); }
	def m4141():void { var l:Int = (-256)+(-32767); }
	def m4142():void { var l:Int = (-256)+(32768); }
	def m4143():void { var l:Int = (-256)+(-32768); }
	def m4144():void { var l:Int = (-256)+(65535); }
	def m4145():void { var l:Int = (-256)+(-65535); }
	def m4146():void { var l:Int = (-256)+(65536); }
	def m4147():void { var l:Int = (-256)+(-65536); }
	def m4148():void { var l:Int = (-256)+(16777216); }
	def m4149():void { var l:Int = (-256)+(-16777216); }
	def m4150():void { var l:Int = (-256)+(16777217); }
	def m4151():void { var l:Int = (-256)+(-16777217); }
	def m4152():void { var l:Int = (-256)+(2147483647); }
	def m4153():void { var l:Int = (-256)+(-2147483647); }
	def m4154():void { var l:Int = (32767)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((32767)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m4155():void { var l:Int = (32767)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32767)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4156():void { var l:Int = (32767)+(w2); }
	def m4157():void { var l:Int = (32767)+(w3); }
	def m4158():void { var l:Int = (32767)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((32767)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m4159():void { var l:Int = (32767)+(w5); }
	def m4160():void { var l:Int = (32767)+(0); }
	def m4161():void { var l:Int = (32767)+(-0); }
	def m4162():void { var l:Int = (32767)+(1); }
	def m4163():void { var l:Int = (32767)+(-1); }
	def m4164():void { var l:Int = (32767)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32767)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4165():void { var l:Int = (32767)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32767)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4166():void { var l:Int = (32767)+(127); }
	def m4167():void { var l:Int = (32767)+(-127); }
	def m4168():void { var l:Int = (32767)+(128); }
	def m4169():void { var l:Int = (32767)+(-128); }
	def m4170():void { var l:Int = (32767)+(255); }
	def m4171():void { var l:Int = (32767)+(-255); }
	def m4172():void { var l:Int = (32767)+(256); }
	def m4173():void { var l:Int = (32767)+(-256); }
	def m4174():void { var l:Int = (32767)+(32767); }
	def m4175():void { var l:Int = (32767)+(-32767); }
	def m4176():void { var l:Int = (32767)+(32768); }
	def m4177():void { var l:Int = (32767)+(-32768); }
	def m4178():void { var l:Int = (32767)+(65535); }
	def m4179():void { var l:Int = (32767)+(-65535); }
	def m4180():void { var l:Int = (32767)+(65536); }
	def m4181():void { var l:Int = (32767)+(-65536); }
	def m4182():void { var l:Int = (32767)+(16777216); }
	def m4183():void { var l:Int = (32767)+(-16777216); }
	def m4184():void { var l:Int = (32767)+(16777217); }
	def m4185():void { var l:Int = (32767)+(-16777217); }
	def m4186():void { var l:Int = (32767)+(2147483647); }
	def m4187():void { var l:Int = (32767)+(-2147483647); }
	def m4188():void { var l:Int = (-32767)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-32767)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m4189():void { var l:Int = (-32767)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32767)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4190():void { var l:Int = (-32767)+(w2); }
	def m4191():void { var l:Int = (-32767)+(w3); }
	def m4192():void { var l:Int = (-32767)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-32767)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m4193():void { var l:Int = (-32767)+(w5); }
	def m4194():void { var l:Int = (-32767)+(0); }
	def m4195():void { var l:Int = (-32767)+(-0); }
	def m4196():void { var l:Int = (-32767)+(1); }
	def m4197():void { var l:Int = (-32767)+(-1); }
	def m4198():void { var l:Int = (-32767)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32767)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4199():void { var l:Int = (-32767)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32767)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4200():void { var l:Int = (-32767)+(127); }
	def m4201():void { var l:Int = (-32767)+(-127); }
	def m4202():void { var l:Int = (-32767)+(128); }
	def m4203():void { var l:Int = (-32767)+(-128); }
	def m4204():void { var l:Int = (-32767)+(255); }
	def m4205():void { var l:Int = (-32767)+(-255); }
	def m4206():void { var l:Int = (-32767)+(256); }
	def m4207():void { var l:Int = (-32767)+(-256); }
	def m4208():void { var l:Int = (-32767)+(32767); }
	def m4209():void { var l:Int = (-32767)+(-32767); }
	def m4210():void { var l:Int = (-32767)+(32768); }
	def m4211():void { var l:Int = (-32767)+(-32768); }
	def m4212():void { var l:Int = (-32767)+(65535); }
	def m4213():void { var l:Int = (-32767)+(-65535); }
	def m4214():void { var l:Int = (-32767)+(65536); }
	def m4215():void { var l:Int = (-32767)+(-65536); }
	def m4216():void { var l:Int = (-32767)+(16777216); }
	def m4217():void { var l:Int = (-32767)+(-16777216); }
	def m4218():void { var l:Int = (-32767)+(16777217); }
	def m4219():void { var l:Int = (-32767)+(-16777217); }
	def m4220():void { var l:Int = (-32767)+(2147483647); }
	def m4221():void { var l:Int = (-32767)+(-2147483647); }
	def m4222():void { var l:Int = (32768)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((32768)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m4223():void { var l:Int = (32768)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32768)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4224():void { var l:Int = (32768)+(w2); }
	def m4225():void { var l:Int = (32768)+(w3); }
	def m4226():void { var l:Int = (32768)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((32768)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m4227():void { var l:Int = (32768)+(w5); }
	def m4228():void { var l:Int = (32768)+(0); }
	def m4229():void { var l:Int = (32768)+(-0); }
	def m4230():void { var l:Int = (32768)+(1); }
	def m4231():void { var l:Int = (32768)+(-1); }
	def m4232():void { var l:Int = (32768)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32768)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4233():void { var l:Int = (32768)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32768)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4234():void { var l:Int = (32768)+(127); }
	def m4235():void { var l:Int = (32768)+(-127); }
	def m4236():void { var l:Int = (32768)+(128); }
	def m4237():void { var l:Int = (32768)+(-128); }
	def m4238():void { var l:Int = (32768)+(255); }
	def m4239():void { var l:Int = (32768)+(-255); }
	def m4240():void { var l:Int = (32768)+(256); }
	def m4241():void { var l:Int = (32768)+(-256); }
	def m4242():void { var l:Int = (32768)+(32767); }
	def m4243():void { var l:Int = (32768)+(-32767); }
	def m4244():void { var l:Int = (32768)+(32768); }
	def m4245():void { var l:Int = (32768)+(-32768); }
	def m4246():void { var l:Int = (32768)+(65535); }
	def m4247():void { var l:Int = (32768)+(-65535); }
	def m4248():void { var l:Int = (32768)+(65536); }
	def m4249():void { var l:Int = (32768)+(-65536); }
	def m4250():void { var l:Int = (32768)+(16777216); }
	def m4251():void { var l:Int = (32768)+(-16777216); }
	def m4252():void { var l:Int = (32768)+(16777217); }
	def m4253():void { var l:Int = (32768)+(-16777217); }
	def m4254():void { var l:Int = (32768)+(2147483647); }
	def m4255():void { var l:Int = (32768)+(-2147483647); }
	def m4256():void { var l:Int = (-32768)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-32768)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m4257():void { var l:Int = (-32768)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32768)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4258():void { var l:Int = (-32768)+(w2); }
	def m4259():void { var l:Int = (-32768)+(w3); }
	def m4260():void { var l:Int = (-32768)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-32768)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m4261():void { var l:Int = (-32768)+(w5); }
	def m4262():void { var l:Int = (-32768)+(0); }
	def m4263():void { var l:Int = (-32768)+(-0); }
	def m4264():void { var l:Int = (-32768)+(1); }
	def m4265():void { var l:Int = (-32768)+(-1); }
	def m4266():void { var l:Int = (-32768)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32768)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4267():void { var l:Int = (-32768)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32768)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4268():void { var l:Int = (-32768)+(127); }
	def m4269():void { var l:Int = (-32768)+(-127); }
	def m4270():void { var l:Int = (-32768)+(128); }
	def m4271():void { var l:Int = (-32768)+(-128); }
	def m4272():void { var l:Int = (-32768)+(255); }
	def m4273():void { var l:Int = (-32768)+(-255); }
	def m4274():void { var l:Int = (-32768)+(256); }
	def m4275():void { var l:Int = (-32768)+(-256); }
	def m4276():void { var l:Int = (-32768)+(32767); }
	def m4277():void { var l:Int = (-32768)+(-32767); }
	def m4278():void { var l:Int = (-32768)+(32768); }
	def m4279():void { var l:Int = (-32768)+(-32768); }
	def m4280():void { var l:Int = (-32768)+(65535); }
	def m4281():void { var l:Int = (-32768)+(-65535); }
	def m4282():void { var l:Int = (-32768)+(65536); }
	def m4283():void { var l:Int = (-32768)+(-65536); }
	def m4284():void { var l:Int = (-32768)+(16777216); }
	def m4285():void { var l:Int = (-32768)+(-16777216); }
	def m4286():void { var l:Int = (-32768)+(16777217); }
	def m4287():void { var l:Int = (-32768)+(-16777217); }
	def m4288():void { var l:Int = (-32768)+(2147483647); }
	def m4289():void { var l:Int = (-32768)+(-2147483647); }
	def m4290():void { var l:Int = (65535)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((65535)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m4291():void { var l:Int = (65535)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65535)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4292():void { var l:Int = (65535)+(w2); }
	def m4293():void { var l:Int = (65535)+(w3); }
	def m4294():void { var l:Int = (65535)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((65535)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m4295():void { var l:Int = (65535)+(w5); }
	def m4296():void { var l:Int = (65535)+(0); }
	def m4297():void { var l:Int = (65535)+(-0); }
	def m4298():void { var l:Int = (65535)+(1); }
	def m4299():void { var l:Int = (65535)+(-1); }
	def m4300():void { var l:Int = (65535)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65535)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4301():void { var l:Int = (65535)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65535)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4302():void { var l:Int = (65535)+(127); }
	def m4303():void { var l:Int = (65535)+(-127); }
	def m4304():void { var l:Int = (65535)+(128); }
	def m4305():void { var l:Int = (65535)+(-128); }
	def m4306():void { var l:Int = (65535)+(255); }
	def m4307():void { var l:Int = (65535)+(-255); }
	def m4308():void { var l:Int = (65535)+(256); }
	def m4309():void { var l:Int = (65535)+(-256); }
	def m4310():void { var l:Int = (65535)+(32767); }
	def m4311():void { var l:Int = (65535)+(-32767); }
	def m4312():void { var l:Int = (65535)+(32768); }
	def m4313():void { var l:Int = (65535)+(-32768); }
	def m4314():void { var l:Int = (65535)+(65535); }
	def m4315():void { var l:Int = (65535)+(-65535); }
	def m4316():void { var l:Int = (65535)+(65536); }
	def m4317():void { var l:Int = (65535)+(-65536); }
	def m4318():void { var l:Int = (65535)+(16777216); }
	def m4319():void { var l:Int = (65535)+(-16777216); }
	def m4320():void { var l:Int = (65535)+(16777217); }
	def m4321():void { var l:Int = (65535)+(-16777217); }
	def m4322():void { var l:Int = (65535)+(2147483647); }
	def m4323():void { var l:Int = (65535)+(-2147483647); }
	def m4324():void { var l:Int = (-65535)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-65535)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m4325():void { var l:Int = (-65535)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65535)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4326():void { var l:Int = (-65535)+(w2); }
	def m4327():void { var l:Int = (-65535)+(w3); }
	def m4328():void { var l:Int = (-65535)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-65535)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m4329():void { var l:Int = (-65535)+(w5); }
	def m4330():void { var l:Int = (-65535)+(0); }
	def m4331():void { var l:Int = (-65535)+(-0); }
	def m4332():void { var l:Int = (-65535)+(1); }
	def m4333():void { var l:Int = (-65535)+(-1); }
	def m4334():void { var l:Int = (-65535)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65535)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4335():void { var l:Int = (-65535)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65535)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4336():void { var l:Int = (-65535)+(127); }
	def m4337():void { var l:Int = (-65535)+(-127); }
	def m4338():void { var l:Int = (-65535)+(128); }
	def m4339():void { var l:Int = (-65535)+(-128); }
	def m4340():void { var l:Int = (-65535)+(255); }
	def m4341():void { var l:Int = (-65535)+(-255); }
	def m4342():void { var l:Int = (-65535)+(256); }
	def m4343():void { var l:Int = (-65535)+(-256); }
	def m4344():void { var l:Int = (-65535)+(32767); }
	def m4345():void { var l:Int = (-65535)+(-32767); }
	def m4346():void { var l:Int = (-65535)+(32768); }
	def m4347():void { var l:Int = (-65535)+(-32768); }
	def m4348():void { var l:Int = (-65535)+(65535); }
	def m4349():void { var l:Int = (-65535)+(-65535); }
	def m4350():void { var l:Int = (-65535)+(65536); }
	def m4351():void { var l:Int = (-65535)+(-65536); }
	def m4352():void { var l:Int = (-65535)+(16777216); }
	def m4353():void { var l:Int = (-65535)+(-16777216); }
	def m4354():void { var l:Int = (-65535)+(16777217); }
	def m4355():void { var l:Int = (-65535)+(-16777217); }
	def m4356():void { var l:Int = (-65535)+(2147483647); }
	def m4357():void { var l:Int = (-65535)+(-2147483647); }
	def m4358():void { var l:Int = (65536)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((65536)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m4359():void { var l:Int = (65536)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65536)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4360():void { var l:Int = (65536)+(w2); }
	def m4361():void { var l:Int = (65536)+(w3); }
	def m4362():void { var l:Int = (65536)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((65536)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m4363():void { var l:Int = (65536)+(w5); }
	def m4364():void { var l:Int = (65536)+(0); }
	def m4365():void { var l:Int = (65536)+(-0); }
	def m4366():void { var l:Int = (65536)+(1); }
	def m4367():void { var l:Int = (65536)+(-1); }
	def m4368():void { var l:Int = (65536)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65536)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4369():void { var l:Int = (65536)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65536)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4370():void { var l:Int = (65536)+(127); }
	def m4371():void { var l:Int = (65536)+(-127); }
	def m4372():void { var l:Int = (65536)+(128); }
	def m4373():void { var l:Int = (65536)+(-128); }
	def m4374():void { var l:Int = (65536)+(255); }
	def m4375():void { var l:Int = (65536)+(-255); }
	def m4376():void { var l:Int = (65536)+(256); }
	def m4377():void { var l:Int = (65536)+(-256); }
	def m4378():void { var l:Int = (65536)+(32767); }
	def m4379():void { var l:Int = (65536)+(-32767); }
	def m4380():void { var l:Int = (65536)+(32768); }
	def m4381():void { var l:Int = (65536)+(-32768); }
	def m4382():void { var l:Int = (65536)+(65535); }
	def m4383():void { var l:Int = (65536)+(-65535); }
	def m4384():void { var l:Int = (65536)+(65536); }
	def m4385():void { var l:Int = (65536)+(-65536); }
	def m4386():void { var l:Int = (65536)+(16777216); }
	def m4387():void { var l:Int = (65536)+(-16777216); }
	def m4388():void { var l:Int = (65536)+(16777217); }
	def m4389():void { var l:Int = (65536)+(-16777217); }
	def m4390():void { var l:Int = (65536)+(2147483647); }
	def m4391():void { var l:Int = (65536)+(-2147483647); }
	def m4392():void { var l:Int = (-65536)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-65536)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m4393():void { var l:Int = (-65536)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65536)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4394():void { var l:Int = (-65536)+(w2); }
	def m4395():void { var l:Int = (-65536)+(w3); }
	def m4396():void { var l:Int = (-65536)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-65536)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m4397():void { var l:Int = (-65536)+(w5); }
	def m4398():void { var l:Int = (-65536)+(0); }
	def m4399():void { var l:Int = (-65536)+(-0); }
	def m4400():void { var l:Int = (-65536)+(1); }
	def m4401():void { var l:Int = (-65536)+(-1); }
	def m4402():void { var l:Int = (-65536)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65536)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4403():void { var l:Int = (-65536)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65536)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4404():void { var l:Int = (-65536)+(127); }
	def m4405():void { var l:Int = (-65536)+(-127); }
	def m4406():void { var l:Int = (-65536)+(128); }
	def m4407():void { var l:Int = (-65536)+(-128); }
	def m4408():void { var l:Int = (-65536)+(255); }
	def m4409():void { var l:Int = (-65536)+(-255); }
	def m4410():void { var l:Int = (-65536)+(256); }
	def m4411():void { var l:Int = (-65536)+(-256); }
	def m4412():void { var l:Int = (-65536)+(32767); }
	def m4413():void { var l:Int = (-65536)+(-32767); }
	def m4414():void { var l:Int = (-65536)+(32768); }
	def m4415():void { var l:Int = (-65536)+(-32768); }
	def m4416():void { var l:Int = (-65536)+(65535); }
	def m4417():void { var l:Int = (-65536)+(-65535); }
	def m4418():void { var l:Int = (-65536)+(65536); }
	def m4419():void { var l:Int = (-65536)+(-65536); }
	def m4420():void { var l:Int = (-65536)+(16777216); }
	def m4421():void { var l:Int = (-65536)+(-16777216); }
	def m4422():void { var l:Int = (-65536)+(16777217); }
	def m4423():void { var l:Int = (-65536)+(-16777217); }
	def m4424():void { var l:Int = (-65536)+(2147483647); }
	def m4425():void { var l:Int = (-65536)+(-2147483647); }
	def m4426():void { var l:Int = (16777216)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((16777216)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m4427():void { var l:Int = (16777216)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777216)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4428():void { var l:Int = (16777216)+(w2); }
	def m4429():void { var l:Int = (16777216)+(w3); }
	def m4430():void { var l:Int = (16777216)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((16777216)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m4431():void { var l:Int = (16777216)+(w5); }
	def m4432():void { var l:Int = (16777216)+(0); }
	def m4433():void { var l:Int = (16777216)+(-0); }
	def m4434():void { var l:Int = (16777216)+(1); }
	def m4435():void { var l:Int = (16777216)+(-1); }
	def m4436():void { var l:Int = (16777216)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777216)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4437():void { var l:Int = (16777216)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777216)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4438():void { var l:Int = (16777216)+(127); }
	def m4439():void { var l:Int = (16777216)+(-127); }
	def m4440():void { var l:Int = (16777216)+(128); }
	def m4441():void { var l:Int = (16777216)+(-128); }
	def m4442():void { var l:Int = (16777216)+(255); }
	def m4443():void { var l:Int = (16777216)+(-255); }
	def m4444():void { var l:Int = (16777216)+(256); }
	def m4445():void { var l:Int = (16777216)+(-256); }
	def m4446():void { var l:Int = (16777216)+(32767); }
	def m4447():void { var l:Int = (16777216)+(-32767); }
	def m4448():void { var l:Int = (16777216)+(32768); }
	def m4449():void { var l:Int = (16777216)+(-32768); }
	def m4450():void { var l:Int = (16777216)+(65535); }
	def m4451():void { var l:Int = (16777216)+(-65535); }
	def m4452():void { var l:Int = (16777216)+(65536); }
	def m4453():void { var l:Int = (16777216)+(-65536); }
	def m4454():void { var l:Int = (16777216)+(16777216); }
	def m4455():void { var l:Int = (16777216)+(-16777216); }
	def m4456():void { var l:Int = (16777216)+(16777217); }
	def m4457():void { var l:Int = (16777216)+(-16777217); }
	def m4458():void { var l:Int = (16777216)+(2147483647); }
	def m4459():void { var l:Int = (16777216)+(-2147483647); }
	def m4460():void { var l:Int = (-16777216)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-16777216)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m4461():void { var l:Int = (-16777216)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777216)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4462():void { var l:Int = (-16777216)+(w2); }
	def m4463():void { var l:Int = (-16777216)+(w3); }
	def m4464():void { var l:Int = (-16777216)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-16777216)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m4465():void { var l:Int = (-16777216)+(w5); }
	def m4466():void { var l:Int = (-16777216)+(0); }
	def m4467():void { var l:Int = (-16777216)+(-0); }
	def m4468():void { var l:Int = (-16777216)+(1); }
	def m4469():void { var l:Int = (-16777216)+(-1); }
	def m4470():void { var l:Int = (-16777216)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777216)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4471():void { var l:Int = (-16777216)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777216)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4472():void { var l:Int = (-16777216)+(127); }
	def m4473():void { var l:Int = (-16777216)+(-127); }
	def m4474():void { var l:Int = (-16777216)+(128); }
	def m4475():void { var l:Int = (-16777216)+(-128); }
	def m4476():void { var l:Int = (-16777216)+(255); }
	def m4477():void { var l:Int = (-16777216)+(-255); }
	def m4478():void { var l:Int = (-16777216)+(256); }
	def m4479():void { var l:Int = (-16777216)+(-256); }
	def m4480():void { var l:Int = (-16777216)+(32767); }
	def m4481():void { var l:Int = (-16777216)+(-32767); }
	def m4482():void { var l:Int = (-16777216)+(32768); }
	def m4483():void { var l:Int = (-16777216)+(-32768); }
	def m4484():void { var l:Int = (-16777216)+(65535); }
	def m4485():void { var l:Int = (-16777216)+(-65535); }
	def m4486():void { var l:Int = (-16777216)+(65536); }
	def m4487():void { var l:Int = (-16777216)+(-65536); }
	def m4488():void { var l:Int = (-16777216)+(16777216); }
	def m4489():void { var l:Int = (-16777216)+(-16777216); }
	def m4490():void { var l:Int = (-16777216)+(16777217); }
	def m4491():void { var l:Int = (-16777216)+(-16777217); }
	def m4492():void { var l:Int = (-16777216)+(2147483647); }
	def m4493():void { var l:Int = (-16777216)+(-2147483647); }
	def m4494():void { var l:Int = (16777217)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((16777217)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m4495():void { var l:Int = (16777217)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777217)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4496():void { var l:Int = (16777217)+(w2); }
	def m4497():void { var l:Int = (16777217)+(w3); }
	def m4498():void { var l:Int = (16777217)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((16777217)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m4499():void { var l:Int = (16777217)+(w5); }
	def m4500():void { var l:Int = (16777217)+(0); }
	def m4501():void { var l:Int = (16777217)+(-0); }
	def m4502():void { var l:Int = (16777217)+(1); }
	def m4503():void { var l:Int = (16777217)+(-1); }
	def m4504():void { var l:Int = (16777217)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777217)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4505():void { var l:Int = (16777217)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777217)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4506():void { var l:Int = (16777217)+(127); }
	def m4507():void { var l:Int = (16777217)+(-127); }
	def m4508():void { var l:Int = (16777217)+(128); }
	def m4509():void { var l:Int = (16777217)+(-128); }
	def m4510():void { var l:Int = (16777217)+(255); }
	def m4511():void { var l:Int = (16777217)+(-255); }
	def m4512():void { var l:Int = (16777217)+(256); }
	def m4513():void { var l:Int = (16777217)+(-256); }
	def m4514():void { var l:Int = (16777217)+(32767); }
	def m4515():void { var l:Int = (16777217)+(-32767); }
	def m4516():void { var l:Int = (16777217)+(32768); }
	def m4517():void { var l:Int = (16777217)+(-32768); }
	def m4518():void { var l:Int = (16777217)+(65535); }
	def m4519():void { var l:Int = (16777217)+(-65535); }
	def m4520():void { var l:Int = (16777217)+(65536); }
	def m4521():void { var l:Int = (16777217)+(-65536); }
	def m4522():void { var l:Int = (16777217)+(16777216); }
	def m4523():void { var l:Int = (16777217)+(-16777216); }
	def m4524():void { var l:Int = (16777217)+(16777217); }
	def m4525():void { var l:Int = (16777217)+(-16777217); }
	def m4526():void { var l:Int = (16777217)+(2147483647); }
	def m4527():void { var l:Int = (16777217)+(-2147483647); }
	def m4528():void { var l:Int = (-16777217)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-16777217)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m4529():void { var l:Int = (-16777217)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777217)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4530():void { var l:Int = (-16777217)+(w2); }
	def m4531():void { var l:Int = (-16777217)+(w3); }
	def m4532():void { var l:Int = (-16777217)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-16777217)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m4533():void { var l:Int = (-16777217)+(w5); }
	def m4534():void { var l:Int = (-16777217)+(0); }
	def m4535():void { var l:Int = (-16777217)+(-0); }
	def m4536():void { var l:Int = (-16777217)+(1); }
	def m4537():void { var l:Int = (-16777217)+(-1); }
	def m4538():void { var l:Int = (-16777217)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777217)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4539():void { var l:Int = (-16777217)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777217)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4540():void { var l:Int = (-16777217)+(127); }
	def m4541():void { var l:Int = (-16777217)+(-127); }
	def m4542():void { var l:Int = (-16777217)+(128); }
	def m4543():void { var l:Int = (-16777217)+(-128); }
	def m4544():void { var l:Int = (-16777217)+(255); }
	def m4545():void { var l:Int = (-16777217)+(-255); }
	def m4546():void { var l:Int = (-16777217)+(256); }
	def m4547():void { var l:Int = (-16777217)+(-256); }
	def m4548():void { var l:Int = (-16777217)+(32767); }
	def m4549():void { var l:Int = (-16777217)+(-32767); }
	def m4550():void { var l:Int = (-16777217)+(32768); }
	def m4551():void { var l:Int = (-16777217)+(-32768); }
	def m4552():void { var l:Int = (-16777217)+(65535); }
	def m4553():void { var l:Int = (-16777217)+(-65535); }
	def m4554():void { var l:Int = (-16777217)+(65536); }
	def m4555():void { var l:Int = (-16777217)+(-65536); }
	def m4556():void { var l:Int = (-16777217)+(16777216); }
	def m4557():void { var l:Int = (-16777217)+(-16777216); }
	def m4558():void { var l:Int = (-16777217)+(16777217); }
	def m4559():void { var l:Int = (-16777217)+(-16777217); }
	def m4560():void { var l:Int = (-16777217)+(2147483647); }
	def m4561():void { var l:Int = (-16777217)+(-2147483647); }
	def m4562():void { var l:Int = (2147483647)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((2147483647)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m4563():void { var l:Int = (2147483647)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((2147483647)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4564():void { var l:Int = (2147483647)+(w2); }
	def m4565():void { var l:Int = (2147483647)+(w3); }
	def m4566():void { var l:Int = (2147483647)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((2147483647)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m4567():void { var l:Int = (2147483647)+(w5); }
	def m4568():void { var l:Int = (2147483647)+(0); }
	def m4569():void { var l:Int = (2147483647)+(-0); }
	def m4570():void { var l:Int = (2147483647)+(1); }
	def m4571():void { var l:Int = (2147483647)+(-1); }
	def m4572():void { var l:Int = (2147483647)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((2147483647)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4573():void { var l:Int = (2147483647)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((2147483647)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4574():void { var l:Int = (2147483647)+(127); }
	def m4575():void { var l:Int = (2147483647)+(-127); }
	def m4576():void { var l:Int = (2147483647)+(128); }
	def m4577():void { var l:Int = (2147483647)+(-128); }
	def m4578():void { var l:Int = (2147483647)+(255); }
	def m4579():void { var l:Int = (2147483647)+(-255); }
	def m4580():void { var l:Int = (2147483647)+(256); }
	def m4581():void { var l:Int = (2147483647)+(-256); }
	def m4582():void { var l:Int = (2147483647)+(32767); }
	def m4583():void { var l:Int = (2147483647)+(-32767); }
	def m4584():void { var l:Int = (2147483647)+(32768); }
	def m4585():void { var l:Int = (2147483647)+(-32768); }
	def m4586():void { var l:Int = (2147483647)+(65535); }
	def m4587():void { var l:Int = (2147483647)+(-65535); }
	def m4588():void { var l:Int = (2147483647)+(65536); }
	def m4589():void { var l:Int = (2147483647)+(-65536); }
	def m4590():void { var l:Int = (2147483647)+(16777216); }
	def m4591():void { var l:Int = (2147483647)+(-16777216); }
	def m4592():void { var l:Int = (2147483647)+(16777217); }
	def m4593():void { var l:Int = (2147483647)+(-16777217); }
	def m4594():void { var l:Int = (2147483647)+(2147483647); }
	def m4595():void { var l:Int = (2147483647)+(-2147483647); }
	def m4596():void { var l:Int = (-2147483647)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-2147483647)) + (SignedTests.this.w0)		 Expected type: x10.lang.Int		 Found type: x10.lang.Float)
	def m4597():void { var l:Int = (-2147483647)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-2147483647)) + (SignedTests.this.w1)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4598():void { var l:Int = (-2147483647)+(w2); }
	def m4599():void { var l:Int = (-2147483647)+(w3); }
	def m4600():void { var l:Int = (-2147483647)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-2147483647)) + (SignedTests.this.w4)		 Expected type: x10.lang.Int		 Found type: x10.lang.Long)
	def m4601():void { var l:Int = (-2147483647)+(w5); }
	def m4602():void { var l:Int = (-2147483647)+(0); }
	def m4603():void { var l:Int = (-2147483647)+(-0); }
	def m4604():void { var l:Int = (-2147483647)+(1); }
	def m4605():void { var l:Int = (-2147483647)+(-1); }
	def m4606():void { var l:Int = (-2147483647)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-2147483647)) + (2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4607():void { var l:Int = (-2147483647)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-2147483647)) + (-2.2)		 Expected type: x10.lang.Int		 Found type: x10.lang.Double)
	def m4608():void { var l:Int = (-2147483647)+(127); }
	def m4609():void { var l:Int = (-2147483647)+(-127); }
	def m4610():void { var l:Int = (-2147483647)+(128); }
	def m4611():void { var l:Int = (-2147483647)+(-128); }
	def m4612():void { var l:Int = (-2147483647)+(255); }
	def m4613():void { var l:Int = (-2147483647)+(-255); }
	def m4614():void { var l:Int = (-2147483647)+(256); }
	def m4615():void { var l:Int = (-2147483647)+(-256); }
	def m4616():void { var l:Int = (-2147483647)+(32767); }
	def m4617():void { var l:Int = (-2147483647)+(-32767); }
	def m4618():void { var l:Int = (-2147483647)+(32768); }
	def m4619():void { var l:Int = (-2147483647)+(-32768); }
	def m4620():void { var l:Int = (-2147483647)+(65535); }
	def m4621():void { var l:Int = (-2147483647)+(-65535); }
	def m4622():void { var l:Int = (-2147483647)+(65536); }
	def m4623():void { var l:Int = (-2147483647)+(-65536); }
	def m4624():void { var l:Int = (-2147483647)+(16777216); }
	def m4625():void { var l:Int = (-2147483647)+(-16777216); }
	def m4626():void { var l:Int = (-2147483647)+(16777217); }
	def m4627():void { var l:Int = (-2147483647)+(-16777217); }
	def m4628():void { var l:Int = (-2147483647)+(2147483647); }
	def m4629():void { var l:Int = (-2147483647)+(-2147483647); }
	def m4630():void { var l:Long = (w0)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4631():void { var l:Long = (w0)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w0)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4632():void { var l:Long = (w0)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4633():void { var l:Long = (w0)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4634():void { var l:Long = (w0)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((SignedTests.this.w4))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4635():void { var l:Long = (w0)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4636():void { var l:Long = (w0)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((0))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4637():void { var l:Long = (w0)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((0))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4638():void { var l:Long = (w0)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((1))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4639():void { var l:Long = (w0)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-1))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4640():void { var l:Long = (w0)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w0)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4641():void { var l:Long = (w0)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w0)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4642():void { var l:Long = (w0)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((127))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4643():void { var l:Long = (w0)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-127))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4644():void { var l:Long = (w0)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((128))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4645():void { var l:Long = (w0)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-128))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4646():void { var l:Long = (w0)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((255))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4647():void { var l:Long = (w0)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-255))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4648():void { var l:Long = (w0)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((256))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4649():void { var l:Long = (w0)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-256))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4650():void { var l:Long = (w0)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((32767))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4651():void { var l:Long = (w0)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-32767))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4652():void { var l:Long = (w0)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((32768))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4653():void { var l:Long = (w0)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-32768))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4654():void { var l:Long = (w0)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((65535))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4655():void { var l:Long = (w0)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-65535))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4656():void { var l:Long = (w0)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((65536))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4657():void { var l:Long = (w0)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-65536))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4658():void { var l:Long = (w0)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((16777216))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4659():void { var l:Long = (w0)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-16777216))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4660():void { var l:Long = (w0)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((16777217))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4661():void { var l:Long = (w0)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-16777217))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4662():void { var l:Long = (w0)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((2147483647))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4663():void { var l:Long = (w0)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4664():void { var l:Long = (w1)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w0))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4665():void { var l:Long = (w1)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4666():void { var l:Long = (w1)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4667():void { var l:Long = (w1)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4668():void { var l:Long = (w1)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w4))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4669():void { var l:Long = (w1)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4670():void { var l:Long = (w1)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4671():void { var l:Long = (w1)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4672():void { var l:Long = (w1)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((1))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4673():void { var l:Long = (w1)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-1))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4674():void { var l:Long = (w1)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4675():void { var l:Long = (w1)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4676():void { var l:Long = (w1)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((127))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4677():void { var l:Long = (w1)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-127))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4678():void { var l:Long = (w1)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((128))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4679():void { var l:Long = (w1)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-128))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4680():void { var l:Long = (w1)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((255))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4681():void { var l:Long = (w1)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-255))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4682():void { var l:Long = (w1)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((256))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4683():void { var l:Long = (w1)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-256))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4684():void { var l:Long = (w1)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((32767))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4685():void { var l:Long = (w1)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-32767))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4686():void { var l:Long = (w1)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((32768))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4687():void { var l:Long = (w1)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-32768))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4688():void { var l:Long = (w1)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((65535))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4689():void { var l:Long = (w1)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-65535))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4690():void { var l:Long = (w1)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((65536))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4691():void { var l:Long = (w1)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-65536))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4692():void { var l:Long = (w1)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((16777216))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4693():void { var l:Long = (w1)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-16777216))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4694():void { var l:Long = (w1)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((16777217))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4695():void { var l:Long = (w1)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-16777217))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4696():void { var l:Long = (w1)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((2147483647))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4697():void { var l:Long = (w1)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4698():void { var l:Long = (w2)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((SignedTests.this.w2)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4699():void { var l:Long = (w2)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w2)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4700():void { var l:Long = (w2)+(w2); }
	def m4701():void { var l:Long = (w2)+(w3); }
	def m4702():void { var l:Long = (w2)+(w4); }
	def m4703():void { var l:Long = (w2)+(w5); }
	def m4704():void { var l:Long = (w2)+(0); }
	def m4705():void { var l:Long = (w2)+(-0); }
	def m4706():void { var l:Long = (w2)+(1); }
	def m4707():void { var l:Long = (w2)+(-1); }
	def m4708():void { var l:Long = (w2)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w2)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4709():void { var l:Long = (w2)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w2)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4710():void { var l:Long = (w2)+(127); }
	def m4711():void { var l:Long = (w2)+(-127); }
	def m4712():void { var l:Long = (w2)+(128); }
	def m4713():void { var l:Long = (w2)+(-128); }
	def m4714():void { var l:Long = (w2)+(255); }
	def m4715():void { var l:Long = (w2)+(-255); }
	def m4716():void { var l:Long = (w2)+(256); }
	def m4717():void { var l:Long = (w2)+(-256); }
	def m4718():void { var l:Long = (w2)+(32767); }
	def m4719():void { var l:Long = (w2)+(-32767); }
	def m4720():void { var l:Long = (w2)+(32768); }
	def m4721():void { var l:Long = (w2)+(-32768); }
	def m4722():void { var l:Long = (w2)+(65535); }
	def m4723():void { var l:Long = (w2)+(-65535); }
	def m4724():void { var l:Long = (w2)+(65536); }
	def m4725():void { var l:Long = (w2)+(-65536); }
	def m4726():void { var l:Long = (w2)+(16777216); }
	def m4727():void { var l:Long = (w2)+(-16777216); }
	def m4728():void { var l:Long = (w2)+(16777217); }
	def m4729():void { var l:Long = (w2)+(-16777217); }
	def m4730():void { var l:Long = (w2)+(2147483647); }
	def m4731():void { var l:Long = (w2)+(-2147483647); }
	def m4732():void { var l:Long = (w3)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((SignedTests.this.w3)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4733():void { var l:Long = (w3)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w3)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4734():void { var l:Long = (w3)+(w2); }
	def m4735():void { var l:Long = (w3)+(w3); }
	def m4736():void { var l:Long = (w3)+(w4); }
	def m4737():void { var l:Long = (w3)+(w5); }
	def m4738():void { var l:Long = (w3)+(0); }
	def m4739():void { var l:Long = (w3)+(-0); }
	def m4740():void { var l:Long = (w3)+(1); }
	def m4741():void { var l:Long = (w3)+(-1); }
	def m4742():void { var l:Long = (w3)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w3)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4743():void { var l:Long = (w3)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w3)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4744():void { var l:Long = (w3)+(127); }
	def m4745():void { var l:Long = (w3)+(-127); }
	def m4746():void { var l:Long = (w3)+(128); }
	def m4747():void { var l:Long = (w3)+(-128); }
	def m4748():void { var l:Long = (w3)+(255); }
	def m4749():void { var l:Long = (w3)+(-255); }
	def m4750():void { var l:Long = (w3)+(256); }
	def m4751():void { var l:Long = (w3)+(-256); }
	def m4752():void { var l:Long = (w3)+(32767); }
	def m4753():void { var l:Long = (w3)+(-32767); }
	def m4754():void { var l:Long = (w3)+(32768); }
	def m4755():void { var l:Long = (w3)+(-32768); }
	def m4756():void { var l:Long = (w3)+(65535); }
	def m4757():void { var l:Long = (w3)+(-65535); }
	def m4758():void { var l:Long = (w3)+(65536); }
	def m4759():void { var l:Long = (w3)+(-65536); }
	def m4760():void { var l:Long = (w3)+(16777216); }
	def m4761():void { var l:Long = (w3)+(-16777216); }
	def m4762():void { var l:Long = (w3)+(16777217); }
	def m4763():void { var l:Long = (w3)+(-16777217); }
	def m4764():void { var l:Long = (w3)+(2147483647); }
	def m4765():void { var l:Long = (w3)+(-2147483647); }
	def m4766():void { var l:Long = (w4)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((SignedTests.this.w4)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4767():void { var l:Long = (w4)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w4)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4768():void { var l:Long = (w4)+(w2); }
	def m4769():void { var l:Long = (w4)+(w3); }
	def m4770():void { var l:Long = (w4)+(w4); }
	def m4771():void { var l:Long = (w4)+(w5); }
	def m4772():void { var l:Long = (w4)+(0); }
	def m4773():void { var l:Long = (w4)+(-0); }
	def m4774():void { var l:Long = (w4)+(1); }
	def m4775():void { var l:Long = (w4)+(-1); }
	def m4776():void { var l:Long = (w4)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w4)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4777():void { var l:Long = (w4)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w4)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4778():void { var l:Long = (w4)+(127); }
	def m4779():void { var l:Long = (w4)+(-127); }
	def m4780():void { var l:Long = (w4)+(128); }
	def m4781():void { var l:Long = (w4)+(-128); }
	def m4782():void { var l:Long = (w4)+(255); }
	def m4783():void { var l:Long = (w4)+(-255); }
	def m4784():void { var l:Long = (w4)+(256); }
	def m4785():void { var l:Long = (w4)+(-256); }
	def m4786():void { var l:Long = (w4)+(32767); }
	def m4787():void { var l:Long = (w4)+(-32767); }
	def m4788():void { var l:Long = (w4)+(32768); }
	def m4789():void { var l:Long = (w4)+(-32768); }
	def m4790():void { var l:Long = (w4)+(65535); }
	def m4791():void { var l:Long = (w4)+(-65535); }
	def m4792():void { var l:Long = (w4)+(65536); }
	def m4793():void { var l:Long = (w4)+(-65536); }
	def m4794():void { var l:Long = (w4)+(16777216); }
	def m4795():void { var l:Long = (w4)+(-16777216); }
	def m4796():void { var l:Long = (w4)+(16777217); }
	def m4797():void { var l:Long = (w4)+(-16777217); }
	def m4798():void { var l:Long = (w4)+(2147483647); }
	def m4799():void { var l:Long = (w4)+(-2147483647); }
	def m4800():void { var l:Long = (w5)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((SignedTests.this.w5)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4801():void { var l:Long = (w5)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w5)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4802():void { var l:Long = (w5)+(w2); }
	def m4803():void { var l:Long = (w5)+(w3); }
	def m4804():void { var l:Long = (w5)+(w4); }
	def m4805():void { var l:Long = (w5)+(w5); }
	def m4806():void { var l:Long = (w5)+(0); }
	def m4807():void { var l:Long = (w5)+(-0); }
	def m4808():void { var l:Long = (w5)+(1); }
	def m4809():void { var l:Long = (w5)+(-1); }
	def m4810():void { var l:Long = (w5)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w5)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4811():void { var l:Long = (w5)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w5)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4812():void { var l:Long = (w5)+(127); }
	def m4813():void { var l:Long = (w5)+(-127); }
	def m4814():void { var l:Long = (w5)+(128); }
	def m4815():void { var l:Long = (w5)+(-128); }
	def m4816():void { var l:Long = (w5)+(255); }
	def m4817():void { var l:Long = (w5)+(-255); }
	def m4818():void { var l:Long = (w5)+(256); }
	def m4819():void { var l:Long = (w5)+(-256); }
	def m4820():void { var l:Long = (w5)+(32767); }
	def m4821():void { var l:Long = (w5)+(-32767); }
	def m4822():void { var l:Long = (w5)+(32768); }
	def m4823():void { var l:Long = (w5)+(-32768); }
	def m4824():void { var l:Long = (w5)+(65535); }
	def m4825():void { var l:Long = (w5)+(-65535); }
	def m4826():void { var l:Long = (w5)+(65536); }
	def m4827():void { var l:Long = (w5)+(-65536); }
	def m4828():void { var l:Long = (w5)+(16777216); }
	def m4829():void { var l:Long = (w5)+(-16777216); }
	def m4830():void { var l:Long = (w5)+(16777217); }
	def m4831():void { var l:Long = (w5)+(-16777217); }
	def m4832():void { var l:Long = (w5)+(2147483647); }
	def m4833():void { var l:Long = (w5)+(-2147483647); }
	def m4834():void { var l:Long = (0)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((0)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4835():void { var l:Long = (0)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4836():void { var l:Long = (0)+(w2); }
	def m4837():void { var l:Long = (0)+(w3); }
	def m4838():void { var l:Long = (0)+(w4); }
	def m4839():void { var l:Long = (0)+(w5); }
	def m4840():void { var l:Long = (0)+(0); }
	def m4841():void { var l:Long = (0)+(-0); }
	def m4842():void { var l:Long = (0)+(1); }
	def m4843():void { var l:Long = (0)+(-1); }
	def m4844():void { var l:Long = (0)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4845():void { var l:Long = (0)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4846():void { var l:Long = (0)+(127); }
	def m4847():void { var l:Long = (0)+(-127); }
	def m4848():void { var l:Long = (0)+(128); }
	def m4849():void { var l:Long = (0)+(-128); }
	def m4850():void { var l:Long = (0)+(255); }
	def m4851():void { var l:Long = (0)+(-255); }
	def m4852():void { var l:Long = (0)+(256); }
	def m4853():void { var l:Long = (0)+(-256); }
	def m4854():void { var l:Long = (0)+(32767); }
	def m4855():void { var l:Long = (0)+(-32767); }
	def m4856():void { var l:Long = (0)+(32768); }
	def m4857():void { var l:Long = (0)+(-32768); }
	def m4858():void { var l:Long = (0)+(65535); }
	def m4859():void { var l:Long = (0)+(-65535); }
	def m4860():void { var l:Long = (0)+(65536); }
	def m4861():void { var l:Long = (0)+(-65536); }
	def m4862():void { var l:Long = (0)+(16777216); }
	def m4863():void { var l:Long = (0)+(-16777216); }
	def m4864():void { var l:Long = (0)+(16777217); }
	def m4865():void { var l:Long = (0)+(-16777217); }
	def m4866():void { var l:Long = (0)+(2147483647); }
	def m4867():void { var l:Long = (0)+(-2147483647); }
	def m4868():void { var l:Long = (-0)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((0)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4869():void { var l:Long = (-0)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4870():void { var l:Long = (-0)+(w2); }
	def m4871():void { var l:Long = (-0)+(w3); }
	def m4872():void { var l:Long = (-0)+(w4); }
	def m4873():void { var l:Long = (-0)+(w5); }
	def m4874():void { var l:Long = (-0)+(0); }
	def m4875():void { var l:Long = (-0)+(-0); }
	def m4876():void { var l:Long = (-0)+(1); }
	def m4877():void { var l:Long = (-0)+(-1); }
	def m4878():void { var l:Long = (-0)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4879():void { var l:Long = (-0)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4880():void { var l:Long = (-0)+(127); }
	def m4881():void { var l:Long = (-0)+(-127); }
	def m4882():void { var l:Long = (-0)+(128); }
	def m4883():void { var l:Long = (-0)+(-128); }
	def m4884():void { var l:Long = (-0)+(255); }
	def m4885():void { var l:Long = (-0)+(-255); }
	def m4886():void { var l:Long = (-0)+(256); }
	def m4887():void { var l:Long = (-0)+(-256); }
	def m4888():void { var l:Long = (-0)+(32767); }
	def m4889():void { var l:Long = (-0)+(-32767); }
	def m4890():void { var l:Long = (-0)+(32768); }
	def m4891():void { var l:Long = (-0)+(-32768); }
	def m4892():void { var l:Long = (-0)+(65535); }
	def m4893():void { var l:Long = (-0)+(-65535); }
	def m4894():void { var l:Long = (-0)+(65536); }
	def m4895():void { var l:Long = (-0)+(-65536); }
	def m4896():void { var l:Long = (-0)+(16777216); }
	def m4897():void { var l:Long = (-0)+(-16777216); }
	def m4898():void { var l:Long = (-0)+(16777217); }
	def m4899():void { var l:Long = (-0)+(-16777217); }
	def m4900():void { var l:Long = (-0)+(2147483647); }
	def m4901():void { var l:Long = (-0)+(-2147483647); }
	def m4902():void { var l:Long = (1)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((1)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4903():void { var l:Long = (1)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((1)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4904():void { var l:Long = (1)+(w2); }
	def m4905():void { var l:Long = (1)+(w3); }
	def m4906():void { var l:Long = (1)+(w4); }
	def m4907():void { var l:Long = (1)+(w5); }
	def m4908():void { var l:Long = (1)+(0); }
	def m4909():void { var l:Long = (1)+(-0); }
	def m4910():void { var l:Long = (1)+(1); }
	def m4911():void { var l:Long = (1)+(-1); }
	def m4912():void { var l:Long = (1)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((1)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4913():void { var l:Long = (1)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((1)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4914():void { var l:Long = (1)+(127); }
	def m4915():void { var l:Long = (1)+(-127); }
	def m4916():void { var l:Long = (1)+(128); }
	def m4917():void { var l:Long = (1)+(-128); }
	def m4918():void { var l:Long = (1)+(255); }
	def m4919():void { var l:Long = (1)+(-255); }
	def m4920():void { var l:Long = (1)+(256); }
	def m4921():void { var l:Long = (1)+(-256); }
	def m4922():void { var l:Long = (1)+(32767); }
	def m4923():void { var l:Long = (1)+(-32767); }
	def m4924():void { var l:Long = (1)+(32768); }
	def m4925():void { var l:Long = (1)+(-32768); }
	def m4926():void { var l:Long = (1)+(65535); }
	def m4927():void { var l:Long = (1)+(-65535); }
	def m4928():void { var l:Long = (1)+(65536); }
	def m4929():void { var l:Long = (1)+(-65536); }
	def m4930():void { var l:Long = (1)+(16777216); }
	def m4931():void { var l:Long = (1)+(-16777216); }
	def m4932():void { var l:Long = (1)+(16777217); }
	def m4933():void { var l:Long = (1)+(-16777217); }
	def m4934():void { var l:Long = (1)+(2147483647); }
	def m4935():void { var l:Long = (1)+(-2147483647); }
	def m4936():void { var l:Long = (-1)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-1)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m4937():void { var l:Long = (-1)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-1)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4938():void { var l:Long = (-1)+(w2); }
	def m4939():void { var l:Long = (-1)+(w3); }
	def m4940():void { var l:Long = (-1)+(w4); }
	def m4941():void { var l:Long = (-1)+(w5); }
	def m4942():void { var l:Long = (-1)+(0); }
	def m4943():void { var l:Long = (-1)+(-0); }
	def m4944():void { var l:Long = (-1)+(1); }
	def m4945():void { var l:Long = (-1)+(-1); }
	def m4946():void { var l:Long = (-1)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-1)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4947():void { var l:Long = (-1)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-1)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4948():void { var l:Long = (-1)+(127); }
	def m4949():void { var l:Long = (-1)+(-127); }
	def m4950():void { var l:Long = (-1)+(128); }
	def m4951():void { var l:Long = (-1)+(-128); }
	def m4952():void { var l:Long = (-1)+(255); }
	def m4953():void { var l:Long = (-1)+(-255); }
	def m4954():void { var l:Long = (-1)+(256); }
	def m4955():void { var l:Long = (-1)+(-256); }
	def m4956():void { var l:Long = (-1)+(32767); }
	def m4957():void { var l:Long = (-1)+(-32767); }
	def m4958():void { var l:Long = (-1)+(32768); }
	def m4959():void { var l:Long = (-1)+(-32768); }
	def m4960():void { var l:Long = (-1)+(65535); }
	def m4961():void { var l:Long = (-1)+(-65535); }
	def m4962():void { var l:Long = (-1)+(65536); }
	def m4963():void { var l:Long = (-1)+(-65536); }
	def m4964():void { var l:Long = (-1)+(16777216); }
	def m4965():void { var l:Long = (-1)+(-16777216); }
	def m4966():void { var l:Long = (-1)+(16777217); }
	def m4967():void { var l:Long = (-1)+(-16777217); }
	def m4968():void { var l:Long = (-1)+(2147483647); }
	def m4969():void { var l:Long = (-1)+(-2147483647); }
	def m4970():void { var l:Long = (2.2)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w0))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4971():void { var l:Long = (2.2)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4972():void { var l:Long = (2.2)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4973():void { var l:Long = (2.2)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4974():void { var l:Long = (2.2)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w4))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4975():void { var l:Long = (2.2)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4976():void { var l:Long = (2.2)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4977():void { var l:Long = (2.2)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4978():void { var l:Long = (2.2)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((1))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4979():void { var l:Long = (2.2)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-1))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4980():void { var l:Long = (2.2)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4981():void { var l:Long = (2.2)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4982():void { var l:Long = (2.2)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((127))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4983():void { var l:Long = (2.2)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-127))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4984():void { var l:Long = (2.2)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((128))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4985():void { var l:Long = (2.2)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-128))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4986():void { var l:Long = (2.2)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((255))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4987():void { var l:Long = (2.2)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-255))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4988():void { var l:Long = (2.2)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((256))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4989():void { var l:Long = (2.2)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-256))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4990():void { var l:Long = (2.2)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((32767))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4991():void { var l:Long = (2.2)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-32767))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4992():void { var l:Long = (2.2)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((32768))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4993():void { var l:Long = (2.2)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-32768))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4994():void { var l:Long = (2.2)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((65535))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4995():void { var l:Long = (2.2)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-65535))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4996():void { var l:Long = (2.2)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((65536))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4997():void { var l:Long = (2.2)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-65536))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4998():void { var l:Long = (2.2)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((16777216))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m4999():void { var l:Long = (2.2)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-16777216))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5000():void { var l:Long = (2.2)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((16777217))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5001():void { var l:Long = (2.2)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-16777217))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5002():void { var l:Long = (2.2)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((2147483647))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5003():void { var l:Long = (2.2)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5004():void { var l:Long = (-2.2)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w0))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5005():void { var l:Long = (-2.2)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5006():void { var l:Long = (-2.2)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5007():void { var l:Long = (-2.2)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5008():void { var l:Long = (-2.2)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w4))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5009():void { var l:Long = (-2.2)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5010():void { var l:Long = (-2.2)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5011():void { var l:Long = (-2.2)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5012():void { var l:Long = (-2.2)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((1))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5013():void { var l:Long = (-2.2)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-1))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5014():void { var l:Long = (-2.2)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5015():void { var l:Long = (-2.2)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5016():void { var l:Long = (-2.2)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((127))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5017():void { var l:Long = (-2.2)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-127))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5018():void { var l:Long = (-2.2)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((128))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5019():void { var l:Long = (-2.2)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-128))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5020():void { var l:Long = (-2.2)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((255))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5021():void { var l:Long = (-2.2)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-255))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5022():void { var l:Long = (-2.2)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((256))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5023():void { var l:Long = (-2.2)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-256))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5024():void { var l:Long = (-2.2)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((32767))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5025():void { var l:Long = (-2.2)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-32767))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5026():void { var l:Long = (-2.2)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((32768))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5027():void { var l:Long = (-2.2)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-32768))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5028():void { var l:Long = (-2.2)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((65535))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5029():void { var l:Long = (-2.2)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-65535))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5030():void { var l:Long = (-2.2)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((65536))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5031():void { var l:Long = (-2.2)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-65536))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5032():void { var l:Long = (-2.2)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((16777216))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5033():void { var l:Long = (-2.2)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-16777216))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5034():void { var l:Long = (-2.2)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((16777217))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5035():void { var l:Long = (-2.2)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-16777217))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5036():void { var l:Long = (-2.2)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((2147483647))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5037():void { var l:Long = (-2.2)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5038():void { var l:Long = (127)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((127)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5039():void { var l:Long = (127)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((127)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5040():void { var l:Long = (127)+(w2); }
	def m5041():void { var l:Long = (127)+(w3); }
	def m5042():void { var l:Long = (127)+(w4); }
	def m5043():void { var l:Long = (127)+(w5); }
	def m5044():void { var l:Long = (127)+(0); }
	def m5045():void { var l:Long = (127)+(-0); }
	def m5046():void { var l:Long = (127)+(1); }
	def m5047():void { var l:Long = (127)+(-1); }
	def m5048():void { var l:Long = (127)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((127)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5049():void { var l:Long = (127)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((127)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5050():void { var l:Long = (127)+(127); }
	def m5051():void { var l:Long = (127)+(-127); }
	def m5052():void { var l:Long = (127)+(128); }
	def m5053():void { var l:Long = (127)+(-128); }
	def m5054():void { var l:Long = (127)+(255); }
	def m5055():void { var l:Long = (127)+(-255); }
	def m5056():void { var l:Long = (127)+(256); }
	def m5057():void { var l:Long = (127)+(-256); }
	def m5058():void { var l:Long = (127)+(32767); }
	def m5059():void { var l:Long = (127)+(-32767); }
	def m5060():void { var l:Long = (127)+(32768); }
	def m5061():void { var l:Long = (127)+(-32768); }
	def m5062():void { var l:Long = (127)+(65535); }
	def m5063():void { var l:Long = (127)+(-65535); }
	def m5064():void { var l:Long = (127)+(65536); }
	def m5065():void { var l:Long = (127)+(-65536); }
	def m5066():void { var l:Long = (127)+(16777216); }
	def m5067():void { var l:Long = (127)+(-16777216); }
	def m5068():void { var l:Long = (127)+(16777217); }
	def m5069():void { var l:Long = (127)+(-16777217); }
	def m5070():void { var l:Long = (127)+(2147483647); }
	def m5071():void { var l:Long = (127)+(-2147483647); }
	def m5072():void { var l:Long = (-127)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-127)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5073():void { var l:Long = (-127)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-127)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5074():void { var l:Long = (-127)+(w2); }
	def m5075():void { var l:Long = (-127)+(w3); }
	def m5076():void { var l:Long = (-127)+(w4); }
	def m5077():void { var l:Long = (-127)+(w5); }
	def m5078():void { var l:Long = (-127)+(0); }
	def m5079():void { var l:Long = (-127)+(-0); }
	def m5080():void { var l:Long = (-127)+(1); }
	def m5081():void { var l:Long = (-127)+(-1); }
	def m5082():void { var l:Long = (-127)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-127)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5083():void { var l:Long = (-127)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-127)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5084():void { var l:Long = (-127)+(127); }
	def m5085():void { var l:Long = (-127)+(-127); }
	def m5086():void { var l:Long = (-127)+(128); }
	def m5087():void { var l:Long = (-127)+(-128); }
	def m5088():void { var l:Long = (-127)+(255); }
	def m5089():void { var l:Long = (-127)+(-255); }
	def m5090():void { var l:Long = (-127)+(256); }
	def m5091():void { var l:Long = (-127)+(-256); }
	def m5092():void { var l:Long = (-127)+(32767); }
	def m5093():void { var l:Long = (-127)+(-32767); }
	def m5094():void { var l:Long = (-127)+(32768); }
	def m5095():void { var l:Long = (-127)+(-32768); }
	def m5096():void { var l:Long = (-127)+(65535); }
	def m5097():void { var l:Long = (-127)+(-65535); }
	def m5098():void { var l:Long = (-127)+(65536); }
	def m5099():void { var l:Long = (-127)+(-65536); }
	def m5100():void { var l:Long = (-127)+(16777216); }
	def m5101():void { var l:Long = (-127)+(-16777216); }
	def m5102():void { var l:Long = (-127)+(16777217); }
	def m5103():void { var l:Long = (-127)+(-16777217); }
	def m5104():void { var l:Long = (-127)+(2147483647); }
	def m5105():void { var l:Long = (-127)+(-2147483647); }
	def m5106():void { var l:Long = (128)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((128)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5107():void { var l:Long = (128)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((128)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5108():void { var l:Long = (128)+(w2); }
	def m5109():void { var l:Long = (128)+(w3); }
	def m5110():void { var l:Long = (128)+(w4); }
	def m5111():void { var l:Long = (128)+(w5); }
	def m5112():void { var l:Long = (128)+(0); }
	def m5113():void { var l:Long = (128)+(-0); }
	def m5114():void { var l:Long = (128)+(1); }
	def m5115():void { var l:Long = (128)+(-1); }
	def m5116():void { var l:Long = (128)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((128)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5117():void { var l:Long = (128)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((128)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5118():void { var l:Long = (128)+(127); }
	def m5119():void { var l:Long = (128)+(-127); }
	def m5120():void { var l:Long = (128)+(128); }
	def m5121():void { var l:Long = (128)+(-128); }
	def m5122():void { var l:Long = (128)+(255); }
	def m5123():void { var l:Long = (128)+(-255); }
	def m5124():void { var l:Long = (128)+(256); }
	def m5125():void { var l:Long = (128)+(-256); }
	def m5126():void { var l:Long = (128)+(32767); }
	def m5127():void { var l:Long = (128)+(-32767); }
	def m5128():void { var l:Long = (128)+(32768); }
	def m5129():void { var l:Long = (128)+(-32768); }
	def m5130():void { var l:Long = (128)+(65535); }
	def m5131():void { var l:Long = (128)+(-65535); }
	def m5132():void { var l:Long = (128)+(65536); }
	def m5133():void { var l:Long = (128)+(-65536); }
	def m5134():void { var l:Long = (128)+(16777216); }
	def m5135():void { var l:Long = (128)+(-16777216); }
	def m5136():void { var l:Long = (128)+(16777217); }
	def m5137():void { var l:Long = (128)+(-16777217); }
	def m5138():void { var l:Long = (128)+(2147483647); }
	def m5139():void { var l:Long = (128)+(-2147483647); }
	def m5140():void { var l:Long = (-128)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-128)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5141():void { var l:Long = (-128)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-128)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5142():void { var l:Long = (-128)+(w2); }
	def m5143():void { var l:Long = (-128)+(w3); }
	def m5144():void { var l:Long = (-128)+(w4); }
	def m5145():void { var l:Long = (-128)+(w5); }
	def m5146():void { var l:Long = (-128)+(0); }
	def m5147():void { var l:Long = (-128)+(-0); }
	def m5148():void { var l:Long = (-128)+(1); }
	def m5149():void { var l:Long = (-128)+(-1); }
	def m5150():void { var l:Long = (-128)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-128)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5151():void { var l:Long = (-128)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-128)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5152():void { var l:Long = (-128)+(127); }
	def m5153():void { var l:Long = (-128)+(-127); }
	def m5154():void { var l:Long = (-128)+(128); }
	def m5155():void { var l:Long = (-128)+(-128); }
	def m5156():void { var l:Long = (-128)+(255); }
	def m5157():void { var l:Long = (-128)+(-255); }
	def m5158():void { var l:Long = (-128)+(256); }
	def m5159():void { var l:Long = (-128)+(-256); }
	def m5160():void { var l:Long = (-128)+(32767); }
	def m5161():void { var l:Long = (-128)+(-32767); }
	def m5162():void { var l:Long = (-128)+(32768); }
	def m5163():void { var l:Long = (-128)+(-32768); }
	def m5164():void { var l:Long = (-128)+(65535); }
	def m5165():void { var l:Long = (-128)+(-65535); }
	def m5166():void { var l:Long = (-128)+(65536); }
	def m5167():void { var l:Long = (-128)+(-65536); }
	def m5168():void { var l:Long = (-128)+(16777216); }
	def m5169():void { var l:Long = (-128)+(-16777216); }
	def m5170():void { var l:Long = (-128)+(16777217); }
	def m5171():void { var l:Long = (-128)+(-16777217); }
	def m5172():void { var l:Long = (-128)+(2147483647); }
	def m5173():void { var l:Long = (-128)+(-2147483647); }
	def m5174():void { var l:Long = (255)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((255)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5175():void { var l:Long = (255)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((255)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5176():void { var l:Long = (255)+(w2); }
	def m5177():void { var l:Long = (255)+(w3); }
	def m5178():void { var l:Long = (255)+(w4); }
	def m5179():void { var l:Long = (255)+(w5); }
	def m5180():void { var l:Long = (255)+(0); }
	def m5181():void { var l:Long = (255)+(-0); }
	def m5182():void { var l:Long = (255)+(1); }
	def m5183():void { var l:Long = (255)+(-1); }
	def m5184():void { var l:Long = (255)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((255)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5185():void { var l:Long = (255)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((255)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5186():void { var l:Long = (255)+(127); }
	def m5187():void { var l:Long = (255)+(-127); }
	def m5188():void { var l:Long = (255)+(128); }
	def m5189():void { var l:Long = (255)+(-128); }
	def m5190():void { var l:Long = (255)+(255); }
	def m5191():void { var l:Long = (255)+(-255); }
	def m5192():void { var l:Long = (255)+(256); }
	def m5193():void { var l:Long = (255)+(-256); }
	def m5194():void { var l:Long = (255)+(32767); }
	def m5195():void { var l:Long = (255)+(-32767); }
	def m5196():void { var l:Long = (255)+(32768); }
	def m5197():void { var l:Long = (255)+(-32768); }
	def m5198():void { var l:Long = (255)+(65535); }
	def m5199():void { var l:Long = (255)+(-65535); }
	def m5200():void { var l:Long = (255)+(65536); }
	def m5201():void { var l:Long = (255)+(-65536); }
	def m5202():void { var l:Long = (255)+(16777216); }
	def m5203():void { var l:Long = (255)+(-16777216); }
	def m5204():void { var l:Long = (255)+(16777217); }
	def m5205():void { var l:Long = (255)+(-16777217); }
	def m5206():void { var l:Long = (255)+(2147483647); }
	def m5207():void { var l:Long = (255)+(-2147483647); }
	def m5208():void { var l:Long = (-255)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-255)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5209():void { var l:Long = (-255)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-255)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5210():void { var l:Long = (-255)+(w2); }
	def m5211():void { var l:Long = (-255)+(w3); }
	def m5212():void { var l:Long = (-255)+(w4); }
	def m5213():void { var l:Long = (-255)+(w5); }
	def m5214():void { var l:Long = (-255)+(0); }
	def m5215():void { var l:Long = (-255)+(-0); }
	def m5216():void { var l:Long = (-255)+(1); }
	def m5217():void { var l:Long = (-255)+(-1); }
	def m5218():void { var l:Long = (-255)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-255)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5219():void { var l:Long = (-255)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-255)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5220():void { var l:Long = (-255)+(127); }
	def m5221():void { var l:Long = (-255)+(-127); }
	def m5222():void { var l:Long = (-255)+(128); }
	def m5223():void { var l:Long = (-255)+(-128); }
	def m5224():void { var l:Long = (-255)+(255); }
	def m5225():void { var l:Long = (-255)+(-255); }
	def m5226():void { var l:Long = (-255)+(256); }
	def m5227():void { var l:Long = (-255)+(-256); }
	def m5228():void { var l:Long = (-255)+(32767); }
	def m5229():void { var l:Long = (-255)+(-32767); }
	def m5230():void { var l:Long = (-255)+(32768); }
	def m5231():void { var l:Long = (-255)+(-32768); }
	def m5232():void { var l:Long = (-255)+(65535); }
	def m5233():void { var l:Long = (-255)+(-65535); }
	def m5234():void { var l:Long = (-255)+(65536); }
	def m5235():void { var l:Long = (-255)+(-65536); }
	def m5236():void { var l:Long = (-255)+(16777216); }
	def m5237():void { var l:Long = (-255)+(-16777216); }
	def m5238():void { var l:Long = (-255)+(16777217); }
	def m5239():void { var l:Long = (-255)+(-16777217); }
	def m5240():void { var l:Long = (-255)+(2147483647); }
	def m5241():void { var l:Long = (-255)+(-2147483647); }
	def m5242():void { var l:Long = (256)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((256)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5243():void { var l:Long = (256)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((256)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5244():void { var l:Long = (256)+(w2); }
	def m5245():void { var l:Long = (256)+(w3); }
	def m5246():void { var l:Long = (256)+(w4); }
	def m5247():void { var l:Long = (256)+(w5); }
	def m5248():void { var l:Long = (256)+(0); }
	def m5249():void { var l:Long = (256)+(-0); }
	def m5250():void { var l:Long = (256)+(1); }
	def m5251():void { var l:Long = (256)+(-1); }
	def m5252():void { var l:Long = (256)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((256)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5253():void { var l:Long = (256)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((256)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5254():void { var l:Long = (256)+(127); }
	def m5255():void { var l:Long = (256)+(-127); }
	def m5256():void { var l:Long = (256)+(128); }
	def m5257():void { var l:Long = (256)+(-128); }
	def m5258():void { var l:Long = (256)+(255); }
	def m5259():void { var l:Long = (256)+(-255); }
	def m5260():void { var l:Long = (256)+(256); }
	def m5261():void { var l:Long = (256)+(-256); }
	def m5262():void { var l:Long = (256)+(32767); }
	def m5263():void { var l:Long = (256)+(-32767); }
	def m5264():void { var l:Long = (256)+(32768); }
	def m5265():void { var l:Long = (256)+(-32768); }
	def m5266():void { var l:Long = (256)+(65535); }
	def m5267():void { var l:Long = (256)+(-65535); }
	def m5268():void { var l:Long = (256)+(65536); }
	def m5269():void { var l:Long = (256)+(-65536); }
	def m5270():void { var l:Long = (256)+(16777216); }
	def m5271():void { var l:Long = (256)+(-16777216); }
	def m5272():void { var l:Long = (256)+(16777217); }
	def m5273():void { var l:Long = (256)+(-16777217); }
	def m5274():void { var l:Long = (256)+(2147483647); }
	def m5275():void { var l:Long = (256)+(-2147483647); }
	def m5276():void { var l:Long = (-256)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-256)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5277():void { var l:Long = (-256)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-256)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5278():void { var l:Long = (-256)+(w2); }
	def m5279():void { var l:Long = (-256)+(w3); }
	def m5280():void { var l:Long = (-256)+(w4); }
	def m5281():void { var l:Long = (-256)+(w5); }
	def m5282():void { var l:Long = (-256)+(0); }
	def m5283():void { var l:Long = (-256)+(-0); }
	def m5284():void { var l:Long = (-256)+(1); }
	def m5285():void { var l:Long = (-256)+(-1); }
	def m5286():void { var l:Long = (-256)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-256)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5287():void { var l:Long = (-256)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-256)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5288():void { var l:Long = (-256)+(127); }
	def m5289():void { var l:Long = (-256)+(-127); }
	def m5290():void { var l:Long = (-256)+(128); }
	def m5291():void { var l:Long = (-256)+(-128); }
	def m5292():void { var l:Long = (-256)+(255); }
	def m5293():void { var l:Long = (-256)+(-255); }
	def m5294():void { var l:Long = (-256)+(256); }
	def m5295():void { var l:Long = (-256)+(-256); }
	def m5296():void { var l:Long = (-256)+(32767); }
	def m5297():void { var l:Long = (-256)+(-32767); }
	def m5298():void { var l:Long = (-256)+(32768); }
	def m5299():void { var l:Long = (-256)+(-32768); }
	def m5300():void { var l:Long = (-256)+(65535); }
	def m5301():void { var l:Long = (-256)+(-65535); }
	def m5302():void { var l:Long = (-256)+(65536); }
	def m5303():void { var l:Long = (-256)+(-65536); }
	def m5304():void { var l:Long = (-256)+(16777216); }
	def m5305():void { var l:Long = (-256)+(-16777216); }
	def m5306():void { var l:Long = (-256)+(16777217); }
	def m5307():void { var l:Long = (-256)+(-16777217); }
	def m5308():void { var l:Long = (-256)+(2147483647); }
	def m5309():void { var l:Long = (-256)+(-2147483647); }
	def m5310():void { var l:Long = (32767)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((32767)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5311():void { var l:Long = (32767)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32767)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5312():void { var l:Long = (32767)+(w2); }
	def m5313():void { var l:Long = (32767)+(w3); }
	def m5314():void { var l:Long = (32767)+(w4); }
	def m5315():void { var l:Long = (32767)+(w5); }
	def m5316():void { var l:Long = (32767)+(0); }
	def m5317():void { var l:Long = (32767)+(-0); }
	def m5318():void { var l:Long = (32767)+(1); }
	def m5319():void { var l:Long = (32767)+(-1); }
	def m5320():void { var l:Long = (32767)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32767)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5321():void { var l:Long = (32767)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32767)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5322():void { var l:Long = (32767)+(127); }
	def m5323():void { var l:Long = (32767)+(-127); }
	def m5324():void { var l:Long = (32767)+(128); }
	def m5325():void { var l:Long = (32767)+(-128); }
	def m5326():void { var l:Long = (32767)+(255); }
	def m5327():void { var l:Long = (32767)+(-255); }
	def m5328():void { var l:Long = (32767)+(256); }
	def m5329():void { var l:Long = (32767)+(-256); }
	def m5330():void { var l:Long = (32767)+(32767); }
	def m5331():void { var l:Long = (32767)+(-32767); }
	def m5332():void { var l:Long = (32767)+(32768); }
	def m5333():void { var l:Long = (32767)+(-32768); }
	def m5334():void { var l:Long = (32767)+(65535); }
	def m5335():void { var l:Long = (32767)+(-65535); }
	def m5336():void { var l:Long = (32767)+(65536); }
	def m5337():void { var l:Long = (32767)+(-65536); }
	def m5338():void { var l:Long = (32767)+(16777216); }
	def m5339():void { var l:Long = (32767)+(-16777216); }
	def m5340():void { var l:Long = (32767)+(16777217); }
	def m5341():void { var l:Long = (32767)+(-16777217); }
	def m5342():void { var l:Long = (32767)+(2147483647); }
	def m5343():void { var l:Long = (32767)+(-2147483647); }
	def m5344():void { var l:Long = (-32767)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-32767)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5345():void { var l:Long = (-32767)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32767)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5346():void { var l:Long = (-32767)+(w2); }
	def m5347():void { var l:Long = (-32767)+(w3); }
	def m5348():void { var l:Long = (-32767)+(w4); }
	def m5349():void { var l:Long = (-32767)+(w5); }
	def m5350():void { var l:Long = (-32767)+(0); }
	def m5351():void { var l:Long = (-32767)+(-0); }
	def m5352():void { var l:Long = (-32767)+(1); }
	def m5353():void { var l:Long = (-32767)+(-1); }
	def m5354():void { var l:Long = (-32767)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32767)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5355():void { var l:Long = (-32767)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32767)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5356():void { var l:Long = (-32767)+(127); }
	def m5357():void { var l:Long = (-32767)+(-127); }
	def m5358():void { var l:Long = (-32767)+(128); }
	def m5359():void { var l:Long = (-32767)+(-128); }
	def m5360():void { var l:Long = (-32767)+(255); }
	def m5361():void { var l:Long = (-32767)+(-255); }
	def m5362():void { var l:Long = (-32767)+(256); }
	def m5363():void { var l:Long = (-32767)+(-256); }
	def m5364():void { var l:Long = (-32767)+(32767); }
	def m5365():void { var l:Long = (-32767)+(-32767); }
	def m5366():void { var l:Long = (-32767)+(32768); }
	def m5367():void { var l:Long = (-32767)+(-32768); }
	def m5368():void { var l:Long = (-32767)+(65535); }
	def m5369():void { var l:Long = (-32767)+(-65535); }
	def m5370():void { var l:Long = (-32767)+(65536); }
	def m5371():void { var l:Long = (-32767)+(-65536); }
	def m5372():void { var l:Long = (-32767)+(16777216); }
	def m5373():void { var l:Long = (-32767)+(-16777216); }
	def m5374():void { var l:Long = (-32767)+(16777217); }
	def m5375():void { var l:Long = (-32767)+(-16777217); }
	def m5376():void { var l:Long = (-32767)+(2147483647); }
	def m5377():void { var l:Long = (-32767)+(-2147483647); }
	def m5378():void { var l:Long = (32768)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((32768)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5379():void { var l:Long = (32768)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32768)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5380():void { var l:Long = (32768)+(w2); }
	def m5381():void { var l:Long = (32768)+(w3); }
	def m5382():void { var l:Long = (32768)+(w4); }
	def m5383():void { var l:Long = (32768)+(w5); }
	def m5384():void { var l:Long = (32768)+(0); }
	def m5385():void { var l:Long = (32768)+(-0); }
	def m5386():void { var l:Long = (32768)+(1); }
	def m5387():void { var l:Long = (32768)+(-1); }
	def m5388():void { var l:Long = (32768)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32768)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5389():void { var l:Long = (32768)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32768)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5390():void { var l:Long = (32768)+(127); }
	def m5391():void { var l:Long = (32768)+(-127); }
	def m5392():void { var l:Long = (32768)+(128); }
	def m5393():void { var l:Long = (32768)+(-128); }
	def m5394():void { var l:Long = (32768)+(255); }
	def m5395():void { var l:Long = (32768)+(-255); }
	def m5396():void { var l:Long = (32768)+(256); }
	def m5397():void { var l:Long = (32768)+(-256); }
	def m5398():void { var l:Long = (32768)+(32767); }
	def m5399():void { var l:Long = (32768)+(-32767); }
	def m5400():void { var l:Long = (32768)+(32768); }
	def m5401():void { var l:Long = (32768)+(-32768); }
	def m5402():void { var l:Long = (32768)+(65535); }
	def m5403():void { var l:Long = (32768)+(-65535); }
	def m5404():void { var l:Long = (32768)+(65536); }
	def m5405():void { var l:Long = (32768)+(-65536); }
	def m5406():void { var l:Long = (32768)+(16777216); }
	def m5407():void { var l:Long = (32768)+(-16777216); }
	def m5408():void { var l:Long = (32768)+(16777217); }
	def m5409():void { var l:Long = (32768)+(-16777217); }
	def m5410():void { var l:Long = (32768)+(2147483647); }
	def m5411():void { var l:Long = (32768)+(-2147483647); }
	def m5412():void { var l:Long = (-32768)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-32768)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5413():void { var l:Long = (-32768)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32768)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5414():void { var l:Long = (-32768)+(w2); }
	def m5415():void { var l:Long = (-32768)+(w3); }
	def m5416():void { var l:Long = (-32768)+(w4); }
	def m5417():void { var l:Long = (-32768)+(w5); }
	def m5418():void { var l:Long = (-32768)+(0); }
	def m5419():void { var l:Long = (-32768)+(-0); }
	def m5420():void { var l:Long = (-32768)+(1); }
	def m5421():void { var l:Long = (-32768)+(-1); }
	def m5422():void { var l:Long = (-32768)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32768)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5423():void { var l:Long = (-32768)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32768)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5424():void { var l:Long = (-32768)+(127); }
	def m5425():void { var l:Long = (-32768)+(-127); }
	def m5426():void { var l:Long = (-32768)+(128); }
	def m5427():void { var l:Long = (-32768)+(-128); }
	def m5428():void { var l:Long = (-32768)+(255); }
	def m5429():void { var l:Long = (-32768)+(-255); }
	def m5430():void { var l:Long = (-32768)+(256); }
	def m5431():void { var l:Long = (-32768)+(-256); }
	def m5432():void { var l:Long = (-32768)+(32767); }
	def m5433():void { var l:Long = (-32768)+(-32767); }
	def m5434():void { var l:Long = (-32768)+(32768); }
	def m5435():void { var l:Long = (-32768)+(-32768); }
	def m5436():void { var l:Long = (-32768)+(65535); }
	def m5437():void { var l:Long = (-32768)+(-65535); }
	def m5438():void { var l:Long = (-32768)+(65536); }
	def m5439():void { var l:Long = (-32768)+(-65536); }
	def m5440():void { var l:Long = (-32768)+(16777216); }
	def m5441():void { var l:Long = (-32768)+(-16777216); }
	def m5442():void { var l:Long = (-32768)+(16777217); }
	def m5443():void { var l:Long = (-32768)+(-16777217); }
	def m5444():void { var l:Long = (-32768)+(2147483647); }
	def m5445():void { var l:Long = (-32768)+(-2147483647); }
	def m5446():void { var l:Long = (65535)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((65535)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5447():void { var l:Long = (65535)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65535)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5448():void { var l:Long = (65535)+(w2); }
	def m5449():void { var l:Long = (65535)+(w3); }
	def m5450():void { var l:Long = (65535)+(w4); }
	def m5451():void { var l:Long = (65535)+(w5); }
	def m5452():void { var l:Long = (65535)+(0); }
	def m5453():void { var l:Long = (65535)+(-0); }
	def m5454():void { var l:Long = (65535)+(1); }
	def m5455():void { var l:Long = (65535)+(-1); }
	def m5456():void { var l:Long = (65535)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65535)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5457():void { var l:Long = (65535)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65535)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5458():void { var l:Long = (65535)+(127); }
	def m5459():void { var l:Long = (65535)+(-127); }
	def m5460():void { var l:Long = (65535)+(128); }
	def m5461():void { var l:Long = (65535)+(-128); }
	def m5462():void { var l:Long = (65535)+(255); }
	def m5463():void { var l:Long = (65535)+(-255); }
	def m5464():void { var l:Long = (65535)+(256); }
	def m5465():void { var l:Long = (65535)+(-256); }
	def m5466():void { var l:Long = (65535)+(32767); }
	def m5467():void { var l:Long = (65535)+(-32767); }
	def m5468():void { var l:Long = (65535)+(32768); }
	def m5469():void { var l:Long = (65535)+(-32768); }
	def m5470():void { var l:Long = (65535)+(65535); }
	def m5471():void { var l:Long = (65535)+(-65535); }
	def m5472():void { var l:Long = (65535)+(65536); }
	def m5473():void { var l:Long = (65535)+(-65536); }
	def m5474():void { var l:Long = (65535)+(16777216); }
	def m5475():void { var l:Long = (65535)+(-16777216); }
	def m5476():void { var l:Long = (65535)+(16777217); }
	def m5477():void { var l:Long = (65535)+(-16777217); }
	def m5478():void { var l:Long = (65535)+(2147483647); }
	def m5479():void { var l:Long = (65535)+(-2147483647); }
	def m5480():void { var l:Long = (-65535)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-65535)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5481():void { var l:Long = (-65535)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65535)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5482():void { var l:Long = (-65535)+(w2); }
	def m5483():void { var l:Long = (-65535)+(w3); }
	def m5484():void { var l:Long = (-65535)+(w4); }
	def m5485():void { var l:Long = (-65535)+(w5); }
	def m5486():void { var l:Long = (-65535)+(0); }
	def m5487():void { var l:Long = (-65535)+(-0); }
	def m5488():void { var l:Long = (-65535)+(1); }
	def m5489():void { var l:Long = (-65535)+(-1); }
	def m5490():void { var l:Long = (-65535)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65535)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5491():void { var l:Long = (-65535)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65535)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5492():void { var l:Long = (-65535)+(127); }
	def m5493():void { var l:Long = (-65535)+(-127); }
	def m5494():void { var l:Long = (-65535)+(128); }
	def m5495():void { var l:Long = (-65535)+(-128); }
	def m5496():void { var l:Long = (-65535)+(255); }
	def m5497():void { var l:Long = (-65535)+(-255); }
	def m5498():void { var l:Long = (-65535)+(256); }
	def m5499():void { var l:Long = (-65535)+(-256); }
	def m5500():void { var l:Long = (-65535)+(32767); }
	def m5501():void { var l:Long = (-65535)+(-32767); }
	def m5502():void { var l:Long = (-65535)+(32768); }
	def m5503():void { var l:Long = (-65535)+(-32768); }
	def m5504():void { var l:Long = (-65535)+(65535); }
	def m5505():void { var l:Long = (-65535)+(-65535); }
	def m5506():void { var l:Long = (-65535)+(65536); }
	def m5507():void { var l:Long = (-65535)+(-65536); }
	def m5508():void { var l:Long = (-65535)+(16777216); }
	def m5509():void { var l:Long = (-65535)+(-16777216); }
	def m5510():void { var l:Long = (-65535)+(16777217); }
	def m5511():void { var l:Long = (-65535)+(-16777217); }
	def m5512():void { var l:Long = (-65535)+(2147483647); }
	def m5513():void { var l:Long = (-65535)+(-2147483647); }
	def m5514():void { var l:Long = (65536)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((65536)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5515():void { var l:Long = (65536)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65536)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5516():void { var l:Long = (65536)+(w2); }
	def m5517():void { var l:Long = (65536)+(w3); }
	def m5518():void { var l:Long = (65536)+(w4); }
	def m5519():void { var l:Long = (65536)+(w5); }
	def m5520():void { var l:Long = (65536)+(0); }
	def m5521():void { var l:Long = (65536)+(-0); }
	def m5522():void { var l:Long = (65536)+(1); }
	def m5523():void { var l:Long = (65536)+(-1); }
	def m5524():void { var l:Long = (65536)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65536)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5525():void { var l:Long = (65536)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65536)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5526():void { var l:Long = (65536)+(127); }
	def m5527():void { var l:Long = (65536)+(-127); }
	def m5528():void { var l:Long = (65536)+(128); }
	def m5529():void { var l:Long = (65536)+(-128); }
	def m5530():void { var l:Long = (65536)+(255); }
	def m5531():void { var l:Long = (65536)+(-255); }
	def m5532():void { var l:Long = (65536)+(256); }
	def m5533():void { var l:Long = (65536)+(-256); }
	def m5534():void { var l:Long = (65536)+(32767); }
	def m5535():void { var l:Long = (65536)+(-32767); }
	def m5536():void { var l:Long = (65536)+(32768); }
	def m5537():void { var l:Long = (65536)+(-32768); }
	def m5538():void { var l:Long = (65536)+(65535); }
	def m5539():void { var l:Long = (65536)+(-65535); }
	def m5540():void { var l:Long = (65536)+(65536); }
	def m5541():void { var l:Long = (65536)+(-65536); }
	def m5542():void { var l:Long = (65536)+(16777216); }
	def m5543():void { var l:Long = (65536)+(-16777216); }
	def m5544():void { var l:Long = (65536)+(16777217); }
	def m5545():void { var l:Long = (65536)+(-16777217); }
	def m5546():void { var l:Long = (65536)+(2147483647); }
	def m5547():void { var l:Long = (65536)+(-2147483647); }
	def m5548():void { var l:Long = (-65536)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-65536)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5549():void { var l:Long = (-65536)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65536)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5550():void { var l:Long = (-65536)+(w2); }
	def m5551():void { var l:Long = (-65536)+(w3); }
	def m5552():void { var l:Long = (-65536)+(w4); }
	def m5553():void { var l:Long = (-65536)+(w5); }
	def m5554():void { var l:Long = (-65536)+(0); }
	def m5555():void { var l:Long = (-65536)+(-0); }
	def m5556():void { var l:Long = (-65536)+(1); }
	def m5557():void { var l:Long = (-65536)+(-1); }
	def m5558():void { var l:Long = (-65536)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65536)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5559():void { var l:Long = (-65536)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65536)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5560():void { var l:Long = (-65536)+(127); }
	def m5561():void { var l:Long = (-65536)+(-127); }
	def m5562():void { var l:Long = (-65536)+(128); }
	def m5563():void { var l:Long = (-65536)+(-128); }
	def m5564():void { var l:Long = (-65536)+(255); }
	def m5565():void { var l:Long = (-65536)+(-255); }
	def m5566():void { var l:Long = (-65536)+(256); }
	def m5567():void { var l:Long = (-65536)+(-256); }
	def m5568():void { var l:Long = (-65536)+(32767); }
	def m5569():void { var l:Long = (-65536)+(-32767); }
	def m5570():void { var l:Long = (-65536)+(32768); }
	def m5571():void { var l:Long = (-65536)+(-32768); }
	def m5572():void { var l:Long = (-65536)+(65535); }
	def m5573():void { var l:Long = (-65536)+(-65535); }
	def m5574():void { var l:Long = (-65536)+(65536); }
	def m5575():void { var l:Long = (-65536)+(-65536); }
	def m5576():void { var l:Long = (-65536)+(16777216); }
	def m5577():void { var l:Long = (-65536)+(-16777216); }
	def m5578():void { var l:Long = (-65536)+(16777217); }
	def m5579():void { var l:Long = (-65536)+(-16777217); }
	def m5580():void { var l:Long = (-65536)+(2147483647); }
	def m5581():void { var l:Long = (-65536)+(-2147483647); }
	def m5582():void { var l:Long = (16777216)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((16777216)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5583():void { var l:Long = (16777216)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777216)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5584():void { var l:Long = (16777216)+(w2); }
	def m5585():void { var l:Long = (16777216)+(w3); }
	def m5586():void { var l:Long = (16777216)+(w4); }
	def m5587():void { var l:Long = (16777216)+(w5); }
	def m5588():void { var l:Long = (16777216)+(0); }
	def m5589():void { var l:Long = (16777216)+(-0); }
	def m5590():void { var l:Long = (16777216)+(1); }
	def m5591():void { var l:Long = (16777216)+(-1); }
	def m5592():void { var l:Long = (16777216)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777216)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5593():void { var l:Long = (16777216)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777216)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5594():void { var l:Long = (16777216)+(127); }
	def m5595():void { var l:Long = (16777216)+(-127); }
	def m5596():void { var l:Long = (16777216)+(128); }
	def m5597():void { var l:Long = (16777216)+(-128); }
	def m5598():void { var l:Long = (16777216)+(255); }
	def m5599():void { var l:Long = (16777216)+(-255); }
	def m5600():void { var l:Long = (16777216)+(256); }
	def m5601():void { var l:Long = (16777216)+(-256); }
	def m5602():void { var l:Long = (16777216)+(32767); }
	def m5603():void { var l:Long = (16777216)+(-32767); }
	def m5604():void { var l:Long = (16777216)+(32768); }
	def m5605():void { var l:Long = (16777216)+(-32768); }
	def m5606():void { var l:Long = (16777216)+(65535); }
	def m5607():void { var l:Long = (16777216)+(-65535); }
	def m5608():void { var l:Long = (16777216)+(65536); }
	def m5609():void { var l:Long = (16777216)+(-65536); }
	def m5610():void { var l:Long = (16777216)+(16777216); }
	def m5611():void { var l:Long = (16777216)+(-16777216); }
	def m5612():void { var l:Long = (16777216)+(16777217); }
	def m5613():void { var l:Long = (16777216)+(-16777217); }
	def m5614():void { var l:Long = (16777216)+(2147483647); }
	def m5615():void { var l:Long = (16777216)+(-2147483647); }
	def m5616():void { var l:Long = (-16777216)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-16777216)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5617():void { var l:Long = (-16777216)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777216)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5618():void { var l:Long = (-16777216)+(w2); }
	def m5619():void { var l:Long = (-16777216)+(w3); }
	def m5620():void { var l:Long = (-16777216)+(w4); }
	def m5621():void { var l:Long = (-16777216)+(w5); }
	def m5622():void { var l:Long = (-16777216)+(0); }
	def m5623():void { var l:Long = (-16777216)+(-0); }
	def m5624():void { var l:Long = (-16777216)+(1); }
	def m5625():void { var l:Long = (-16777216)+(-1); }
	def m5626():void { var l:Long = (-16777216)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777216)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5627():void { var l:Long = (-16777216)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777216)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5628():void { var l:Long = (-16777216)+(127); }
	def m5629():void { var l:Long = (-16777216)+(-127); }
	def m5630():void { var l:Long = (-16777216)+(128); }
	def m5631():void { var l:Long = (-16777216)+(-128); }
	def m5632():void { var l:Long = (-16777216)+(255); }
	def m5633():void { var l:Long = (-16777216)+(-255); }
	def m5634():void { var l:Long = (-16777216)+(256); }
	def m5635():void { var l:Long = (-16777216)+(-256); }
	def m5636():void { var l:Long = (-16777216)+(32767); }
	def m5637():void { var l:Long = (-16777216)+(-32767); }
	def m5638():void { var l:Long = (-16777216)+(32768); }
	def m5639():void { var l:Long = (-16777216)+(-32768); }
	def m5640():void { var l:Long = (-16777216)+(65535); }
	def m5641():void { var l:Long = (-16777216)+(-65535); }
	def m5642():void { var l:Long = (-16777216)+(65536); }
	def m5643():void { var l:Long = (-16777216)+(-65536); }
	def m5644():void { var l:Long = (-16777216)+(16777216); }
	def m5645():void { var l:Long = (-16777216)+(-16777216); }
	def m5646():void { var l:Long = (-16777216)+(16777217); }
	def m5647():void { var l:Long = (-16777216)+(-16777217); }
	def m5648():void { var l:Long = (-16777216)+(2147483647); }
	def m5649():void { var l:Long = (-16777216)+(-2147483647); }
	def m5650():void { var l:Long = (16777217)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((16777217)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5651():void { var l:Long = (16777217)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777217)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5652():void { var l:Long = (16777217)+(w2); }
	def m5653():void { var l:Long = (16777217)+(w3); }
	def m5654():void { var l:Long = (16777217)+(w4); }
	def m5655():void { var l:Long = (16777217)+(w5); }
	def m5656():void { var l:Long = (16777217)+(0); }
	def m5657():void { var l:Long = (16777217)+(-0); }
	def m5658():void { var l:Long = (16777217)+(1); }
	def m5659():void { var l:Long = (16777217)+(-1); }
	def m5660():void { var l:Long = (16777217)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777217)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5661():void { var l:Long = (16777217)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777217)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5662():void { var l:Long = (16777217)+(127); }
	def m5663():void { var l:Long = (16777217)+(-127); }
	def m5664():void { var l:Long = (16777217)+(128); }
	def m5665():void { var l:Long = (16777217)+(-128); }
	def m5666():void { var l:Long = (16777217)+(255); }
	def m5667():void { var l:Long = (16777217)+(-255); }
	def m5668():void { var l:Long = (16777217)+(256); }
	def m5669():void { var l:Long = (16777217)+(-256); }
	def m5670():void { var l:Long = (16777217)+(32767); }
	def m5671():void { var l:Long = (16777217)+(-32767); }
	def m5672():void { var l:Long = (16777217)+(32768); }
	def m5673():void { var l:Long = (16777217)+(-32768); }
	def m5674():void { var l:Long = (16777217)+(65535); }
	def m5675():void { var l:Long = (16777217)+(-65535); }
	def m5676():void { var l:Long = (16777217)+(65536); }
	def m5677():void { var l:Long = (16777217)+(-65536); }
	def m5678():void { var l:Long = (16777217)+(16777216); }
	def m5679():void { var l:Long = (16777217)+(-16777216); }
	def m5680():void { var l:Long = (16777217)+(16777217); }
	def m5681():void { var l:Long = (16777217)+(-16777217); }
	def m5682():void { var l:Long = (16777217)+(2147483647); }
	def m5683():void { var l:Long = (16777217)+(-2147483647); }
	def m5684():void { var l:Long = (-16777217)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-16777217)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5685():void { var l:Long = (-16777217)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777217)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5686():void { var l:Long = (-16777217)+(w2); }
	def m5687():void { var l:Long = (-16777217)+(w3); }
	def m5688():void { var l:Long = (-16777217)+(w4); }
	def m5689():void { var l:Long = (-16777217)+(w5); }
	def m5690():void { var l:Long = (-16777217)+(0); }
	def m5691():void { var l:Long = (-16777217)+(-0); }
	def m5692():void { var l:Long = (-16777217)+(1); }
	def m5693():void { var l:Long = (-16777217)+(-1); }
	def m5694():void { var l:Long = (-16777217)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777217)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5695():void { var l:Long = (-16777217)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777217)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5696():void { var l:Long = (-16777217)+(127); }
	def m5697():void { var l:Long = (-16777217)+(-127); }
	def m5698():void { var l:Long = (-16777217)+(128); }
	def m5699():void { var l:Long = (-16777217)+(-128); }
	def m5700():void { var l:Long = (-16777217)+(255); }
	def m5701():void { var l:Long = (-16777217)+(-255); }
	def m5702():void { var l:Long = (-16777217)+(256); }
	def m5703():void { var l:Long = (-16777217)+(-256); }
	def m5704():void { var l:Long = (-16777217)+(32767); }
	def m5705():void { var l:Long = (-16777217)+(-32767); }
	def m5706():void { var l:Long = (-16777217)+(32768); }
	def m5707():void { var l:Long = (-16777217)+(-32768); }
	def m5708():void { var l:Long = (-16777217)+(65535); }
	def m5709():void { var l:Long = (-16777217)+(-65535); }
	def m5710():void { var l:Long = (-16777217)+(65536); }
	def m5711():void { var l:Long = (-16777217)+(-65536); }
	def m5712():void { var l:Long = (-16777217)+(16777216); }
	def m5713():void { var l:Long = (-16777217)+(-16777216); }
	def m5714():void { var l:Long = (-16777217)+(16777217); }
	def m5715():void { var l:Long = (-16777217)+(-16777217); }
	def m5716():void { var l:Long = (-16777217)+(2147483647); }
	def m5717():void { var l:Long = (-16777217)+(-2147483647); }
	def m5718():void { var l:Long = (2147483647)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((2147483647)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5719():void { var l:Long = (2147483647)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((2147483647)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5720():void { var l:Long = (2147483647)+(w2); }
	def m5721():void { var l:Long = (2147483647)+(w3); }
	def m5722():void { var l:Long = (2147483647)+(w4); }
	def m5723():void { var l:Long = (2147483647)+(w5); }
	def m5724():void { var l:Long = (2147483647)+(0); }
	def m5725():void { var l:Long = (2147483647)+(-0); }
	def m5726():void { var l:Long = (2147483647)+(1); }
	def m5727():void { var l:Long = (2147483647)+(-1); }
	def m5728():void { var l:Long = (2147483647)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((2147483647)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5729():void { var l:Long = (2147483647)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((2147483647)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5730():void { var l:Long = (2147483647)+(127); }
	def m5731():void { var l:Long = (2147483647)+(-127); }
	def m5732():void { var l:Long = (2147483647)+(128); }
	def m5733():void { var l:Long = (2147483647)+(-128); }
	def m5734():void { var l:Long = (2147483647)+(255); }
	def m5735():void { var l:Long = (2147483647)+(-255); }
	def m5736():void { var l:Long = (2147483647)+(256); }
	def m5737():void { var l:Long = (2147483647)+(-256); }
	def m5738():void { var l:Long = (2147483647)+(32767); }
	def m5739():void { var l:Long = (2147483647)+(-32767); }
	def m5740():void { var l:Long = (2147483647)+(32768); }
	def m5741():void { var l:Long = (2147483647)+(-32768); }
	def m5742():void { var l:Long = (2147483647)+(65535); }
	def m5743():void { var l:Long = (2147483647)+(-65535); }
	def m5744():void { var l:Long = (2147483647)+(65536); }
	def m5745():void { var l:Long = (2147483647)+(-65536); }
	def m5746():void { var l:Long = (2147483647)+(16777216); }
	def m5747():void { var l:Long = (2147483647)+(-16777216); }
	def m5748():void { var l:Long = (2147483647)+(16777217); }
	def m5749():void { var l:Long = (2147483647)+(-16777217); }
	def m5750():void { var l:Long = (2147483647)+(2147483647); }
	def m5751():void { var l:Long = (2147483647)+(-2147483647); }
	def m5752():void { var l:Long = (-2147483647)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-2147483647)) + (SignedTests.this.w0)		 Expected type: x10.lang.Long		 Found type: x10.lang.Float)
	def m5753():void { var l:Long = (-2147483647)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-2147483647)) + (SignedTests.this.w1)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5754():void { var l:Long = (-2147483647)+(w2); }
	def m5755():void { var l:Long = (-2147483647)+(w3); }
	def m5756():void { var l:Long = (-2147483647)+(w4); }
	def m5757():void { var l:Long = (-2147483647)+(w5); }
	def m5758():void { var l:Long = (-2147483647)+(0); }
	def m5759():void { var l:Long = (-2147483647)+(-0); }
	def m5760():void { var l:Long = (-2147483647)+(1); }
	def m5761():void { var l:Long = (-2147483647)+(-1); }
	def m5762():void { var l:Long = (-2147483647)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-2147483647)) + (2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5763():void { var l:Long = (-2147483647)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-2147483647)) + (-2.2)		 Expected type: x10.lang.Long		 Found type: x10.lang.Double)
	def m5764():void { var l:Long = (-2147483647)+(127); }
	def m5765():void { var l:Long = (-2147483647)+(-127); }
	def m5766():void { var l:Long = (-2147483647)+(128); }
	def m5767():void { var l:Long = (-2147483647)+(-128); }
	def m5768():void { var l:Long = (-2147483647)+(255); }
	def m5769():void { var l:Long = (-2147483647)+(-255); }
	def m5770():void { var l:Long = (-2147483647)+(256); }
	def m5771():void { var l:Long = (-2147483647)+(-256); }
	def m5772():void { var l:Long = (-2147483647)+(32767); }
	def m5773():void { var l:Long = (-2147483647)+(-32767); }
	def m5774():void { var l:Long = (-2147483647)+(32768); }
	def m5775():void { var l:Long = (-2147483647)+(-32768); }
	def m5776():void { var l:Long = (-2147483647)+(65535); }
	def m5777():void { var l:Long = (-2147483647)+(-65535); }
	def m5778():void { var l:Long = (-2147483647)+(65536); }
	def m5779():void { var l:Long = (-2147483647)+(-65536); }
	def m5780():void { var l:Long = (-2147483647)+(16777216); }
	def m5781():void { var l:Long = (-2147483647)+(-16777216); }
	def m5782():void { var l:Long = (-2147483647)+(16777217); }
	def m5783():void { var l:Long = (-2147483647)+(-16777217); }
	def m5784():void { var l:Long = (-2147483647)+(2147483647); }
	def m5785():void { var l:Long = (-2147483647)+(-2147483647); }
	def m5786():void { var l:Short = (w0)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5787():void { var l:Short = (w0)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w0)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5788():void { var l:Short = (w0)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5789():void { var l:Short = (w0)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5790():void { var l:Short = (w0)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((SignedTests.this.w4))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5791():void { var l:Short = (w0)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5792():void { var l:Short = (w0)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((0))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5793():void { var l:Short = (w0)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((0))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5794():void { var l:Short = (w0)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((1))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5795():void { var l:Short = (w0)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-1))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5796():void { var l:Short = (w0)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w0)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5797():void { var l:Short = (w0)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w0)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5798():void { var l:Short = (w0)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((127))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5799():void { var l:Short = (w0)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-127))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5800():void { var l:Short = (w0)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((128))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5801():void { var l:Short = (w0)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-128))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5802():void { var l:Short = (w0)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((255))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5803():void { var l:Short = (w0)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-255))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5804():void { var l:Short = (w0)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((256))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5805():void { var l:Short = (w0)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-256))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5806():void { var l:Short = (w0)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((32767))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5807():void { var l:Short = (w0)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-32767))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5808():void { var l:Short = (w0)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((32768))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5809():void { var l:Short = (w0)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-32768))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5810():void { var l:Short = (w0)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((65535))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5811():void { var l:Short = (w0)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-65535))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5812():void { var l:Short = (w0)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((65536))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5813():void { var l:Short = (w0)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-65536))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5814():void { var l:Short = (w0)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((16777216))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5815():void { var l:Short = (w0)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-16777216))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5816():void { var l:Short = (w0)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((16777217))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5817():void { var l:Short = (w0)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-16777217))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5818():void { var l:Short = (w0)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((2147483647))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5819():void { var l:Short = (w0)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w0) + x10.lang.Float.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5820():void { var l:Short = (w1)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w0))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5821():void { var l:Short = (w1)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5822():void { var l:Short = (w1)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5823():void { var l:Short = (w1)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5824():void { var l:Short = (w1)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w4))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5825():void { var l:Short = (w1)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5826():void { var l:Short = (w1)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5827():void { var l:Short = (w1)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5828():void { var l:Short = (w1)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((1))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5829():void { var l:Short = (w1)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-1))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5830():void { var l:Short = (w1)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5831():void { var l:Short = (w1)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5832():void { var l:Short = (w1)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((127))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5833():void { var l:Short = (w1)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-127))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5834():void { var l:Short = (w1)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((128))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5835():void { var l:Short = (w1)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-128))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5836():void { var l:Short = (w1)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((255))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5837():void { var l:Short = (w1)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-255))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5838():void { var l:Short = (w1)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((256))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5839():void { var l:Short = (w1)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-256))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5840():void { var l:Short = (w1)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((32767))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5841():void { var l:Short = (w1)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-32767))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5842():void { var l:Short = (w1)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((32768))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5843():void { var l:Short = (w1)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-32768))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5844():void { var l:Short = (w1)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((65535))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5845():void { var l:Short = (w1)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-65535))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5846():void { var l:Short = (w1)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((65536))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5847():void { var l:Short = (w1)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-65536))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5848():void { var l:Short = (w1)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((16777216))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5849():void { var l:Short = (w1)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-16777216))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5850():void { var l:Short = (w1)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((16777217))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5851():void { var l:Short = (w1)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-16777217))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5852():void { var l:Short = (w1)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((2147483647))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5853():void { var l:Short = (w1)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w1) + x10.lang.Double.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5854():void { var l:Short = (w2)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((SignedTests.this.w2)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5855():void { var l:Short = (w2)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w2)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5856():void { var l:Short = (w2)+(w2); }
	def m5857():void { var l:Short = (w2)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5858():void { var l:Short = (w2)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((SignedTests.this.w2)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5859():void { var l:Short = (w2)+(w5); }
	def m5860():void { var l:Short = (w2)+(0); }  
	def m5861():void { var l:Short = (w2)+(-0); }  
	def m5862():void { var l:Short = (w2)+(1); }  
	def m5863():void { var l:Short = (w2)+(-1); }  
	def m5864():void { var l:Short = (w2)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w2)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5865():void { var l:Short = (w2)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w2)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5866():void { var l:Short = (w2)+(127); }  
	def m5867():void { var l:Short = (w2)+(-127); }  
	def m5868():void { var l:Short = (w2)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5869():void { var l:Short = (w2)+(-128); }  
	def m5870():void { var l:Short = (w2)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5871():void { var l:Short = (w2)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (-255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5872():void { var l:Short = (w2)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5873():void { var l:Short = (w2)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (-256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5874():void { var l:Short = (w2)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5875():void { var l:Short = (w2)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (-32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5876():void { var l:Short = (w2)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5877():void { var l:Short = (w2)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (-32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5878():void { var l:Short = (w2)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5879():void { var l:Short = (w2)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5880():void { var l:Short = (w2)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5881():void { var l:Short = (w2)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5882():void { var l:Short = (w2)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5883():void { var l:Short = (w2)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5884():void { var l:Short = (w2)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5885():void { var l:Short = (w2)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5886():void { var l:Short = (w2)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5887():void { var l:Short = (w2)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w2)) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5888():void { var l:Short = (w3)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((SignedTests.this.w3)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5889():void { var l:Short = (w3)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w3)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5890():void { var l:Short = (w3)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5891():void { var l:Short = (w3)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5892():void { var l:Short = (w3)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((SignedTests.this.w3)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5893():void { var l:Short = (w3)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5894():void { var l:Short = (w3)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5895():void { var l:Short = (w3)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5896():void { var l:Short = (w3)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5897():void { var l:Short = (w3)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5898():void { var l:Short = (w3)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w3)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5899():void { var l:Short = (w3)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w3)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5900():void { var l:Short = (w3)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5901():void { var l:Short = (w3)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5902():void { var l:Short = (w3)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5903():void { var l:Short = (w3)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5904():void { var l:Short = (w3)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5905():void { var l:Short = (w3)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5906():void { var l:Short = (w3)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5907():void { var l:Short = (w3)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5908():void { var l:Short = (w3)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5909():void { var l:Short = (w3)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5910():void { var l:Short = (w3)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5911():void { var l:Short = (w3)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5912():void { var l:Short = (w3)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5913():void { var l:Short = (w3)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5914():void { var l:Short = (w3)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5915():void { var l:Short = (w3)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5916():void { var l:Short = (w3)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5917():void { var l:Short = (w3)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5918():void { var l:Short = (w3)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5919():void { var l:Short = (w3)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5920():void { var l:Short = (w3)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5921():void { var l:Short = (w3)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w3) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5922():void { var l:Short = (w4)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((SignedTests.this.w4)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5923():void { var l:Short = (w4)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w4)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5924():void { var l:Short = (w4)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5925():void { var l:Short = (w4)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5926():void { var l:Short = (w4)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5927():void { var l:Short = (w4)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5928():void { var l:Short = (w4)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((0))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5929():void { var l:Short = (w4)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((0))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5930():void { var l:Short = (w4)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((1))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5931():void { var l:Short = (w4)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-1))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5932():void { var l:Short = (w4)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w4)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5933():void { var l:Short = (w4)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w4)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5934():void { var l:Short = (w4)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((127))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5935():void { var l:Short = (w4)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-127))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5936():void { var l:Short = (w4)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((128))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5937():void { var l:Short = (w4)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-128))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5938():void { var l:Short = (w4)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((255))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5939():void { var l:Short = (w4)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-255))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5940():void { var l:Short = (w4)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((256))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5941():void { var l:Short = (w4)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-256))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5942():void { var l:Short = (w4)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((32767))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5943():void { var l:Short = (w4)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-32767))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5944():void { var l:Short = (w4)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((32768))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5945():void { var l:Short = (w4)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-32768))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5946():void { var l:Short = (w4)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((65535))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5947():void { var l:Short = (w4)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-65535))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5948():void { var l:Short = (w4)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((65536))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5949():void { var l:Short = (w4)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-65536))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5950():void { var l:Short = (w4)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((16777216))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5951():void { var l:Short = (w4)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-16777216))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5952():void { var l:Short = (w4)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((16777217))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5953():void { var l:Short = (w4)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-16777217))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5954():void { var l:Short = (w4)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((2147483647))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5955():void { var l:Short = (w4)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (SignedTests.this.w4) + x10.lang.Long.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5956():void { var l:Short = (w5)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((SignedTests.this.w5)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5957():void { var l:Short = (w5)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w5)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5958():void { var l:Short = (w5)+(w2); }
	def m5959():void { var l:Short = (w5)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5960():void { var l:Short = (w5)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((SignedTests.this.w5)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5961():void { var l:Short = (w5)+(w5); }
	def m5962():void { var l:Short = (w5)+(0); }  
	def m5963():void { var l:Short = (w5)+(-0); }  
	def m5964():void { var l:Short = (w5)+(1); }  
	def m5965():void { var l:Short = (w5)+(-1); }  
	def m5966():void { var l:Short = (w5)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w5)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5967():void { var l:Short = (w5)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((SignedTests.this.w5)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5968():void { var l:Short = (w5)+(127); }  
	def m5969():void { var l:Short = (w5)+(-127); }  
	def m5970():void { var l:Short = (w5)+(128); }  
	def m5971():void { var l:Short = (w5)+(-128); }  
	def m5972():void { var l:Short = (w5)+(255); }  
	def m5973():void { var l:Short = (w5)+(-255); }  
	def m5974():void { var l:Short = (w5)+(256); }  
	def m5975():void { var l:Short = (w5)+(-256); }  
	def m5976():void { var l:Short = (w5)+(32767); }  
	def m5977():void { var l:Short = (w5)+(-32767); }  
	def m5978():void { var l:Short = (w5)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5979():void { var l:Short = (w5)+(-32768); }  
	def m5980():void { var l:Short = (w5)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5981():void { var l:Short = (w5)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5982():void { var l:Short = (w5)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5983():void { var l:Short = (w5)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5984():void { var l:Short = (w5)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5985():void { var l:Short = (w5)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5986():void { var l:Short = (w5)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5987():void { var l:Short = (w5)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5988():void { var l:Short = (w5)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5989():void { var l:Short = (w5)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Int.implicit_operator_as((SignedTests.this.w5)) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5990():void { var l:Short = (0)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((0)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m5991():void { var l:Short = (0)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m5992():void { var l:Short = (0)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5993():void { var l:Short = (0)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5994():void { var l:Short = (0)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((0)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m5995():void { var l:Short = (0)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m5996():void { var l:Short = (0)+(0); }
	def m5997():void { var l:Short = (0)+(-0); }
	def m5998():void { var l:Short = (0)+(1); }
	def m5999():void { var l:Short = (0)+(-1); }
	def m6000():void { var l:Short = (0)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6001():void { var l:Short = (0)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6002():void { var l:Short = (0)+(127); }
	def m6003():void { var l:Short = (0)+(-127); }
	def m6004():void { var l:Short = (0)+(128); }
	def m6005():void { var l:Short = (0)+(-128); }
	def m6006():void { var l:Short = (0)+(255); }
	def m6007():void { var l:Short = (0)+(-255); }
	def m6008():void { var l:Short = (0)+(256); }
	def m6009():void { var l:Short = (0)+(-256); }
	def m6010():void { var l:Short = (0)+(32767); }
	def m6011():void { var l:Short = (0)+(-32767); }
	def m6012():void { var l:Short = (0)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6013():void { var l:Short = (0)+(-32768); }
	def m6014():void { var l:Short = (0)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6015():void { var l:Short = (0)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6016():void { var l:Short = (0)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6017():void { var l:Short = (0)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6018():void { var l:Short = (0)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6019():void { var l:Short = (0)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6020():void { var l:Short = (0)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6021():void { var l:Short = (0)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6022():void { var l:Short = (0)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6023():void { var l:Short = (0)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6024():void { var l:Short = (-0)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((0)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6025():void { var l:Short = (-0)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6026():void { var l:Short = (-0)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6027():void { var l:Short = (-0)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6028():void { var l:Short = (-0)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((0)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6029():void { var l:Short = (-0)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6030():void { var l:Short = (-0)+(0); }
	def m6031():void { var l:Short = (-0)+(-0); }
	def m6032():void { var l:Short = (-0)+(1); }
	def m6033():void { var l:Short = (-0)+(-1); }
	def m6034():void { var l:Short = (-0)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6035():void { var l:Short = (-0)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((0)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6036():void { var l:Short = (-0)+(127); }
	def m6037():void { var l:Short = (-0)+(-127); }
	def m6038():void { var l:Short = (-0)+(128); }
	def m6039():void { var l:Short = (-0)+(-128); }
	def m6040():void { var l:Short = (-0)+(255); }
	def m6041():void { var l:Short = (-0)+(-255); }
	def m6042():void { var l:Short = (-0)+(256); }
	def m6043():void { var l:Short = (-0)+(-256); }
	def m6044():void { var l:Short = (-0)+(32767); }
	def m6045():void { var l:Short = (-0)+(-32767); }
	def m6046():void { var l:Short = (-0)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6047():void { var l:Short = (-0)+(-32768); }
	def m6048():void { var l:Short = (-0)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6049():void { var l:Short = (-0)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6050():void { var l:Short = (-0)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6051():void { var l:Short = (-0)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6052():void { var l:Short = (-0)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6053():void { var l:Short = (-0)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6054():void { var l:Short = (-0)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6055():void { var l:Short = (-0)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6056():void { var l:Short = (-0)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6057():void { var l:Short = (-0)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (0) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6058():void { var l:Short = (1)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((1)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6059():void { var l:Short = (1)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((1)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6060():void { var l:Short = (1)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6061():void { var l:Short = (1)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6062():void { var l:Short = (1)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((1)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6063():void { var l:Short = (1)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6064():void { var l:Short = (1)+(0); }
	def m6065():void { var l:Short = (1)+(-0); }
	def m6066():void { var l:Short = (1)+(1); }
	def m6067():void { var l:Short = (1)+(-1); }
	def m6068():void { var l:Short = (1)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((1)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6069():void { var l:Short = (1)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((1)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6070():void { var l:Short = (1)+(127); }
	def m6071():void { var l:Short = (1)+(-127); }
	def m6072():void { var l:Short = (1)+(128); }
	def m6073():void { var l:Short = (1)+(-128); }
	def m6074():void { var l:Short = (1)+(255); }
	def m6075():void { var l:Short = (1)+(-255); }
	def m6076():void { var l:Short = (1)+(256); }
	def m6077():void { var l:Short = (1)+(-256); }
	def m6078():void { var l:Short = (1)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6079():void { var l:Short = (1)+(-32767); }
	def m6080():void { var l:Short = (1)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6081():void { var l:Short = (1)+(-32768); }
	def m6082():void { var l:Short = (1)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6083():void { var l:Short = (1)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6084():void { var l:Short = (1)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6085():void { var l:Short = (1)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6086():void { var l:Short = (1)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6087():void { var l:Short = (1)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6088():void { var l:Short = (1)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6089():void { var l:Short = (1)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6090():void { var l:Short = (1)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6091():void { var l:Short = (1)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (1) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6092():void { var l:Short = (-1)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-1)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6093():void { var l:Short = (-1)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-1)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6094():void { var l:Short = (-1)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6095():void { var l:Short = (-1)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6096():void { var l:Short = (-1)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-1)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6097():void { var l:Short = (-1)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6098():void { var l:Short = (-1)+(0); }
	def m6099():void { var l:Short = (-1)+(-0); }
	def m6100():void { var l:Short = (-1)+(1); }
	def m6101():void { var l:Short = (-1)+(-1); }
	def m6102():void { var l:Short = (-1)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-1)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6103():void { var l:Short = (-1)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-1)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6104():void { var l:Short = (-1)+(127); }
	def m6105():void { var l:Short = (-1)+(-127); }
	def m6106():void { var l:Short = (-1)+(128); }
	def m6107():void { var l:Short = (-1)+(-128); }
	def m6108():void { var l:Short = (-1)+(255); }
	def m6109():void { var l:Short = (-1)+(-255); }
	def m6110():void { var l:Short = (-1)+(256); }
	def m6111():void { var l:Short = (-1)+(-256); }
	def m6112():void { var l:Short = (-1)+(32767); }
	def m6113():void { var l:Short = (-1)+(-32767); }
	def m6114():void { var l:Short = (-1)+(32768); }
	def m6115():void { var l:Short = (-1)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (-32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6116():void { var l:Short = (-1)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6117():void { var l:Short = (-1)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6118():void { var l:Short = (-1)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6119():void { var l:Short = (-1)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6120():void { var l:Short = (-1)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6121():void { var l:Short = (-1)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6122():void { var l:Short = (-1)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6123():void { var l:Short = (-1)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6124():void { var l:Short = (-1)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6125():void { var l:Short = (-1)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-1) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6126():void { var l:Short = (2.2)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w0))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6127():void { var l:Short = (2.2)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6128():void { var l:Short = (2.2)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6129():void { var l:Short = (2.2)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6130():void { var l:Short = (2.2)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w4))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6131():void { var l:Short = (2.2)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6132():void { var l:Short = (2.2)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6133():void { var l:Short = (2.2)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6134():void { var l:Short = (2.2)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((1))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6135():void { var l:Short = (2.2)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-1))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6136():void { var l:Short = (2.2)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6137():void { var l:Short = (2.2)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6138():void { var l:Short = (2.2)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((127))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6139():void { var l:Short = (2.2)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-127))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6140():void { var l:Short = (2.2)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((128))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6141():void { var l:Short = (2.2)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-128))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6142():void { var l:Short = (2.2)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((255))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6143():void { var l:Short = (2.2)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-255))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6144():void { var l:Short = (2.2)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((256))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6145():void { var l:Short = (2.2)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-256))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6146():void { var l:Short = (2.2)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((32767))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6147():void { var l:Short = (2.2)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-32767))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6148():void { var l:Short = (2.2)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((32768))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6149():void { var l:Short = (2.2)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-32768))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6150():void { var l:Short = (2.2)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((65535))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6151():void { var l:Short = (2.2)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-65535))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6152():void { var l:Short = (2.2)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((65536))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6153():void { var l:Short = (2.2)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-65536))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6154():void { var l:Short = (2.2)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((16777216))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6155():void { var l:Short = (2.2)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-16777216))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6156():void { var l:Short = (2.2)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((16777217))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6157():void { var l:Short = (2.2)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-16777217))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6158():void { var l:Short = (2.2)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((2147483647))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6159():void { var l:Short = (2.2)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2.2) + x10.lang.Double.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6160():void { var l:Short = (-2.2)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w0))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6161():void { var l:Short = (-2.2)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6162():void { var l:Short = (-2.2)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6163():void { var l:Short = (-2.2)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w3))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6164():void { var l:Short = (-2.2)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w4))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6165():void { var l:Short = (-2.2)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6166():void { var l:Short = (-2.2)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6167():void { var l:Short = (-2.2)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((0))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6168():void { var l:Short = (-2.2)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((1))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6169():void { var l:Short = (-2.2)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-1))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6170():void { var l:Short = (-2.2)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6171():void { var l:Short = (-2.2)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6172():void { var l:Short = (-2.2)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((127))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6173():void { var l:Short = (-2.2)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-127))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6174():void { var l:Short = (-2.2)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((128))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6175():void { var l:Short = (-2.2)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-128))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6176():void { var l:Short = (-2.2)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((255))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6177():void { var l:Short = (-2.2)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-255))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6178():void { var l:Short = (-2.2)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((256))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6179():void { var l:Short = (-2.2)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-256))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6180():void { var l:Short = (-2.2)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((32767))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6181():void { var l:Short = (-2.2)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-32767))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6182():void { var l:Short = (-2.2)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((32768))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6183():void { var l:Short = (-2.2)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-32768))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6184():void { var l:Short = (-2.2)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((65535))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6185():void { var l:Short = (-2.2)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-65535))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6186():void { var l:Short = (-2.2)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((65536))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6187():void { var l:Short = (-2.2)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-65536))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6188():void { var l:Short = (-2.2)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((16777216))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6189():void { var l:Short = (-2.2)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-16777216))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6190():void { var l:Short = (-2.2)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((16777217))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6191():void { var l:Short = (-2.2)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-16777217))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6192():void { var l:Short = (-2.2)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((2147483647))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6193():void { var l:Short = (-2.2)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2.2) + x10.lang.Double.implicit_operator_as((-2147483647))		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6194():void { var l:Short = (127)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((127)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6195():void { var l:Short = (127)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((127)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6196():void { var l:Short = (127)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6197():void { var l:Short = (127)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6198():void { var l:Short = (127)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((127)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6199():void { var l:Short = (127)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6200():void { var l:Short = (127)+(0); }
	def m6201():void { var l:Short = (127)+(-0); }
	def m6202():void { var l:Short = (127)+(1); }
	def m6203():void { var l:Short = (127)+(-1); }
	def m6204():void { var l:Short = (127)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((127)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6205():void { var l:Short = (127)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((127)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6206():void { var l:Short = (127)+(127); }
	def m6207():void { var l:Short = (127)+(-127); }
	def m6208():void { var l:Short = (127)+(128); }
	def m6209():void { var l:Short = (127)+(-128); }
	def m6210():void { var l:Short = (127)+(255); }
	def m6211():void { var l:Short = (127)+(-255); }
	def m6212():void { var l:Short = (127)+(256); }
	def m6213():void { var l:Short = (127)+(-256); }
	def m6214():void { var l:Short = (127)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6215():void { var l:Short = (127)+(-32767); }
	def m6216():void { var l:Short = (127)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6217():void { var l:Short = (127)+(-32768); }
	def m6218():void { var l:Short = (127)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6219():void { var l:Short = (127)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6220():void { var l:Short = (127)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6221():void { var l:Short = (127)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6222():void { var l:Short = (127)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6223():void { var l:Short = (127)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6224():void { var l:Short = (127)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6225():void { var l:Short = (127)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6226():void { var l:Short = (127)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6227():void { var l:Short = (127)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (127) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6228():void { var l:Short = (-127)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-127)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6229():void { var l:Short = (-127)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-127)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6230():void { var l:Short = (-127)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6231():void { var l:Short = (-127)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6232():void { var l:Short = (-127)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-127)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6233():void { var l:Short = (-127)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6234():void { var l:Short = (-127)+(0); }
	def m6235():void { var l:Short = (-127)+(-0); }
	def m6236():void { var l:Short = (-127)+(1); }
	def m6237():void { var l:Short = (-127)+(-1); }
	def m6238():void { var l:Short = (-127)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-127)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6239():void { var l:Short = (-127)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-127)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6240():void { var l:Short = (-127)+(127); }
	def m6241():void { var l:Short = (-127)+(-127); }
	def m6242():void { var l:Short = (-127)+(128); }
	def m6243():void { var l:Short = (-127)+(-128); }
	def m6244():void { var l:Short = (-127)+(255); }
	def m6245():void { var l:Short = (-127)+(-255); }
	def m6246():void { var l:Short = (-127)+(256); }
	def m6247():void { var l:Short = (-127)+(-256); }
	def m6248():void { var l:Short = (-127)+(32767); }
	def m6249():void { var l:Short = (-127)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (-32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6250():void { var l:Short = (-127)+(32768); }
	def m6251():void { var l:Short = (-127)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (-32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6252():void { var l:Short = (-127)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6253():void { var l:Short = (-127)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6254():void { var l:Short = (-127)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6255():void { var l:Short = (-127)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6256():void { var l:Short = (-127)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6257():void { var l:Short = (-127)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6258():void { var l:Short = (-127)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6259():void { var l:Short = (-127)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6260():void { var l:Short = (-127)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6261():void { var l:Short = (-127)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-127) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6262():void { var l:Short = (128)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((128)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6263():void { var l:Short = (128)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((128)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6264():void { var l:Short = (128)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6265():void { var l:Short = (128)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6266():void { var l:Short = (128)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((128)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6267():void { var l:Short = (128)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6268():void { var l:Short = (128)+(0); }
	def m6269():void { var l:Short = (128)+(-0); }
	def m6270():void { var l:Short = (128)+(1); }
	def m6271():void { var l:Short = (128)+(-1); }
	def m6272():void { var l:Short = (128)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((128)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6273():void { var l:Short = (128)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((128)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6274():void { var l:Short = (128)+(127); }
	def m6275():void { var l:Short = (128)+(-127); }
	def m6276():void { var l:Short = (128)+(128); }
	def m6277():void { var l:Short = (128)+(-128); }
	def m6278():void { var l:Short = (128)+(255); }
	def m6279():void { var l:Short = (128)+(-255); }
	def m6280():void { var l:Short = (128)+(256); }
	def m6281():void { var l:Short = (128)+(-256); }
	def m6282():void { var l:Short = (128)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6283():void { var l:Short = (128)+(-32767); }
	def m6284():void { var l:Short = (128)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6285():void { var l:Short = (128)+(-32768); }
	def m6286():void { var l:Short = (128)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6287():void { var l:Short = (128)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6288():void { var l:Short = (128)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6289():void { var l:Short = (128)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6290():void { var l:Short = (128)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6291():void { var l:Short = (128)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6292():void { var l:Short = (128)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6293():void { var l:Short = (128)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6294():void { var l:Short = (128)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6295():void { var l:Short = (128)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (128) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6296():void { var l:Short = (-128)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-128)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6297():void { var l:Short = (-128)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-128)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6298():void { var l:Short = (-128)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6299():void { var l:Short = (-128)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6300():void { var l:Short = (-128)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-128)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6301():void { var l:Short = (-128)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6302():void { var l:Short = (-128)+(0); }
	def m6303():void { var l:Short = (-128)+(-0); }
	def m6304():void { var l:Short = (-128)+(1); }
	def m6305():void { var l:Short = (-128)+(-1); }
	def m6306():void { var l:Short = (-128)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-128)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6307():void { var l:Short = (-128)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-128)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6308():void { var l:Short = (-128)+(127); }
	def m6309():void { var l:Short = (-128)+(-127); }
	def m6310():void { var l:Short = (-128)+(128); }
	def m6311():void { var l:Short = (-128)+(-128); }
	def m6312():void { var l:Short = (-128)+(255); }
	def m6313():void { var l:Short = (-128)+(-255); }
	def m6314():void { var l:Short = (-128)+(256); }
	def m6315():void { var l:Short = (-128)+(-256); }
	def m6316():void { var l:Short = (-128)+(32767); }
	def m6317():void { var l:Short = (-128)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (-32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6318():void { var l:Short = (-128)+(32768); }
	def m6319():void { var l:Short = (-128)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (-32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6320():void { var l:Short = (-128)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6321():void { var l:Short = (-128)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6322():void { var l:Short = (-128)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6323():void { var l:Short = (-128)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6324():void { var l:Short = (-128)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6325():void { var l:Short = (-128)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6326():void { var l:Short = (-128)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6327():void { var l:Short = (-128)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6328():void { var l:Short = (-128)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6329():void { var l:Short = (-128)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-128) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6330():void { var l:Short = (255)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((255)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6331():void { var l:Short = (255)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((255)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6332():void { var l:Short = (255)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6333():void { var l:Short = (255)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6334():void { var l:Short = (255)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((255)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6335():void { var l:Short = (255)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6336():void { var l:Short = (255)+(0); }
	def m6337():void { var l:Short = (255)+(-0); }
	def m6338():void { var l:Short = (255)+(1); }
	def m6339():void { var l:Short = (255)+(-1); }
	def m6340():void { var l:Short = (255)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((255)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6341():void { var l:Short = (255)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((255)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6342():void { var l:Short = (255)+(127); }
	def m6343():void { var l:Short = (255)+(-127); }
	def m6344():void { var l:Short = (255)+(128); }
	def m6345():void { var l:Short = (255)+(-128); }
	def m6346():void { var l:Short = (255)+(255); }
	def m6347():void { var l:Short = (255)+(-255); }
	def m6348():void { var l:Short = (255)+(256); }
	def m6349():void { var l:Short = (255)+(-256); }
	def m6350():void { var l:Short = (255)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6351():void { var l:Short = (255)+(-32767); }
	def m6352():void { var l:Short = (255)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6353():void { var l:Short = (255)+(-32768); }
	def m6354():void { var l:Short = (255)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6355():void { var l:Short = (255)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6356():void { var l:Short = (255)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6357():void { var l:Short = (255)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6358():void { var l:Short = (255)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6359():void { var l:Short = (255)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6360():void { var l:Short = (255)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6361():void { var l:Short = (255)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6362():void { var l:Short = (255)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6363():void { var l:Short = (255)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (255) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6364():void { var l:Short = (-255)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-255)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6365():void { var l:Short = (-255)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-255)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6366():void { var l:Short = (-255)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6367():void { var l:Short = (-255)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6368():void { var l:Short = (-255)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-255)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6369():void { var l:Short = (-255)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6370():void { var l:Short = (-255)+(0); }
	def m6371():void { var l:Short = (-255)+(-0); }
	def m6372():void { var l:Short = (-255)+(1); }
	def m6373():void { var l:Short = (-255)+(-1); }
	def m6374():void { var l:Short = (-255)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-255)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6375():void { var l:Short = (-255)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-255)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6376():void { var l:Short = (-255)+(127); }
	def m6377():void { var l:Short = (-255)+(-127); }
	def m6378():void { var l:Short = (-255)+(128); }
	def m6379():void { var l:Short = (-255)+(-128); }
	def m6380():void { var l:Short = (-255)+(255); }
	def m6381():void { var l:Short = (-255)+(-255); }
	def m6382():void { var l:Short = (-255)+(256); }
	def m6383():void { var l:Short = (-255)+(-256); }
	def m6384():void { var l:Short = (-255)+(32767); }
	def m6385():void { var l:Short = (-255)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (-32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6386():void { var l:Short = (-255)+(32768); }
	def m6387():void { var l:Short = (-255)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (-32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6388():void { var l:Short = (-255)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6389():void { var l:Short = (-255)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6390():void { var l:Short = (-255)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6391():void { var l:Short = (-255)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6392():void { var l:Short = (-255)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6393():void { var l:Short = (-255)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6394():void { var l:Short = (-255)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6395():void { var l:Short = (-255)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6396():void { var l:Short = (-255)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6397():void { var l:Short = (-255)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-255) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6398():void { var l:Short = (256)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((256)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6399():void { var l:Short = (256)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((256)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6400():void { var l:Short = (256)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6401():void { var l:Short = (256)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6402():void { var l:Short = (256)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((256)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6403():void { var l:Short = (256)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6404():void { var l:Short = (256)+(0); }
	def m6405():void { var l:Short = (256)+(-0); }
	def m6406():void { var l:Short = (256)+(1); }
	def m6407():void { var l:Short = (256)+(-1); }
	def m6408():void { var l:Short = (256)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((256)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6409():void { var l:Short = (256)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((256)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6410():void { var l:Short = (256)+(127); }
	def m6411():void { var l:Short = (256)+(-127); }
	def m6412():void { var l:Short = (256)+(128); }
	def m6413():void { var l:Short = (256)+(-128); }
	def m6414():void { var l:Short = (256)+(255); }
	def m6415():void { var l:Short = (256)+(-255); }
	def m6416():void { var l:Short = (256)+(256); }
	def m6417():void { var l:Short = (256)+(-256); }
	def m6418():void { var l:Short = (256)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6419():void { var l:Short = (256)+(-32767); }
	def m6420():void { var l:Short = (256)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6421():void { var l:Short = (256)+(-32768); }
	def m6422():void { var l:Short = (256)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6423():void { var l:Short = (256)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6424():void { var l:Short = (256)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6425():void { var l:Short = (256)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6426():void { var l:Short = (256)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6427():void { var l:Short = (256)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6428():void { var l:Short = (256)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6429():void { var l:Short = (256)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6430():void { var l:Short = (256)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6431():void { var l:Short = (256)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (256) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6432():void { var l:Short = (-256)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-256)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6433():void { var l:Short = (-256)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-256)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6434():void { var l:Short = (-256)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6435():void { var l:Short = (-256)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6436():void { var l:Short = (-256)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-256)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6437():void { var l:Short = (-256)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6438():void { var l:Short = (-256)+(0); }
	def m6439():void { var l:Short = (-256)+(-0); }
	def m6440():void { var l:Short = (-256)+(1); }
	def m6441():void { var l:Short = (-256)+(-1); }
	def m6442():void { var l:Short = (-256)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-256)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6443():void { var l:Short = (-256)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-256)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6444():void { var l:Short = (-256)+(127); }
	def m6445():void { var l:Short = (-256)+(-127); }
	def m6446():void { var l:Short = (-256)+(128); }
	def m6447():void { var l:Short = (-256)+(-128); }
	def m6448():void { var l:Short = (-256)+(255); }
	def m6449():void { var l:Short = (-256)+(-255); }
	def m6450():void { var l:Short = (-256)+(256); }
	def m6451():void { var l:Short = (-256)+(-256); }
	def m6452():void { var l:Short = (-256)+(32767); }
	def m6453():void { var l:Short = (-256)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (-32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6454():void { var l:Short = (-256)+(32768); }
	def m6455():void { var l:Short = (-256)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (-32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6456():void { var l:Short = (-256)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6457():void { var l:Short = (-256)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6458():void { var l:Short = (-256)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6459():void { var l:Short = (-256)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6460():void { var l:Short = (-256)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6461():void { var l:Short = (-256)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6462():void { var l:Short = (-256)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6463():void { var l:Short = (-256)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6464():void { var l:Short = (-256)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6465():void { var l:Short = (-256)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-256) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6466():void { var l:Short = (32767)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((32767)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6467():void { var l:Short = (32767)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32767)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6468():void { var l:Short = (32767)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6469():void { var l:Short = (32767)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6470():void { var l:Short = (32767)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((32767)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6471():void { var l:Short = (32767)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6472():void { var l:Short = (32767)+(0); }
	def m6473():void { var l:Short = (32767)+(-0); }
	def m6474():void { var l:Short = (32767)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6475():void { var l:Short = (32767)+(-1); }
	def m6476():void { var l:Short = (32767)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32767)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6477():void { var l:Short = (32767)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32767)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6478():void { var l:Short = (32767)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6479():void { var l:Short = (32767)+(-127); }
	def m6480():void { var l:Short = (32767)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6481():void { var l:Short = (32767)+(-128); }
	def m6482():void { var l:Short = (32767)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6483():void { var l:Short = (32767)+(-255); }
	def m6484():void { var l:Short = (32767)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6485():void { var l:Short = (32767)+(-256); }
	def m6486():void { var l:Short = (32767)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6487():void { var l:Short = (32767)+(-32767); }
	def m6488():void { var l:Short = (32767)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6489():void { var l:Short = (32767)+(-32768); }
	def m6490():void { var l:Short = (32767)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6491():void { var l:Short = (32767)+(-65535); }
	def m6492():void { var l:Short = (32767)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6493():void { var l:Short = (32767)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6494():void { var l:Short = (32767)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6495():void { var l:Short = (32767)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6496():void { var l:Short = (32767)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6497():void { var l:Short = (32767)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6498():void { var l:Short = (32767)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6499():void { var l:Short = (32767)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32767) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6500():void { var l:Short = (-32767)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-32767)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6501():void { var l:Short = (-32767)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32767)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6502():void { var l:Short = (-32767)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6503():void { var l:Short = (-32767)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6504():void { var l:Short = (-32767)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-32767)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6505():void { var l:Short = (-32767)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6506():void { var l:Short = (-32767)+(0); }
	def m6507():void { var l:Short = (-32767)+(-0); }
	def m6508():void { var l:Short = (-32767)+(1); }
	def m6509():void { var l:Short = (-32767)+(-1); }
	def m6510():void { var l:Short = (-32767)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32767)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6511():void { var l:Short = (-32767)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32767)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6512():void { var l:Short = (-32767)+(127); }
	def m6513():void { var l:Short = (-32767)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6514():void { var l:Short = (-32767)+(128); }
	def m6515():void { var l:Short = (-32767)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6516():void { var l:Short = (-32767)+(255); }
	def m6517():void { var l:Short = (-32767)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6518():void { var l:Short = (-32767)+(256); }
	def m6519():void { var l:Short = (-32767)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6520():void { var l:Short = (-32767)+(32767); }
	def m6521():void { var l:Short = (-32767)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6522():void { var l:Short = (-32767)+(32768); }
	def m6523():void { var l:Short = (-32767)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6524():void { var l:Short = (-32767)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6525():void { var l:Short = (-32767)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6526():void { var l:Short = (-32767)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6527():void { var l:Short = (-32767)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6528():void { var l:Short = (-32767)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6529():void { var l:Short = (-32767)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6530():void { var l:Short = (-32767)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6531():void { var l:Short = (-32767)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6532():void { var l:Short = (-32767)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6533():void { var l:Short = (-32767)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32767) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6534():void { var l:Short = (32768)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((32768)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6535():void { var l:Short = (32768)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32768)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6536():void { var l:Short = (32768)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6537():void { var l:Short = (32768)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6538():void { var l:Short = (32768)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((32768)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6539():void { var l:Short = (32768)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6540():void { var l:Short = (32768)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6541():void { var l:Short = (32768)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6542():void { var l:Short = (32768)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6543():void { var l:Short = (32768)+(-1); }
	def m6544():void { var l:Short = (32768)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32768)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6545():void { var l:Short = (32768)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((32768)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6546():void { var l:Short = (32768)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6547():void { var l:Short = (32768)+(-127); }
	def m6548():void { var l:Short = (32768)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6549():void { var l:Short = (32768)+(-128); }
	def m6550():void { var l:Short = (32768)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6551():void { var l:Short = (32768)+(-255); }
	def m6552():void { var l:Short = (32768)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6553():void { var l:Short = (32768)+(-256); }
	def m6554():void { var l:Short = (32768)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6555():void { var l:Short = (32768)+(-32767); }
	def m6556():void { var l:Short = (32768)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6557():void { var l:Short = (32768)+(-32768); }
	def m6558():void { var l:Short = (32768)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6559():void { var l:Short = (32768)+(-65535); }
	def m6560():void { var l:Short = (32768)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6561():void { var l:Short = (32768)+(-65536); }
	def m6562():void { var l:Short = (32768)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6563():void { var l:Short = (32768)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6564():void { var l:Short = (32768)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6565():void { var l:Short = (32768)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6566():void { var l:Short = (32768)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6567():void { var l:Short = (32768)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (32768) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6568():void { var l:Short = (-32768)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-32768)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6569():void { var l:Short = (-32768)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32768)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6570():void { var l:Short = (-32768)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6571():void { var l:Short = (-32768)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6572():void { var l:Short = (-32768)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-32768)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6573():void { var l:Short = (-32768)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6574():void { var l:Short = (-32768)+(0); }
	def m6575():void { var l:Short = (-32768)+(-0); }
	def m6576():void { var l:Short = (-32768)+(1); }
	def m6577():void { var l:Short = (-32768)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6578():void { var l:Short = (-32768)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32768)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6579():void { var l:Short = (-32768)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-32768)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6580():void { var l:Short = (-32768)+(127); }
	def m6581():void { var l:Short = (-32768)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6582():void { var l:Short = (-32768)+(128); }
	def m6583():void { var l:Short = (-32768)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6584():void { var l:Short = (-32768)+(255); }
	def m6585():void { var l:Short = (-32768)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6586():void { var l:Short = (-32768)+(256); }
	def m6587():void { var l:Short = (-32768)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6588():void { var l:Short = (-32768)+(32767); }
	def m6589():void { var l:Short = (-32768)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6590():void { var l:Short = (-32768)+(32768); }
	def m6591():void { var l:Short = (-32768)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6592():void { var l:Short = (-32768)+(65535); }
	def m6593():void { var l:Short = (-32768)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6594():void { var l:Short = (-32768)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6595():void { var l:Short = (-32768)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6596():void { var l:Short = (-32768)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6597():void { var l:Short = (-32768)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6598():void { var l:Short = (-32768)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6599():void { var l:Short = (-32768)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6600():void { var l:Short = (-32768)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6601():void { var l:Short = (-32768)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-32768) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6602():void { var l:Short = (65535)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((65535)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6603():void { var l:Short = (65535)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65535)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6604():void { var l:Short = (65535)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6605():void { var l:Short = (65535)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6606():void { var l:Short = (65535)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((65535)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6607():void { var l:Short = (65535)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6608():void { var l:Short = (65535)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6609():void { var l:Short = (65535)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6610():void { var l:Short = (65535)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6611():void { var l:Short = (65535)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (-1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6612():void { var l:Short = (65535)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65535)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6613():void { var l:Short = (65535)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65535)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6614():void { var l:Short = (65535)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6615():void { var l:Short = (65535)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (-127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6616():void { var l:Short = (65535)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6617():void { var l:Short = (65535)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (-128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6618():void { var l:Short = (65535)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6619():void { var l:Short = (65535)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (-255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6620():void { var l:Short = (65535)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6621():void { var l:Short = (65535)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (-256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6622():void { var l:Short = (65535)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6623():void { var l:Short = (65535)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (-32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6624():void { var l:Short = (65535)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6625():void { var l:Short = (65535)+(-32768); }
	def m6626():void { var l:Short = (65535)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6627():void { var l:Short = (65535)+(-65535); }
	def m6628():void { var l:Short = (65535)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6629():void { var l:Short = (65535)+(-65536); }
	def m6630():void { var l:Short = (65535)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6631():void { var l:Short = (65535)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6632():void { var l:Short = (65535)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6633():void { var l:Short = (65535)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6634():void { var l:Short = (65535)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6635():void { var l:Short = (65535)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65535) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6636():void { var l:Short = (-65535)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-65535)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6637():void { var l:Short = (-65535)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65535)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6638():void { var l:Short = (-65535)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6639():void { var l:Short = (-65535)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6640():void { var l:Short = (-65535)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-65535)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6641():void { var l:Short = (-65535)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6642():void { var l:Short = (-65535)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6643():void { var l:Short = (-65535)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6644():void { var l:Short = (-65535)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6645():void { var l:Short = (-65535)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6646():void { var l:Short = (-65535)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65535)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6647():void { var l:Short = (-65535)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65535)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6648():void { var l:Short = (-65535)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6649():void { var l:Short = (-65535)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6650():void { var l:Short = (-65535)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6651():void { var l:Short = (-65535)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6652():void { var l:Short = (-65535)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6653():void { var l:Short = (-65535)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6654():void { var l:Short = (-65535)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6655():void { var l:Short = (-65535)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6656():void { var l:Short = (-65535)+(32767); }
	def m6657():void { var l:Short = (-65535)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6658():void { var l:Short = (-65535)+(32768); }
	def m6659():void { var l:Short = (-65535)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6660():void { var l:Short = (-65535)+(65535); }
	def m6661():void { var l:Short = (-65535)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6662():void { var l:Short = (-65535)+(65536); }
	def m6663():void { var l:Short = (-65535)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6664():void { var l:Short = (-65535)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6665():void { var l:Short = (-65535)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6666():void { var l:Short = (-65535)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6667():void { var l:Short = (-65535)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6668():void { var l:Short = (-65535)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6669():void { var l:Short = (-65535)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65535) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6670():void { var l:Short = (65536)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((65536)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6671():void { var l:Short = (65536)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65536)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6672():void { var l:Short = (65536)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6673():void { var l:Short = (65536)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6674():void { var l:Short = (65536)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((65536)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6675():void { var l:Short = (65536)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6676():void { var l:Short = (65536)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6677():void { var l:Short = (65536)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6678():void { var l:Short = (65536)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6679():void { var l:Short = (65536)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6680():void { var l:Short = (65536)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65536)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6681():void { var l:Short = (65536)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((65536)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6682():void { var l:Short = (65536)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6683():void { var l:Short = (65536)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6684():void { var l:Short = (65536)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6685():void { var l:Short = (65536)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6686():void { var l:Short = (65536)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6687():void { var l:Short = (65536)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6688():void { var l:Short = (65536)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6689():void { var l:Short = (65536)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6690():void { var l:Short = (65536)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6691():void { var l:Short = (65536)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6692():void { var l:Short = (65536)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6693():void { var l:Short = (65536)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6694():void { var l:Short = (65536)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6695():void { var l:Short = (65536)+(-65535); }
	def m6696():void { var l:Short = (65536)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6697():void { var l:Short = (65536)+(-65536); }
	def m6698():void { var l:Short = (65536)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6699():void { var l:Short = (65536)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6700():void { var l:Short = (65536)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6701():void { var l:Short = (65536)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6702():void { var l:Short = (65536)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6703():void { var l:Short = (65536)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (65536) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6704():void { var l:Short = (-65536)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-65536)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6705():void { var l:Short = (-65536)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65536)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6706():void { var l:Short = (-65536)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6707():void { var l:Short = (-65536)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6708():void { var l:Short = (-65536)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-65536)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6709():void { var l:Short = (-65536)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6710():void { var l:Short = (-65536)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6711():void { var l:Short = (-65536)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6712():void { var l:Short = (-65536)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6713():void { var l:Short = (-65536)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6714():void { var l:Short = (-65536)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65536)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6715():void { var l:Short = (-65536)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-65536)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6716():void { var l:Short = (-65536)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6717():void { var l:Short = (-65536)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6718():void { var l:Short = (-65536)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6719():void { var l:Short = (-65536)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6720():void { var l:Short = (-65536)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6721():void { var l:Short = (-65536)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6722():void { var l:Short = (-65536)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6723():void { var l:Short = (-65536)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6724():void { var l:Short = (-65536)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6725():void { var l:Short = (-65536)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6726():void { var l:Short = (-65536)+(32768); }
	def m6727():void { var l:Short = (-65536)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6728():void { var l:Short = (-65536)+(65535); }
	def m6729():void { var l:Short = (-65536)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6730():void { var l:Short = (-65536)+(65536); }
	def m6731():void { var l:Short = (-65536)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6732():void { var l:Short = (-65536)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6733():void { var l:Short = (-65536)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6734():void { var l:Short = (-65536)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6735():void { var l:Short = (-65536)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6736():void { var l:Short = (-65536)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6737():void { var l:Short = (-65536)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-65536) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6738():void { var l:Short = (16777216)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((16777216)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6739():void { var l:Short = (16777216)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777216)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6740():void { var l:Short = (16777216)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6741():void { var l:Short = (16777216)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6742():void { var l:Short = (16777216)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((16777216)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6743():void { var l:Short = (16777216)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6744():void { var l:Short = (16777216)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6745():void { var l:Short = (16777216)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6746():void { var l:Short = (16777216)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6747():void { var l:Short = (16777216)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6748():void { var l:Short = (16777216)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777216)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6749():void { var l:Short = (16777216)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777216)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6750():void { var l:Short = (16777216)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6751():void { var l:Short = (16777216)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6752():void { var l:Short = (16777216)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6753():void { var l:Short = (16777216)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6754():void { var l:Short = (16777216)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6755():void { var l:Short = (16777216)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6756():void { var l:Short = (16777216)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6757():void { var l:Short = (16777216)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6758():void { var l:Short = (16777216)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6759():void { var l:Short = (16777216)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6760():void { var l:Short = (16777216)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6761():void { var l:Short = (16777216)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6762():void { var l:Short = (16777216)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6763():void { var l:Short = (16777216)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6764():void { var l:Short = (16777216)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6765():void { var l:Short = (16777216)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6766():void { var l:Short = (16777216)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6767():void { var l:Short = (16777216)+(-16777216); }
	def m6768():void { var l:Short = (16777216)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6769():void { var l:Short = (16777216)+(-16777217); }
	def m6770():void { var l:Short = (16777216)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6771():void { var l:Short = (16777216)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777216) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6772():void { var l:Short = (-16777216)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-16777216)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6773():void { var l:Short = (-16777216)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777216)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6774():void { var l:Short = (-16777216)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6775():void { var l:Short = (-16777216)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6776():void { var l:Short = (-16777216)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-16777216)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6777():void { var l:Short = (-16777216)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6778():void { var l:Short = (-16777216)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6779():void { var l:Short = (-16777216)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6780():void { var l:Short = (-16777216)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6781():void { var l:Short = (-16777216)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6782():void { var l:Short = (-16777216)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777216)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6783():void { var l:Short = (-16777216)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777216)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6784():void { var l:Short = (-16777216)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6785():void { var l:Short = (-16777216)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6786():void { var l:Short = (-16777216)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6787():void { var l:Short = (-16777216)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6788():void { var l:Short = (-16777216)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6789():void { var l:Short = (-16777216)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6790():void { var l:Short = (-16777216)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6791():void { var l:Short = (-16777216)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6792():void { var l:Short = (-16777216)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6793():void { var l:Short = (-16777216)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6794():void { var l:Short = (-16777216)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6795():void { var l:Short = (-16777216)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6796():void { var l:Short = (-16777216)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6797():void { var l:Short = (-16777216)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6798():void { var l:Short = (-16777216)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6799():void { var l:Short = (-16777216)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6800():void { var l:Short = (-16777216)+(16777216); }
	def m6801():void { var l:Short = (-16777216)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6802():void { var l:Short = (-16777216)+(16777217); }
	def m6803():void { var l:Short = (-16777216)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6804():void { var l:Short = (-16777216)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6805():void { var l:Short = (-16777216)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777216) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6806():void { var l:Short = (16777217)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((16777217)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6807():void { var l:Short = (16777217)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777217)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6808():void { var l:Short = (16777217)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6809():void { var l:Short = (16777217)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6810():void { var l:Short = (16777217)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((16777217)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6811():void { var l:Short = (16777217)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6812():void { var l:Short = (16777217)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6813():void { var l:Short = (16777217)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6814():void { var l:Short = (16777217)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6815():void { var l:Short = (16777217)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6816():void { var l:Short = (16777217)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777217)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6817():void { var l:Short = (16777217)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((16777217)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6818():void { var l:Short = (16777217)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6819():void { var l:Short = (16777217)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6820():void { var l:Short = (16777217)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6821():void { var l:Short = (16777217)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6822():void { var l:Short = (16777217)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6823():void { var l:Short = (16777217)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6824():void { var l:Short = (16777217)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6825():void { var l:Short = (16777217)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6826():void { var l:Short = (16777217)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6827():void { var l:Short = (16777217)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6828():void { var l:Short = (16777217)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6829():void { var l:Short = (16777217)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6830():void { var l:Short = (16777217)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6831():void { var l:Short = (16777217)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6832():void { var l:Short = (16777217)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6833():void { var l:Short = (16777217)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6834():void { var l:Short = (16777217)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6835():void { var l:Short = (16777217)+(-16777216); }
	def m6836():void { var l:Short = (16777217)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6837():void { var l:Short = (16777217)+(-16777217); }
	def m6838():void { var l:Short = (16777217)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6839():void { var l:Short = (16777217)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (16777217) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6840():void { var l:Short = (-16777217)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-16777217)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6841():void { var l:Short = (-16777217)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777217)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6842():void { var l:Short = (-16777217)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6843():void { var l:Short = (-16777217)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6844():void { var l:Short = (-16777217)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-16777217)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6845():void { var l:Short = (-16777217)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6846():void { var l:Short = (-16777217)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6847():void { var l:Short = (-16777217)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6848():void { var l:Short = (-16777217)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6849():void { var l:Short = (-16777217)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6850():void { var l:Short = (-16777217)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777217)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6851():void { var l:Short = (-16777217)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-16777217)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6852():void { var l:Short = (-16777217)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6853():void { var l:Short = (-16777217)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6854():void { var l:Short = (-16777217)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6855():void { var l:Short = (-16777217)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6856():void { var l:Short = (-16777217)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6857():void { var l:Short = (-16777217)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6858():void { var l:Short = (-16777217)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6859():void { var l:Short = (-16777217)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6860():void { var l:Short = (-16777217)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6861():void { var l:Short = (-16777217)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6862():void { var l:Short = (-16777217)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6863():void { var l:Short = (-16777217)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6864():void { var l:Short = (-16777217)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6865():void { var l:Short = (-16777217)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6866():void { var l:Short = (-16777217)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6867():void { var l:Short = (-16777217)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6868():void { var l:Short = (-16777217)+(16777216); }
	def m6869():void { var l:Short = (-16777217)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6870():void { var l:Short = (-16777217)+(16777217); }
	def m6871():void { var l:Short = (-16777217)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6872():void { var l:Short = (-16777217)+(2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6873():void { var l:Short = (-16777217)+(-2147483647); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-16777217) + (-2147483647)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6874():void { var l:Short = (2147483647)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((2147483647)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6875():void { var l:Short = (2147483647)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((2147483647)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6876():void { var l:Short = (2147483647)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6877():void { var l:Short = (2147483647)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6878():void { var l:Short = (2147483647)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((2147483647)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6879():void { var l:Short = (2147483647)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6880():void { var l:Short = (2147483647)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6881():void { var l:Short = (2147483647)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6882():void { var l:Short = (2147483647)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6883():void { var l:Short = (2147483647)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6884():void { var l:Short = (2147483647)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((2147483647)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6885():void { var l:Short = (2147483647)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((2147483647)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6886():void { var l:Short = (2147483647)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6887():void { var l:Short = (2147483647)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6888():void { var l:Short = (2147483647)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6889():void { var l:Short = (2147483647)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6890():void { var l:Short = (2147483647)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6891():void { var l:Short = (2147483647)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6892():void { var l:Short = (2147483647)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6893():void { var l:Short = (2147483647)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6894():void { var l:Short = (2147483647)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6895():void { var l:Short = (2147483647)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6896():void { var l:Short = (2147483647)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6897():void { var l:Short = (2147483647)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6898():void { var l:Short = (2147483647)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6899():void { var l:Short = (2147483647)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6900():void { var l:Short = (2147483647)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6901():void { var l:Short = (2147483647)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6902():void { var l:Short = (2147483647)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6903():void { var l:Short = (2147483647)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6904():void { var l:Short = (2147483647)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6905():void { var l:Short = (2147483647)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (2147483647) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6906():void { var l:Short = (2147483647)+(2147483647); }
	def m6907():void { var l:Short = (2147483647)+(-2147483647); }
	def m6908():void { var l:Short = (-2147483647)+(w0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Float.implicit_operator_as((-2147483647)) + (SignedTests.this.w0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Float)
	def m6909():void { var l:Short = (-2147483647)+(w1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-2147483647)) + (SignedTests.this.w1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6910():void { var l:Short = (-2147483647)+(w2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + x10.lang.Int.implicit_operator_as((SignedTests.this.w2))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6911():void { var l:Short = (-2147483647)+(w3); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (SignedTests.this.w3)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6912():void { var l:Short = (-2147483647)+(w4); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Long.implicit_operator_as((-2147483647)) + (SignedTests.this.w4)		 Expected type: x10.lang.Short		 Found type: x10.lang.Long)
	def m6913():void { var l:Short = (-2147483647)+(w5); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + x10.lang.Int.implicit_operator_as((SignedTests.this.w5))		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6914():void { var l:Short = (-2147483647)+(0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6915():void { var l:Short = (-2147483647)+(-0); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (0)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6916():void { var l:Short = (-2147483647)+(1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6917():void { var l:Short = (-2147483647)+(-1); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-1)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6918():void { var l:Short = (-2147483647)+(2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-2147483647)) + (2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6919():void { var l:Short = (-2147483647)+(-2.2); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: x10.lang.Double.implicit_operator_as((-2147483647)) + (-2.2)		 Expected type: x10.lang.Short		 Found type: x10.lang.Double)
	def m6920():void { var l:Short = (-2147483647)+(127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6921():void { var l:Short = (-2147483647)+(-127); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-127)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6922():void { var l:Short = (-2147483647)+(128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6923():void { var l:Short = (-2147483647)+(-128); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-128)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6924():void { var l:Short = (-2147483647)+(255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6925():void { var l:Short = (-2147483647)+(-255); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-255)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6926():void { var l:Short = (-2147483647)+(256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6927():void { var l:Short = (-2147483647)+(-256); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-256)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6928():void { var l:Short = (-2147483647)+(32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6929():void { var l:Short = (-2147483647)+(-32767); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-32767)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6930():void { var l:Short = (-2147483647)+(32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6931():void { var l:Short = (-2147483647)+(-32768); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-32768)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6932():void { var l:Short = (-2147483647)+(65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6933():void { var l:Short = (-2147483647)+(-65535); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-65535)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6934():void { var l:Short = (-2147483647)+(65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6935():void { var l:Short = (-2147483647)+(-65536); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-65536)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6936():void { var l:Short = (-2147483647)+(16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6937():void { var l:Short = (-2147483647)+(-16777216); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-16777216)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6938():void { var l:Short = (-2147483647)+(16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6939():void { var l:Short = (-2147483647)+(-16777217); }  // ERR (Semantic Error: Cannot assign expression to target.		 Expression: (-2147483647) + (-16777217)		 Expected type: x10.lang.Short		 Found type: x10.lang.Int)
	def m6940():void { var l:Short = (-2147483647)+(2147483647); }
	def m6941():void { var l:Short = (-2147483647)+(-2147483647); }
}
