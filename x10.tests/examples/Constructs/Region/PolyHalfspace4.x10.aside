/*
 *  This file is part of the X10 project (http://x10-lang.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  (C) Copyright IBM Corporation 2006-2010.
 */

/**
 * Difference for some non-rectangular regions.
 *
 * Uses "bump" argument to prArray to probe for whether constituent
 * regions of UnionRegion are disjoint: all array elements in region
 * should be bumped once and therefore all should be 1.
 */

class PolyHalfspace4 extends TestRegion {

    public def run() {

        val r1 = Region.makeRectangular([0,0], [5,5]);
        prArray("r1", r1, true);

        val ROW = X(0);
        val COL = X(1);

        val r2 = 
            reg(2, COL+ROW, LE, 7) &&
            reg(2, COL+ROW, GE, 3) &&
            reg(2, COL-ROW, LE, 1) &&
            reg(2, COL-ROW, GE, -1);
        prArray("r2", r2, true);

        val r3 = Region.makeUpperTriangular(1, 1, 4);
        prArray("r3", r3, true);

        prArray("r1.difference(r1)", r1.difference(r1), true);
        prArray("r1.difference(r2)", r1.difference(r2), true);
        prArray("r1.difference(r3)", r1.difference(r3), true);

        prArray("r2.difference(r1)", r2.difference(r1), true);
        prArray("r2.difference(r2)", r2.difference(r2), true);
        prArray("r2.difference(r3)", r2.difference(r3), true);

        prArray("r3.difference(r1)", r3.difference(r1), true);
        prArray("r3.difference(r2)", r3.difference(r2), true);
        prArray("r3.difference(r3)", r3.difference(r3), true);


        return status();
    }

    def expected() =
        "--- PolyHalfspace4: r1\n"+
        "rank 2\n"+
        "rect true\n"+
        "zeroBased true\n"+
        "rail false\n"+
        "isConvex() true\n"+
        "size() 36\n"+
        "region: [0..5,0..5]\n"+
        "  poly\n"+
        "    0  1 1 1 1 1 1 . . . . \n"+
        "    1  1 1 1 1 1 1 . . . . \n"+
        "    2  1 1 1 1 1 1 . . . . \n"+
        "    3  1 1 1 1 1 1 . . . . \n"+
        "    4  1 1 1 1 1 1 . . . . \n"+
        "    5  1 1 1 1 1 1 . . . . \n"+
        "  iterator\n"+
        "    0  1 1 1 1 1 1 . . . . \n"+
        "    1  1 1 1 1 1 1 . . . . \n"+
        "    2  1 1 1 1 1 1 . . . . \n"+
        "    3  1 1 1 1 1 1 . . . . \n"+
        "    4  1 1 1 1 1 1 . . . . \n"+
        "    5  1 1 1 1 1 1 . . . . \n"+
        "--- PolyHalfspace4: r2\n"+
        "rank 2\n"+
        "rect false\n"+
        "zeroBased false\n"+
        "rail false\n"+
        "isConvex() true\n"+
        "size() Incomplete method.\n"+
        "region: (x0+x1>=3 && x0-x1>=-1 && x0-x1<=1 && x0+x1<=7)\n"+
        "  poly\n"+
        "    1  . . 1 . . . . . . . \n"+
        "    2  . 1 1 1 . . . . . . \n"+
        "    3  . . 1 1 1 . . . . . \n"+
        "    4  . . . 1 . . . . . . \n"+
        "  iterator\n"+
        "    1  . . 1 . . . . . . . \n"+
        "    2  . 1 1 1 . . . . . . \n"+
        "    3  . . 1 1 1 . . . . . \n"+
        "    4  . . . 1 . . . . . . \n"+
        "--- PolyHalfspace4: r3\n"+
        "rank 2\n"+
        "rect false\n"+
        "zeroBased false\n"+
        "rail false\n"+
        "isConvex() true\n"+
        "size() Incomplete method.\n"+
        "region: (x0>=1 && x1<=4 && x0-x1<=0)\n"+
        "  poly\n"+
        "    1  . 1 1 1 1 . . . . . \n"+
        "    2  . . 1 1 1 . . . . . \n"+
        "    3  . . . 1 1 . . . . . \n"+
        "    4  . . . . 1 . . . . . \n"+
        "  iterator\n"+
        "    1  . 1 1 1 1 . . . . . \n"+
        "    2  . . 1 1 1 . . . . . \n"+
        "    3  . . . 1 1 . . . . . \n"+
        "    4  . . . . 1 . . . . . \n"+
        "--- PolyHalfspace4: r1.difference(r1)\n"+
        "rank 2\n"+
        "rect false\n"+
        "zeroBased false\n"+
        "rail false\n"+
        "isConvex() false\n"+
        "size() 0\n"+
        "region: empty(2)\n"+
        "  iterator\n"+
        "--- PolyHalfspace4: r1.difference(r2)\n"+
        "rank 2\n"+
        "rect false\n"+
        "zeroBased false\n"+
        "rail false\n"+
        "isConvex() false\n"+
        "size() Incomplete method.\n"+
        "region: ((x0>=0 && x1>=0 && x0+x1<=2) || (x0+x1>=3 && x0>=0 && x1<=5 && x0-x1<=-2) || (x0+x1>=3 && x0-x1>=2 && x1>=0 && x0<=5) || (x0+x1>=8 && x0-x1>=-1 && x1<=5 && x0-x1<=1 && x0<=5))\n"+
        "  poly\n"+
        "  poly\n"+
        "  poly\n"+
        "  poly\n"+
        "    0  1 1 1 1 1 1 . . . . \n"+
        "    1  1 1 . 1 1 1 . . . . \n"+
        "    2  1 . . . 1 1 . . . . \n"+
        "    3  1 1 . . . 1 . . . . \n"+
        "    4  1 1 1 . 1 1 . . . . \n"+
        "    5  1 1 1 1 1 1 . . . . \n"+
        "  iterator\n"+
        "    0  1 1 1 1 1 1 . . . . \n"+
        "    1  1 1 . 1 1 1 . . . . \n"+
        "    2  1 . . . 1 1 . . . . \n"+
        "    3  1 1 . . . 1 . . . . \n"+
        "    4  1 1 1 . 1 1 . . . . \n"+
        "    5  1 1 1 1 1 1 . . . . \n"+
        "--- PolyHalfspace4: r1.difference(r3)\n"+
        "rank 2\n"+
        "rect false\n"+
        "zeroBased false\n"+
        "rail false\n"+
        "isConvex() false\n"+
        "size() Incomplete method.\n"+
        "region: ([0..0,0..5] || [1..5,5..5] || (x0-x1>=1 && x1>=0 && x0<=5))\n"+
        "  poly\n"+
        "  poly\n"+
        "  poly\n"+
        "    0  1 1 1 1 1 1 . . . . \n"+
        "    1  1 . . . . 1 . . . . \n"+
        "    2  1 1 . . . 1 . . . . \n"+
        "    3  1 1 1 . . 1 . . . . \n"+
        "    4  1 1 1 1 . 1 . . . . \n"+
        "    5  1 1 1 1 1 1 . . . . \n"+
        "  iterator\n"+
        "    0  1 1 1 1 1 1 . . . . \n"+
        "    1  1 . . . . 1 . . . . \n"+
        "    2  1 1 . . . 1 . . . . \n"+
        "    3  1 1 1 . . 1 . . . . \n"+
        "    4  1 1 1 1 . 1 . . . . \n"+
        "    5  1 1 1 1 1 1 . . . . \n"+
        "--- PolyHalfspace4: r2.difference(r1)\n"+
        "rank 2\n"+
        "rect false\n"+
        "zeroBased false\n"+
        "rail false\n"+
        "isConvex() false\n"+
        "size() 0\n"+
        "region: empty(2)\n"+
        "  iterator\n"+
        "--- PolyHalfspace4: r2.difference(r2)\n"+
        "rank 2\n"+
        "rect false\n"+
        "zeroBased false\n"+
        "rail false\n"+
        "isConvex() false\n"+
        "size() 0\n"+
        "region: empty(2)\n"+
        "  iterator\n"+
        "--- PolyHalfspace4: r2.difference(r3)\n"+
        "rank 2\n"+
        "rect false\n"+
        "zeroBased false\n"+
        "rail false\n"+
        "isConvex() true\n"+
        "size() Incomplete method.\n"+
        "region: (x0+x1>=3 && x0-x1>=1 && x0-x1<=1 && x0+x1<=7)\n"+
        "  poly\n"+
        "    2  . 1 . . . . . . . . \n"+
        "    3  . . 1 . . . . . . . \n"+
        "    4  . . . 1 . . . . . . \n"+
        "  iterator\n"+
        "    2  . 1 . . . . . . . . \n"+
        "    3  . . 1 . . . . . . . \n"+
        "    4  . . . 1 . . . . . . \n"+
        "--- PolyHalfspace4: r3.difference(r1)\n"+
        "rank 2\n"+
        "rect false\n"+
        
        "zeroBased false\n"+
        "rail false\n"+
        "isConvex() false\n"+
        "size() 0\n"+
        "region: empty(2)\n"+
        "  iterator\n"+
        "--- PolyHalfspace4: r3.difference(r2)\n"+
        "rank 2\n"+
        "rect false\n"+
        "zeroBased false\n"+
        "rail false\n"+
        "isConvex() false\n"+
        "size() Incomplete method.\n"+
        "region: ((x0>=1 && x0-x1<=0 && x0+x1<=2) || (x0>=1 && x1<=4 && x0-x1<=-2) || (x0+x1>=8 && x1<=4 && x0-x1<=0))\n"+
        "  poly\n"+
        "  poly\n"+
        "  poly\n"+
        "    1  . 1 . 1 1 . . . . . \n"+
        "    2  . . . . 1 . . . . . \n"+
        "    3\n"+
        "    4  . . . . 1 . . . . . \n"+
        "  iterator\n"+
        "    1  . 1 . 1 1 . . . . . \n"+
        "    2  . . . . 1 . . . . . \n"+
        "    3\n"+
        "    4  . . . . 1 . . . . . \n"+
        "--- PolyHalfspace4: r3.difference(r3)\n"+
        "rank 2\n"+
        "rect false\n"+
        "zeroBased false\n"+
        "rail false\n"+
        "isConvex() false\n"+
        "size() 0\n"+
        "region: empty(2)\n"+
        "  iterator\n";
    
    public static def main(Array[String](1)) {
        new PolyHalfspace4().execute();
    }

}
