#!/bin/bash

#
# (c) Copyright IBM Coporation 2007-09
#
# $Id$
# X10/Java backend regression driver script.

cleanUpExit() {
	declare -i rc=$1
	if (( $rc != 0 )); then
		case "${__cat_feed_stage}" in
			INIT)
				exit $rc
				;;
			BUILD)
				__cat_build_result=FAILURE
				if [[ "${__cat_system}" == SunOS ]]; then
					__cat_build_end_time=$(perl -e 'print time;')
				else
					__cat_build_end_time=$(date +'%s')
				fi
				;;
			*)
				;;
		esac
	fi
	(( __cat_build_time = __cat_build_end_time - __cat_build_start_time ))
	__cat_end_date=$(date +'%Y-%m-%d')
	__cat_end_time=$(date +'%H:%M:%S')
	__cat_end_date_time="${__cat_end_date}T${__cat_end_time}Z"
	sed -e 's;@backend@;'"${__cat_backend}"';' \
		-e 's;@report_version@;"'"${__cat_report_version}"'";' \
		-e 's;@backend_arch@;'"${__cat_backend_arch}"';' \
		-e 's;@start_date_time@;'"${__cat_start_date_time}"';' \
		-e 's;@end_date_time@;'"${__cat_end_date_time}"';' \
		-e 's;@hostname@;'"${__cat_hostname}"';' \
		-e 's;@svn_revision@;'"${__cat_svn_revision}"';' \
		$DATADIR/reportH.xml.tmpl > $REPORTF
	sed -e 's;@arch_os@;'"${__cat_arch_os}"';' \
		-e 's;@target_arch@;"'"${__cat_target_arch}"'";' \
		-e 's;@target_address_size@;"'"${__cat_target_address_size}"'";' \
		-e 's;@target_os@;"'"${__cat_target_os}"'";' \
		-e 's;@target_jvm@;"'"${__cat_target_jvm}"'";' \
		-e 's;@target_jvm_size@;"'"${__cat_target_jvm_size}"'";' \
		-e 's;@target_jvm_version@;"'"${__cat_target_jvm_version}"'";' \
		-e 's;@target_jre_version@;"'"${__cat_target_jre_version}"'";' \
		$DATADIR/build_targetH.xml.tmpl >> $REPORTF
	sed -e 's;@build_type@;'"${__cat_build_type}"';' \
		-e 's;@config_name@;"'"${__cat_config_name}"'";' \
		-e 's;@config_java_compiler@;"'"${__cat_config_java_compiler}"'";' \
		-e 's;@config_compiler@;"'"${__cat_config_compiler}"'";' \
		-e 's;@config_transport@;"'"${__cat_config_transport}"'";' \
		-e 's;@config_checks@;"'"${__cat_config_checks}"'";' \
		-e 's;@config_debug@;"'"${__cat_config_debug}"'";' \
		-e 's;@config_gc@;"'"${__cat_config_gc}"'";' \
		-e 's;@build_time@;'"${__cat_build_time}"';' \
		-e 's;@build_result@;'"${__cat_build_result}"';' \
		$DATADIR/build_configurationH.xml.tmpl >> $REPORTF
	printf "\t\t<output>\n" >> $REPORTF
	perl -pe 's/&/\&amp;/g;
	          s/</\&lt;/g;
	          s/>/\&gt;/g;
	          s/"/\&quot;/g;
	          s/'"'"'/\&apos;/g;
	          s/([^[:print:]\t\n\r])/sprintf("\&#%04x;", ord($1))/eg' $BLOGF >> $REPORTF
	#cat $BLOGF >> $REPORTF
	printf "\t\t</output>\n" >> $REPORTF
	if [[ "${__cat_feed_stage}" == TEST ]]; then
		sed -e 's;@x10_home@;"'"${__cat_x10_home}"'";' \
			-e 's;@java_home@;"'"${__cat_java_home}"'";' \
			-e 's;@x10lang_path@;"'"${__cat_x10lang_path}"'";' \
			-e 's;@extra_classpath@;"'"${__cat_extra_classpath}"'";' \
			-e 's;@x10c_version@;"'"${__cat_x10c_version}"'";' \
			-e 's;@x10c_maxheap@;"'"${__cat_x10c_maxheap}"'";' \
			-e 's;@x10c_time@;"'"${__cat_x10c_time}"'";' \
			-e 's;@x10c_verbose@;"'"${__cat_x10c_version}"'";' \
			-e 's;@x10c_commandlineonly@;"'"${__cat_x10c_commandlineonly}"'";' \
			-e 's;@x10c_serial@;"'"${__cat_x10c_serial}"'";' \
			-e 's;@x10c_post@;"'"${__cat_x10c_post}"'";' \
			-e 's;@x10c_COMPILER_FRAGMENT_DATA_DIRECTORY@;"'"${__cat_x10c_COMPILER_FRAGMENT_DATA_DIRECTORY}"'";' \
			-e 's;@x10c_LOOP_OPTIMIZATIONS@;"'"${__cat_x10c_LOOP_OPTIMIZATIONS}"'";' \
			-e 's;@x10c_ARRAY_OPTIMIZATIONS@;"'"${__cat_x10c_ARRAY_OPTIMIZATIONS}"'";' \
			-e 's;@x10c_INLINE_OPTIMIZATIONS@;"'"${__cat_x10c_INLINE_OPTIMIZATIONS}"'";' \
			-e 's;@x10c_PLUGINS@;"'"${__cat_x10c_PLUGINS}"'";' \
			-e 's;@x10c_PLUGIN_COMPILER@;"'"${__cat_x10c_PLUGIN_COMPILER}"'";' \
			-e 's;@x10c_XML_PROCESSOR@;"'"${__cat_x10c_XML_PROCESSOR}"'";' \
			-e 's;@x10c_EXTERNALIZE_ASTS@;"'"${__cat_x10c_EXTERNALIZE_ASTS}"'";' \
			-e 's;@x10_time@;"'"${__cat_x10_time}"'";' \
			-e 's;@x10_verbose@;"'"${__cat_x10_verbose}"'";' \
			-e 's;@x10_maxheap@;"'"${__cat_x10_maxheap}"'";' \
			-e 's;@x10_NUMBER_OF_LOCAL_PLACES@;"'"${__cat_x10_NUMBER_OF_LOCAL_PLACES}"'";' \
			-e 's;@x10_NULL_DEFAULT_VALUE@;"'"${__cat_x10_NULL_DEFAULT_VALUE}"'";' \
			-e 's;@x10_ABSTRACT_EXECUTION_STATS@;"'"${__cat_x10_ABSTRACT_EXECUTION_STATS}"'";' \
			-e 's;@x10_ABSTRACT_EXECUTION_TIMES@;"'"${__cat_x10_ABSTRACT_EXECUTION_TIMES}"'";' \
			-e 's;@x10_BIND_THREADS@;"'"${__cat_x10_BIND_THREADS}"'";' \
			-e 's;@x10_BIND_THREADS_DIAGNOSTICS@;"'"${__cat_x10_BIND_THREADS_DIAGNOSTICS}"'";' \
			-e 's;@x10_OPTIMIZE_FOREACH@;"'"${__cat_x10_OPTIMIZE_FOREACH}"'";' \
			-e 's;@x10_LOAD@;"'"${__cat_x10_LOAD}"'";' \
			-e 's;@test_configuration@;'"${__cat_test_configuration}"';' \
			$DATADIR/test_configurationH.xml.tmpl >> $REPORTF
		cat $TLOGF >> $REPORTF
		cat $DATADIR/test_configurationT.xml.tmpl >> $REPORTF
	fi
	cat $DATADIR/build_configurationT.xml.tmpl >> $REPORTF
	cat $DATADIR/build_targetT.xml.tmpl >> $REPORTF
	cat $DATADIR/reportT.xml.tmpl >> $REPORTF
	gzip -9 $REPORTF
    # directly log results into cattrack's cattrack input directory 
    if [[ -z "$NO_CATTRACK" ]]; then
	scp ${REPORTF}.gz regression@cattrack.pok.ibm.com:/home/regression/incoming/${REPORTF}.gz_tmp
	ssh regression@cattrack.pok.ibm.com chmod go+rw /home/regression/incoming/${REPORTF}.gz_tmp
	ssh regression@cattrack.pok.ibm.com mv /home/regression/incoming/${REPORTF}.gz_tmp /home/regression/incoming/${REPORTF}.gz
    fi
    if [[ -d $LOGD ]]; then
        mv ${REPORTF}.gz $LOGD
        # this should enable deferred logging
        if [[ -n "$NO_CATTRACK" && -n "$LOGTAR" ]]; then
            (cd $LOGD; \
            rm -f $LOGTAR; \
            tar cvf $LOGTAR ${REPORTF}.gz; \
            )
        fi
    fi
	# cleanup code, if any
	rm -f $BLOGF $TLOGF
	exit $rc
}

trap 'cleanUpExit 1' INT QUIT TERM

prog=$(basename $0)
MYDIR=$(dirname $0)
ABSDIR=$(cd $MYDIR; pwd)
DATADIR=$(cd $MYDIR/../data; pwd)

X10_HOME=$X10_HOME
if [[ -z "$X10_HOME" ]]; then
	export X10_HOME=$(cd $MYDIR/../..; pwd)
fi

export CVS_RSH=ssh
if [[ -z "X10_SVNROOT" ]]; then
    export X10_SVNROOT="http://svn.code.sf.net/p/x10/code/trunk"
fi

##### cat feed - init
__cat_feed_stage=INIT
__cat_report_version=1.1
if [[ -z "$CAT_BACKEND_NAME" ]]; then
    export CAT_BACKEND_NAME=x10c
fi
__cat_backend=$CAT_BACKEND_NAME
__cat_start_date=$(date +'%Y-%m-%d')
__cat_start_date2=$(echo "${__cat_start_date}" | sed -e 's;-;;g')
__cat_start_time=$(date +'%H:%M:%S')
__cat_start_time2=$(echo "${__cat_start_time}" | sed -e 's;:;;g')
__cat_start_date_time="${__cat_start_date}T${__cat_start_time}Z"
__cat_start_date_time2="${__cat_start_date2}${__cat_start_time2}"
__cat_system=$(uname -s)
if [[ "${__cat_system}" == CYGWIN* ]]; then
	__cat_system=${__cat_system%_*}
fi
__cat_os=$(echo ${__cat_system} | tr '[:upper:]' '[:lower:]')
case "${__cat_system}" in
	AIX)
		__cat_arch=$(uname -p)
		__cat_target_address_size=$(getconf KERNEL_BITMODE)
		;;
	SunOS)
		__cat_arch=$(uname -p)
		__cat_target_address_size=$(isainfo -b)
		;;
	Linux)
		__cat_arch=$(uname -m)
		__cat_target_address_size=$(getconf LONG_BIT)
		;;
	Darwin)
		__cat_arch=$(uname -m)
		__cat_target_address_size=$(getconf LONG_BIT)
        ;;
	CYGWIN)
		__cat_arch=$(uname -m)
		__cat_target_address_size=32
		;;
	*)
		__cat_arch="unknown"
		__cat_target_address_size=32
		;;
esac
__cat_backend_arch="${__cat_backend}-${__cat_arch}"
__cat_arch_os="${__cat_arch}-${__cat_os}"
if [[ -z "$CAT_LOGICAL_HOSTNAME" ]]; then
    __cat_hostname=$(hostname)
else
    __cat_hostname=$CAT_LOGICAL_HOSTNAME
fi
__cat_target_arch=${__cat_arch}
__cat_target_os=${__cat_os}
__cat_target_jvm="$(java -classpath $DATADIR GetProp java.vm.name)"
case "${__cat_target_jvm}" in
	*J9*)
		__cat_target_jvm_size=$(java -classpath $DATADIR GetProp com.ibm.vm.bitmode)
		;;
	*HotSpot*)
		__cat_target_jvm_size=$(java -classpath $DATADIR GetProp sun.arch.data.model)
		;;
	*)
		__cat_target_jvm_size=32
		;;
esac
__cat_target_jvm_version="$(java -classpath $DATADIR GetProp java.vm.version)"
__cat_target_jre_version="$(java -classpath $DATADIR GetProp java.version)"
__cat_build_type="snapshot"
__cat_config_name="${__cat_build_type}"
__cat_config_java_compiler="${__cat_target_jre_version}"
if [[ "${__cat_backend}" == x10c ]]; then
	__cat_config_compiler=NA
	__cat_config_transport=NA
	__cat_config_checks=NA
	__cat_config_debug=NA
	__cat_config_gc=NA
fi
__cat_svn_revision=$(svn info $X10_SVNROOT | egrep '^Revision:' | \
		awk '{print $2}')
REPORTF=${__cat_hostname}_${__cat_backend_arch}_${__cat_start_date_time2}_r${__cat_svn_revision}_${__cat_arch_os}_Report.xml
__cat_x10_home=$X10_HOME
if [[ "${__cat_x10_home}" == x10c ]]; then
	__cat_x10lang_path=NA
fi
declare -i ecode

##### cat feed - build
__cat_feed_stage=BUILD
if [[ "${__cat_system}" == SunOS ]]; then
	__cat_build_start_time=$(perl -e 'print time;')
else
	__cat_build_start_time=$(date +'%s')
fi
BLOGF=/tmp/${__cat_backend}.$$.${__cat_build_start_time}.build.log
$ABSDIR/buildScriptCT > $BLOGF 2>&1
ecode=$?
if (( $ecode != 0 )); then
	cleanUpExit $ecode
fi
# this step is no longer required as xrx classes are now built by default
#$ABSDIR/preCompileScriptCT >> $BLOGF 2>&1
#ecode=$?
#if (( $ecode != 0 )); then
#	cleanUpExit $ecode
#fi
__cat_build_result=SUCCESS
if [[ "${__cat_system}" == SunOS ]]; then
	__cat_build_end_time=$(perl -e 'print time;')
else
	__cat_build_end_time=$(date +'%s')
fi

##### cat feed - test (cases) compilation & execution
__cat_feed_stage=TEST
if [[ "${__cat_backend}" == x10c ]]; then
	__cat_extra_classpath=NA
else
	__cat_extra_classpath=NA
fi
export TLOGF=/tmp/${__cat_backend}.$$.${__cat_build_start_time}.test.log
__cat_test_configuration="default"
__cat_x10_home="$X10_HOME"
__cat_java_home="$(java -classpath $DATADIR GetProp java.home)"
if [[ "${__cat_backend}" == x10c ]]; then
	__cat_x10lib_path=NA
	__cat_x10lang_path=NA
fi
__cat_x10c_version=$($X10_HOME/x10.dist/bin/x10c -version | \
				egrep '^x10c' | awk '{print $3}')
__cat_x10c_maxheap="1024M"
__cat_x10c_time="true"
__cat_x10c_verbose="true"
__cat_x10c_commandlineonly="false"
__cat_x10c_serial="true"
__cat_x10c_post="java -jar $X10_HOME/x10.dist/lib/ecj.jar -1.6 -nowarn"
__cat_x10c_COMPILER_FRAGMENT_DATA_DIRECTORY="data/"
__cat_x10c_LOOP_OPTIMIZATIONS="true"
__cat_x10c_ARRAY_OPTIMIZATIONS="true"
__cat_x10c_INLINE_OPTIMIZATIONS="false"
__cat_x10c_PLUGINS=""
__cat_x10c_PLUGIN_COMPILER=""
__cat_x10c_XML_PROCESSOR=""
__cat_x10c_EXTERNALIZE_ASTS="false"
__cat_x10_time="true"
__cat_x10_verbose="true"
__cat_x10_maxheap="256M"
__cat_x10_NUMBER_OF_LOCAL_PLACES="4"
__cat_x10_NULL_DEFAULT_VALUE="true"
__cat_x10_INIT_THREADS_PER_PLACE="3"
__cat_x10_ABSTRACT_EXECUTION_STATS="false"
__cat_x10_ABSTRACT_EXECUTION_TIMES="false"
__cat_x10_BIND_THREADS="false"
__cat_x10_BIND_THREADS_DIAGNOSTICS="false"
__cat_x10_OPTIMIZE_FOREACH="false"
__cat_x10_LOAD=""

export X10DIST=$X10_HOME/x10.dist
( \
	cd $X10_HOME/x10.tests/examples; \
	$ABSDIR/xtestScriptCT -clean -shiftLog; \
)
cleanUpExit $?

# vim:tabstop=4:shiftwidth=4:expandtab
