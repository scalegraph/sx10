#!/bin/bash
# Author: kemal, 1/2005
# Author: igor, 7/2006
# Simple script to run test cases
# until a better solution is found.
#
# Note: stderr has been redirected, but the original stderr is saved as &3

MYDIR="`dirname $0`"
X10="`cd "$MYDIR/.." && /bin/pwd`"
X10DIST=$X10DIST
if [[ -z "$X10DIST" ]]; then
	X10DIST="`cd "$X10/../x10.dist" && /bin/pwd`"
fi

declare -a pat

chkArgs() {
# check number of arguments
# e.g. chkArgs 3 a b c
# used for verifying a fixed number of arguments

local num="$1"
shift
if [[ $# -ne $num ]]; then
	echo >&3 "Argument count error, expecting $num, found $#"
	exit 1
fi
}

usage() {
# print usage message and exit with nonzero return code
chkArgs 0 "$@"

echo >&3 "
Usage:

testScript [-clean] [-cleanOnly] [-f] [-t timeLimit] [-shiftLog] [ -m userEmail]
[-testList fileName] [-test test1 test2 ...]

Runs the *.x10 test cases in the current directory and
subdirectories, and places the test results in a file called
\"log\". The -m userEmail causes the log file to emailed to the
given user.

This script expects to live in x10.tests/bin, and
x10.dist directory must be a sibling of x10.tests

The -t timeLimit parameter specifies how many seconds to wait
(in terms of wall clock time) in each compilation and run step,
before killing the process. If the time limit is exceeded in any
step, the testcase is assumed to fail.  By default timeLimit is
60 seconds.

The -shiftLog parameter causes the current results to be saved,
so running the testScript later in the same directory will cause
a diff with the previous results to be mailed out as well, when
the -m userEmail option flag is present. Note that if existing
test cases that used to meet expectations, have stopped meeting
expectations since the last test run, the new test run results will
not be saved (to allow developers more time to fix the errors).

An X10 test case file *.x10 contains a single public class, which
has a \"public boolean run()\" instance method, and a \"public
static def main(args: Array[String](1))\" method.  The run method must
contain the actual test and must return true if the test passed.
run() must throw an exception or return false to indicate failure.
The main method must create the class with an empty constructor,
invoke its run method, print the result (Test succeeded or Test
failed), and exit with a zero return code if the test succeeded,
and a nonzero return code otherwise.  This makes the test case
compatible with both the x10c/x10 command (which invokes the main
method) and junit (which invokes the run method on a new instance).

Run this script in the top-level directory where the *.x10
testcases are. The current directory must have a magic file
\".ThisIsAnX10TestDirectory\" present in the directory, to
reduce the chances of accidentally deleting *.{java,class} files
elsewehere.  To run testScript in the current directory, even if
this file is not present, you can specify the -f option (force).

Test cases are found recursively starting at the top test
directory, and are executed in the same order as returned by GNU
find.

To avoid treating an *.x10 file as a test case, do not put a
\"public static def main\" method in it.  This is the way to
define auxiliary classes that are not themselves test cases.

It is possible to specify that a test case must fail. You
can specify the kind of expected failure in the file
name, fn_MustFailCompile.x10, or
fn_MustFailTimeout.x10. If there is no _MustFail* suffix, the
test case must succeed.  Each test case is expected to meet
the specified expectation (Succeed, FailCompile, FailRun, and
FailTimeout). The \"log\" script reports the test cases that did
not meet expectations.

It is also possible to declare a test case as an implementation
limitation. Just use \"//LIMITATION:\" as the first line of
the main .x10 file of the test case. All test cases not meeting
expectations will still be reported, but the string \"LIMITATION:\"
will show up in the log file before the test cases declared as
a limitation. This is helpful for focusing on the problems that
can be fixed in the nearer term.

Additional option flags:

The -clean option cleans up left-over intermediate files before
running the tests.
The -cleanOnly option implies -clean and exits immediately.

The -verbose (or --verbose) option will display the output of the
tests that were executed.
The -nolink option will prevent checking for forwarding pointers.

The -testList option indicates a file containing a list of shell
file patterns denoting the tests to run. The test list file can
also contain comment lines beginning with a \"#\" character,
and blank lines, for clarity. Alternatively, the -test option
indicates the file pattern(s) for the tests to run. With these
options, only the specified tests are run. For example:

testScript -test \"Constructs/*/FutureTest*.x10\"

will only run the tests matching the given pattern.

The -h, -help or --help option will print this message. Use:

testScript -h | less

"

exit 1

}

checkGNU() {
# check whether a particular tool is from GNU or exit with nonzero return code
# TODO: make this look through all instances and find the GNU one if any
chkArgs 1 "$@"

    local tool="$1"

    if ! "$tool" --version &> /dev/null; then
      TOOL=`type -p $tool`
      [ -n "$TOOL" ] && TOOLLOC="; $tool is $TOOL"
      echo >&3 "Cannot find GNU $tool in the PATH$TOOLLOC"
      exit 2
    fi
}

checkUsage() {
# Process the arguments.
# Also perform simple checks before running script.

  checkGNU egrep
  if [ "`uname -s`" != Darwin ]; then
    # MacOSX's find and sed are BSD, not GNU.  They're mostly compatible,
    # but be careful!
    checkGNU xargs
    checkGNU find
    checkGNU sed
  fi

  timeLimit=360
  mailDest=""
  shiftLog=""
  clean=""
  cleanOnly=""
  force=""
  pat=(.)
  x10lib="./x10lib"
  verbose=""
  nolink=""
  NewFailures=""
  NoDifferences="true"
  while [[ $# -gt 0 ]]; do
    if [[ "$1" = "-t"  && $# -ge 2 ]]; then
      timeLimit="$2"
      shift 2
    elif [[ "$1" = "-testList"  && $# -ge 2 && -r "$2" ]]; then
      pat=()
      while IFS='' read -r line; do
	#remove comments and blank lines
	line="${line##[[:space:]]}"
        [ -z "$line" ] || [[ "$line" == \#* ]] || \
          pat=("${pat[@]}" "$line")
      done < "$2"
      shift 2
    elif [[ "$1" = "-test"  && $# -ge 2 ]]; then  # TODO: eliminate me
      shift
      pat=("$@")
      break
    elif [[ "$1" = "-help" || "$1" = "-h" || "$1" = "--help" ]]; then
      usage
    elif [[ "$1" = "-shiftLog" ]]; then
      shiftLog="yes"
      shift
    elif [[ "$1" = "-clean" ]]; then
      clean="yes"
      shift
    elif [[ "$1" = "-cleanOnly" ]]; then
      clean="yes"
      cleanOnly="yes"
      shift
    elif [[ "$1" = "-f" ]]; then
      force="yes"
      shift
    elif [[ "$1" = "-m" && $# -ge 2 ]]; then
      mailDest="$2"
      shift 2
    elif [[ "$1" = "-x10lib" && $# -ge 2 ]]; then
      x10lib="$2"
      shift 2
    elif [[ "$1" = "-verbose" || "$1" = "-v" || "$1" = "--verbose" ]]; then
      verbose="yes"
      shift
    elif [[ "$1" = "-nolink" ]]; then
      nolink="yes"
      shift
    elif [[ "$1" = -* ]]; then
      echo >&3 "unrecognized flag $1, or missing argument"
      usage
    else
      echo >&3 "extraneous argument $1"
      usage
    fi
  done
  if [[ ! -e .ThisIsAnX10TestDirectory && -z "$force" ]] ; then
    echo >&3 "You must be in an X10 test directory to run this script"
    echo >&3 "The file .ThisIsAnX10TestDirectory must be present"
    usage
  fi

  #findpat=""
  #for p in "${pat[@]}"; do
  #  findpat="$findpat -o -path '$p'"
  #done
  #[ -n "$findpat" ] && findpat="\( ${findpat## -o } \)"
  findpat="`printf "%q " "${pat[@]}" | sed 's/\\\\\([\*\?]\)/\1/g'`"
}

cleanClasses() {
# clean the .java .class and .pem leftover files
chkArgs 0 "$@"

  find . \( -name '*.java' -o -name '*.class' -o -name '*.pem' -o -name '*_x10stub.c' -o -name 'javacore*' -o -name 'heapdump*' -o -name '*.stackdump' -o -name 'log*' -o -name 'TMP_*' \) -print0 | xargs -r0 rm -f
  find . -name 'jgfutil' -empty -print0 | xargs -r0 rmdir

}

clean() {
# remove leftover files from previous runs

  chkArgs 0 "$@"
  cleanClasses
  rm -f logDetail.*             # details for each test
  #in case no one else has done this make .so files executable
  find . \( -name '*.so' -o -name '*.dll' \) -print0 | xargs -r0 chmod ugo+rx
}

testForMain() {
# test if there is a main method in file f
# and filename is of the form *.x10

    chkArgs 2 "$@"
    local f="$1"
    local tail="$2"
    if [[ "$tail" != *.x10 ]] ; then return 1; fi
    if [[ "$(uname -s)" == Sun* ]]; then
        egrep 'public[[:space:]]+static[[:space:]]+def[[:space:]]+main\b' "$f" >/dev/null
    else
        egrep -E 'public[[:space:]]+static[[:space:]]+def[[:space:]]+main\b' "$f" >/dev/null
    fi
    return $?
}

extractPackage() {
# extract the package path from a *.x10 file f

    chkArgs 1 "$@"
    local f="$1"
    RESULT="`sed -ne 's|\.|/|g' -e 's|^\s*package \([^;]*\);|\1|p' "$f"`"
}

extractDepends() {
# extract additional source files from a *.x10 file f

		chkArgs 1 "$@"
		local f="$1"
		RESULT="`sed -ne 's|^\s*//\s*\@\s*dependsOn\s*\(.*\)|\1|p' "$f"`"
}

extractExtends() {
# check whether class extends x10Test or not
		chkArgs 1 "$@"
		local f="$1"

		RESULT="`sed -ne 's|^.*extends\s*\(.*\)\s*[{]|\1|p' "$f" | sed -n '1,1p'`"
}

extractOptions() {
# extract additional options from a *.x10 file f

    chkArgs 1 "$@"
    local f="$1"
    RESULT="`sed -ne 's|^\s*//\s*OPTIONS*\:\s*\(.*\)|\1|p' "$f" | sed -e 's|\r||'`"
}

extractClassPath() {
# extract additional classpath from a *.x10 file f

    chkArgs 1 "$@"
    local f="$1"
    RESULT="`sed -ne 's|^\s*//\s*CLASSPATH*\:\s*\(.*\)|\1|p' "$f"`"
}

extractSourcePath() {
# extract additional sourcepath from a *.x10 file f

    chkArgs 1 "$@"
    local f="$1"
    RESULT="`sed -ne 's|^\s*//\s*SOURCEPATH*\:\s*\(.*\)|\1|p' "$f"`"
}

removeDotSlash() {
# convert ./a/b/./c to a/b/c

  chkArgs 1 "$@"
  local str=$1
  #str=${str//\.\//}
  str=`echo "$str" | sed -e 's/\.\///g'`

  RESULT=$str
}

testForEligibility() {
	# TODO: switch to using find commands for globbing and
	# test for 'extends \(\i\+\.\)*x10Test' instead.
# Checks if the file is an .x10 file and if it is really a test
# True(0) if file $f contains "public static void main" and
# the file name matches one of the patterns in -test or -testList
    chkArgs 2 "$@"
    local f="$1"
    local tail="$2"
    [[ "$tail" = *.x10 ]] || return 1
    testForMain "$f" "$tail"
}

findTests() {
# Finds all the files in everything that matches $findpat
    chkArgs 1 "$@"
    local topDir="$1"
    local dirlist=""
    #eval "find '$topDir' -type f -name '*.x10' $findpat -print"
    #eval "find $findpat -type d -name CVS -prune -o -type f -name '*.x10' -print"
    dirlist="$(eval "find $topDir -type d -name '.svn' -prune -o -type d -name '*' -print | sort")"
    dirlist="$(echo $dirlist | tr '\n' ' ')"
    #eval "find $findpat -type d -name '.svn' -prune -o -type f '(' -name '*.x10' -o -name '*.fwd' ')' -print | sort"
    eval "find $dirlist -maxdepth 1 -type f -name '*.x10' -print"
}

checkLink() {
    chkArgs 2 "$@"
    local f="$1"
    local tail="$2"
    [[ "$tail" = *.fwd ]] || return 1
    local line=""
    read line < "$f"
    local fname="${line##!->}"
    [ "$line" != "$fname" ] || return 1
    RESULT="$fname"
    return 0
}

genTest() {
# Top level call will be: genTest "."

# executed at the top level test directory

# This function finds all tests that match the pattern, and then
# executes them in the order they were returned by "find".  If the
# test contains a package declaration, the path to the package is
# checked to make sure the directory structure matches the package,
# and the x10 classpath is set to the package root directory.
# Otherwise, the classpath for the test is set to the directory
# containing the test.
#
# A test is a *.x10 file that contains a "public static void main()"
# method.

  chkArgs 1 "$@"
  local topDir="$1"  #top directory

  local tail=""
  #echo "Patterns: $findpat"
  while read f; do
    #echo 2>&1 "Checking file: $f"
    file="${f##*/}"    # if f is a/b/c file will be c
    path="${f%/$file}" # if f is a/b/c path will be a/b
    if [ -z "$nolink" ] && checkLink "$f" "$file"; then
      echo 2>&1 "Forwarding pointer to '$RESULT' found"
    elif testForEligibility "$f" "$file"; then
      # an actual .x10 file containing a main method
      # and also matches one of the specified filename patterns
      extractPackage "$f"
      pkg="$RESULT"
      path="${path%/$pkg}"
      [ -n "$pkg" ] || pkg='.'
      extractOptions "$f"
      options="$RESULT"
      extractClassPath "$f"
      classpath="$RESULT"
      extractSourcePath "$f"
      sourcepath="$RESULT"
      extractDepends "$f"
      depends="$RESULT"
      extractExtends "$f"
      extends="$RESULT"
      # run an actual x10 test case
			__cat_test_start_time=$(perl -e 'print time;')
      doTest "$pkg" "$path" "${file%.x10}" "$options" "$classpath" "$sourcepath" "$depends" "$extends"
      #echo 2>&1 "Done with $path/$pkg/$file"
    fi
  done < <(findTests "$topDir")
  return 0
}

correctExitCode() {
# Does additional checks on the output of a command and
# makes the exit code nonzero if necessary.
# $rc is the original exit code.
# If the original exit code $rc is already nonzero, or if
# $mustFindPat is null, return the original exit code $rc.
# Otherwise, check that the result of the command
# contains $mustFindPat and does not contain $mustNotFindPat.
# If not, return a nonzero exit code, otherwise return
# the original exit code (0).

chkArgs 4 "$@"
local mustFindPat="$1"
local mustNotFindPat="$2"
local rc="$3"
local tmpFile="$4"

# if rc is already nonzero or no pattern match is required
# return the existing exit code
if [[ -z "$mustFindPat" || "$rc" -ne 0 ]]; then return "$rc"; fi

egrep "$mustFindPat" $tmpFile >/dev/null
local mustFindRc=$?

egrep "$mustNotFindPat" $tmpFile >/dev/null
local mustNotFindRc=$?

if [[ "$mustFindRc" -eq 0 && "$mustNotFindRc" -ne 0 ]]; then
    return $rc # matched patterns in output, OK
fi

return 42 # zero exit code was misleading, force nonzero exit code

}

makeTempFile() {
#create a temporary file name

  chkArgs 1 "$@"
  local fn="$1"
  let "tmpFileNum = (( $tmpFileNum + 1 ))"
  RESULT="TMP_${fn}_${tmpFileNum}"
}

runWithTimeLimit() {
# Run the command $cmd with a wall clock time limit.
# Return the (possibly corrected) exit code of $cmd.
# A main process group running $cmd,
# and a "deadman timer" process group that waits maxsec seconds and
# then kills the main process group, are created.
# If the main process group ends before the timer process
# group, the timer process group is killed.
# The output of $cmd is saved in the logDetail.$tdir.$className
# file.

  chkArgs 5 "$@"
  local tdir="$1" # the current directory
  local className="$2" # the class name
  local cmd="$3"       # the command
  local mustFindPat="$4"       # required pattern in output
  local mustNotFindPat="$5"    # output should not have this pattern
  local maxsec="$timeLimit"
  makeTempFile "XXX"
  local tmpFile="$RESULT"
  echo "" > $tmpFile
  # create a new process group so that the main job
  # and all of the its descendant processes can be terminated
  # as a whole
  "$MYDIR"/xnewpgrp "$cmd" >> $tmpFile 2>&1 &    #main job
  local pidMain=$!   #remember pid of main job
  "$MYDIR"/xnewpgrp "sleep $maxsec; kill -9 -$pidMain" >/dev/null 2>&1 & #timer job
  local pidTimer=$!  #remember pid of timer job
  wait $pidMain      # wait until main job finishes,
                     # either normally or through the timer
  local rcMain=$?    # exit code of main job
  local temp
  if [[ $rcMain -ge 128 ]]; then
    let  "temp = $rcMain - 128"
    echo "++++++ Got killed by signal $temp"      >> logDetail.$tdir.$className
    echo "++++++ Time limit was $maxsec seconds"  >> logDetail.$tdir.$className
  fi
  kill -9 -$pidTimer >/dev/null 2>&1 #kill the timer job
  wait $pidTimer      #wait for the timer job
  correctExitCode "$mustFindPat" "$mustNotFindPat" "$rcMain" "$tmpFile"
  local rcMain2=$?
  cat $tmpFile | uniq -c | /usr/bin/perl -e 'while(<>){chomp;if (/^\s*(\d+)\s(.*)$/) { ($n,$s) = ($1,$2); } if($n>3){print "$s\n...[",($n-2)," identical lines]\n$s\n"}else{print "$s\n" x $n}}' >> logDetail.$tdir.$className
  rm -f $tmpFile
  return  $rcMain2    #return (possibly corrected) exit code of main job

}

msgBoth() {
# write a message to the indicated log file and screen

  chkArgs 2 "$@"
  local str="$2"
  local file="$1"

  echo "$str" >> $file
  echo "$str"
}

msg() {
# write a message to the indicated log file

  chkArgs 2 "$@"
  local str="$2"
  local file="$1"

  echo "$str" >> $file
}

reverseFile() {
# reverse the file $fn line by line (last line should occur first).
# Written in a portable way (no tac command).

chkArgs 1 "$@"
local fn="$1"
makeTempFile "myTemp"
local myTemp="$RESULT"
cat -n "$fn" | sort -nr | cut -f2- > $myTemp
mv "$myTemp" "$fn"
}

findSinceWhenMsgKeptOccurring() {
# Find the earliest date, since when the same message "$str" kept occurring
# continuously in the test logs.
# If this message did not occur in the last run, or if no test
# logs can be found, return the starting date of this script.

# Slow algorithm,
# but fine for nightly test runs
#
# TODO: rewrite me to use the (chronologically) last file NOT matching the line
# (using egrep -L)

  chkArgs 3 "$@"
  local str="$1"
  local altstr="$2"
  local test="$3"
  makeTempFile "allTestLogDates"
  local allTestLogDates="$RESULT"
  makeTempFile "buggyTestLogDates"
  local buggyTestLogDates="$RESULT"

  if [[ -d "$testLogs" ]]; then
    #ensure that there is an imaginary first test log
    #where this message did not appear
    echo "2000.01.01_00.00.00" > "$allTestLogDates"

    # FIXME: use egrep -l instead here
    find "$testLogs" -mindepth 1 -maxdepth 1 -name "logSummary.*" -print | \
      sort -r | \
      xargs -r egrep -H "$str" | \
      sed -e 's/^.*logSummary\.//;s/:.*$//' > "$buggyTestLogDates"
    find "$testLogs" -mindepth 1 -maxdepth 1 -name "logSummary.*" -print | \
      sort -r | \
      sed -e 's/^.*logSummary\.//' >> "$allTestLogDates"
#    reverseFile "$allTestLogDates"
#    reverseFile "$buggyTestLogDates"

    local n=`diff "$allTestLogDates" "$buggyTestLogDates" | sed -n -e 's/^\([0-9]\+\).*$/\1/p' | head -n 1`
    if [[ -n "$n" && "$n" -gt 1 ]]; then
       let "n = (( $n - 1 ))"
       RESULT=`sed -n -e "${n},${n}p" "$allTestLogDates"`
    else
       RESULT="$startDate"
       if [[ -n "$altstr" ]]; then
	 local old_logSummary=`find "$testLogs" -mindepth 1 -maxdepth 1 -name "logSummary.*" | sort -r | head -n 1`
         if grep "$altstr" $old_logSummary > /dev/null ; then
             NewFailures="$NewFailures $test";
         fi
       fi
    fi
  else
    RESULT="$startDate"
  fi

  rm -f "$allTestLogDates"
  rm -f "$buggyTestLogDates"
  return
}

writeLogLine() {
# write str to the logSummary0 file,
# followed by the earliest date since when str appeared
# continuously in the logs

  chkArgs 3 "$@"
  local str="$1"
  local altstr="$2"
  local test="$3"
  findSinceWhenMsgKeptOccurring "$str" "$altstr" "$test"
  local firstDate="$RESULT"
	__cat_test_result_explanation="$str"
  echo "$str"
  msg logSummary0 "$str	$firstDate"
}

determineExpectedResult() {
# determine the expected result of the test from the name

  chkArgs 1 "$@"
  local className="$1"
  if [[ "$className" = *MustFailCompile* ]]; then
	RESULT="FailCompile"
  elif [[ "$className" = *MustFailTimeout* ]]; then
	RESULT="FailTimeout"
  elif [[ "$className" = *MustFail* ]]; then
	RESULT="Fail"
  else
	RESULT="Success"
  fi
  return
}

compareExpectedToActualResult() {
#returns true(0) iff expected result is equal to the actual
#result, or the expected result is Fail and the actual
#result is one of FailRun or FailCompile or FailTimeout

  chkArgs 2 "$@"
  local expectedResult="$1"
  local actualResult="$2"
  if [[ "$expectedResult" = "$actualResult" ||
        "$expectedResult" = "Fail" &&
	"$actualResult" = Fail* ]]; then
	return 0
  else
	return 1
  fi
}

checkLimitation() {
# check if this test case is marked as a limitation of the
# current implementation

  chkArgs 1 "$@"
  local x10FileName="$1"
  makeTempFile "tmpFile"
  local tmpFile="$RESULT"
  local limitation=""
  egrep "^\/\/LIMITATION\:" "$x10FileName" > $tmpFile
  if [[ $? -eq 0 ]]; then
    limitation="LIMITATION: "
  fi
  rm -f "$tmpFile"
  RESULT="$limitation"
}

recordTestResult() {
# check if actual test result matched expected result
# and print in logSummary

  chkArgs 4 "$@"
  local actualResult="$1"
  local tdir="$2"
  local className="$3"
  local x10FileName="$4"
  determineExpectedResult "$className"
  local expectedResult="$RESULT"
  if compareExpectedToActualResult "$expectedResult" "$actualResult"; then
    if [[ -n "$limitation" ]]; then
      let "nPassLim = (( $nPassLim + 1 ))"
    fi
		__cat_test_result="SUCCESS"
    writeLogLine "$limitation$tdir $className met expectation: $actualResult." "" ""
  else
    checkLimitation "$x10FileName"
    local limitation="$RESULT"
    if [[ -n "$limitation" ]]; then
      let "nLimitation = (( $nLimitation + 1 ))"
    fi
		__cat_test_result="FAILURE"
    writeLogLine "$limitation$tdir $className did not meet expectation: expected=$expectedResult actual=$actualResult." "$tdir $className met expectation" "$tdir.$className"
    if [[ -z "$limitation" ]]; then
      let "nFail = (( $nFail + 1 ))"
    fi
  fi
	__cat_test_end_time=$(perl -e 'print time;')
	let '__cat_test_duration = __cat_test_end_time - __cat_test_start_time'
	if [[ "${__cat_current_group}" != ${__cat_opened_group} ]]; then
		if [[ "${__cat_opened_group}" != "invalid" ]]; then
			printf "</group>\n\n" >> $TLOGF
		fi
		printf "<group>\n" >> $TLOGF
		printf "\t<name>${__cat_current_group}</name>\n" >> $TLOGF
		__cat_opened_group="${__cat_current_group}"
	fi
	printf "\n\t<test>\n" >> $TLOGF
	printf "\t\t<name>${__cat_test_name}</name>\n" >> $TLOGF
	printf "\t\t<command>\n" >> $TLOGF
	printf "## compilation:\n" >> $TLOGF
	echo "${__cat_test_x10c_command}" | sed -e 's/</\&lt;/g' \
		-e 's/>/\&gt;/g' \
		-e 's/&&/\&amp;\&amp;/g' \
		-e 's/ & / \&amp; /g' >> $TLOGF
	printf "\n\n" >> $TLOGF
	printf "## execution:\n" >> $TLOGF
	echo "${__cat_test_x10_command}" | sed -e 's/</\&lt;/g' \
		-e 's/>/\&gt;/g' \
		-e 's/&&/\&amp;\&amp;/g' \
		-e 's/ & / \&amp; /g' >> $TLOGF
	printf "\n\n" >> $TLOGF
	printf "\t\t</command>\n" >> $TLOGF
	printf "\t\t<parameters>\n" >> $TLOGF
	printf "\t\t\t<parameter key=\"x10c.sourcepath\" value=\"${__cat_test_x10c_sourcepath}\"/>\n" >> $TLOGF
	printf "\t\t\t<parameter key=\"x10c.classpath\" value=\"${__cat_test_x10c_classpath}\"/>\n" >> $TLOGF
	printf "\t\t\t<parameter key=\"x10c.directory\" value=\"${__cat_test_x10c_directory}\"/>\n" >> $TLOGF
	printf "\t\t\t<parameter key=\"x10.classpath\" value=\"${__cat_test_x10_classpath}\"/>\n" >> $TLOGF
	printf "\t\t\t<parameter key=\"x10.timeout\" value=\"${__cat_test_x10_timeout}\"/>\n" >> $TLOGF
	printf "\t\t</parameters>\n" >> $TLOGF
	printf "\t\t<test-execution>\n" >> $TLOGF
	printf "\t\t\t<name>default</name>\n" >> $TLOGF
	printf "\t\t\t<exit-code>${__cat_test_exit_code}</exit-code>\n" >> $TLOGF
	printf "\t\t\t<duration>${__cat_test_duration}</duration>\n" >> $TLOGF
	printf "\t\t\t<result>${__cat_test_result}</result>\n" >> $TLOGF
	printf "\t\t\t<result-explanation>${__cat_test_result_explanation}</result-explanation>\n" >> $TLOGF
	printf "\t\t\t<statistics/>\n" >> $TLOGF
	printf "\t\t\t<output>\n" >> $TLOGF
	sed -e 's/</\&lt;/g' \
		-e 's/>/\&gt;/g' \
		-e 's/&&/\&amp;\&amp;/g' \
		-e 's/ & / \&amp; /g' \
		-e '/Unexpected character ignored:/d' \
		logDetail.$tdir.$className >> $TLOGF
	#cat logDetail.$tdir.$className >> $TLOGF
	printf "\t\t\t</output>\n" >> $TLOGF
	printf "\t\t</test-execution>\n" >> $TLOGF
	printf "\t</test>\n" >> $TLOGF
  if [ -n "$verbose" ]; then
    cat logDetail.$tdir.$className
  fi
}

changeSlashToDot() {
# convert a/b/c to a.b.c, but ./foo becomes foo

  chkArgs 1 "$@"
  local str=$1
  str=${str#\.\/}
  #str=${str//\//\.}
  str=`echo "$str" | sed -e 's/\//\./g'`
  RESULT="$str"
}

doTest() {
	# TODO: run test via TestHarness instead.
# run the x10 test case $tstDir/$srcDir/test.x10

  chkArgs 7 "$@"
  local srcDir="$1"
  local testDir="$2"
  local test="$3"
  local options="$4"
  local classpath="$5"
  local extra_sourcepath="$6"
  local depends="$7"
  local extends="$8"
  local x10FileName="$testDir/$srcDir/$test.x10" #./Misc/./a/b/c.x10
	local dependList=""
	if [[ -n "$extends" && "$extends" != *x10Test* ]]
	then
		local extendList=`echo "$testDir/$srcDir/$extends.x10" | tr -d ' \r'`
	else
		local extendList=""
	fi
	for file in $depends
	do
		local dependComp=`echo "$testDir/$srcDir/$file" | tr -d ' \r'`
		dependList="$dependList $dependComp"
	done
  changeSlashToDot "$srcDir/$test"
  local className="$RESULT"             #a.b.c
	__cat_test_name="$className"
  changeSlashToDot "$testDir"
  local tdir="$RESULT"
	__cat_current_group="$tdir"

  [ -n "$classpath" ] && classpath="-classpath \"$classpath\""
  [ -n "$extra_sourcepath" ] && extra_sourcepath="-sourcepath \"$extra_sourcepath\""

  echo ""                         >  logDetail.$tdir.$className
  echo "****** $tdir $className ******" >> logDetail.$tdir.$className
  echo ""                         >> logDetail.$tdir.$className

  let "nTotal = (( $nTotal + 1 ))"

	extraClassPath=$testDir
	EXTRA_CLASSPATH=$EXTRA_CLASSPATH
	if [ -n "${EXTRA_CLASSPATH}" ]
	then
		extraClassPath="${extraClassPath}:${EXTRA_CLASSPATH}"
	fi
	__cat_test_x10c_sourcepath="$x10lib:$testDir"
	__cat_test_x10c_classpath="$extraClassPath"
	__cat_test_x10c_directory="$testDir"
  __cat_test_x10c_command="$(echo runWithTimeLimit "$tdir" "$className" "\"$X10DIST\"/bin/x10c -t -v -CHECK_INVARIANTS=true -sourcepath $x10lib -sourcepath $testDir -sourcepath \"$X10_DIST\"/samples -sourcepath \"$X10_DIST\"/samples/tutorial -sourcepath \"$X10_DIST\"/samples/work-stealing -sourcepath \"$X10_DIST\"/samples/CUDA -classpath \"$extraClassPath\" $classpath $extra_sourcepath -d $testDir $X10C_EXTRA_OPTS $options $x10FileName $dependList $extendList ./x10lib/harness/x10Test.x10" "" "")"
  runWithTimeLimit "$tdir" "$className" "\"$X10DIST\"/bin/x10c -t -v -CHECK_INVARIANTS=true -sourcepath $x10lib -sourcepath $testDir -sourcepath \"$X10DIST\"/samples -sourcepath \"$X10DIST\"/samples/tutorial -sourcepath \"$X10DIST\"/samples/work-stealing -sourcepath \"$X10DIST\"/samples/CUDA -classpath \"$extraClassPath\" $classpath $extra_sourcepath -d $testDir $X10C_EXTRA_OPTS $options $x10FileName $dependList $extendList ./x10lib/harness/x10Test.x10" "" ""
	local runRC=$?
  if [[ $runRC != 0 ]]; then
    echo ""                                        >> logDetail.$tdir.$className
    echo "****** $tdir $className failed: compile" >> logDetail.$tdir.$className
    __cat_test_exit_code=$runRC
    grep "Exception in thread" logDetail.$tdir.$className >/dev/null 2>&1
    if [[ $? == 0 ]]; then
        recordTestResult "FailCompileWithException" "$tdir" "$className" "$x10FileName"
    else
        recordTestResult "FailCompile" "$tdir" "$className" "$x10FileName"
    fi
    return
  else
    echo "++++++ Compilation succeeded." >> logDetail.$tdir.$className
  fi

  # the output must contain 'Test succeeded'
  # the output must not contain a java stack traceback
  let "x10test_timeout = (( $timeLimit + 30 ))"
	__cat_test_x10_classpath="$extraClassPath"
	__cat_test_x10_timeout="$x10test_timeout"
  __cat_test_x10_command="$(echo runWithTimeLimit "$tdir" "$className" "X10_NPLACES=4 X10_HOSTLIST=localhost \"$X10DIST\"/bin/x10 -t -v -J-ea -mx 256M -classpath \"$extraClassPath\" $classpath -Dx10test.timeout=$x10test_timeout $X10_EXTRA_OPTS $className" "Test succeeded" "AssertionError|	at .+\(.+\)")"
  runWithTimeLimit "$tdir" "$className" "X10_NPLACES=4 X10_HOSTLIST=localhost \"$X10DIST\"/bin/x10 -t -v -J-ea -mx 256M -classpath \"$extraClassPath\" $classpath -Dx10test.timeout=$x10test_timeout $X10_EXTRA_OPTS $className" "Test succeeded" "AssertionError|	at .+\(.+\)"
  local runRc=$?

  echo ""                                    >> logDetail.$tdir.$className
	__cat_test_exit_code=$runRc
  if [[ $runRc -ge 128 ]]; then
    echo "****** $tdir $className failed: timeout" >> logDetail.$tdir.$className
    recordTestResult "FailTimeout" "$tdir" "$className" "$x10FileName"
  elif [[ $runRc -ne 0 ]]; then
    echo "****** $tdir $className failed: run" >> logDetail.$tdir.$className
    recordTestResult "FailRun" "$tdir" "$className" "$x10FileName"
  else
    echo "****** $tdir $className succeeded." >> logDetail.$tdir.$className
    recordTestResult "Success" "$tdir" "$className" "$x10FileName"
  fi

  return
}

initAll() {
# initialize variables, intermediate files

  chkArgs 0 "$@"
  let "nTotal = 0" #total tests
  let "nFail  = 0" #tests that did not meet expectations
  let "nLimitation = 0" #tests that failed but were limitations
  let "nPassLim = 0" #tests that passed but were limitations
  rm -f logSummary0              # summary for each each test
  touch logSummary0              # ensure file exists
  rm -f logBegin                # Header file
  startDate=`date '+%Y.%m.%d_%H.%M.%S'`
  testLogs="../../x10.web/html/testLogs"
  if [[ -d "$testLogs" ]]; then
    (cd $testLogs; svn update -q)
  else
    echo "Warning: directory $testLogs was not found"
  fi
}

generateFinalLog() {
#generate the final log file
  chkArgs 4 "$@"
  local nTotal="$1"
  local nFail="$2"
  local nLimitation="$3"
  local nPassLim="$4"
  local nRealTotal
  local nPass
  makeTempFile "logTemp2"
  local logTemp2="$RESULT"
  makeTempFile "logDetail2"
  local logDetail2="$RESULT"
  cat logBegin > log
  rm -f logBegin
  let "nRealTotal = (( $nTotal - $nLimitation - $nPassLim ))"
  let "nPass = (( $nRealTotal - $nFail ))"
  makeReadableDate "$startDate"
  local date2="$RESULT"
  echo "X10 tests started on $date2" >> log
  echo "$nPass tests out of $nRealTotal met expectations. $nFail did not meet expectations." >> log
  echo "$nLimitation implementation limitations did not meet expectations.  $nPassLim unexpectedly met expectations." >> log
  echo "" >> log
  echo "The dates after each error message below show the earliest test run since which the same error message kept occurring continuously." >> log
  echo "" >> log
  if [[ $nRealTotal -eq 0 ]] ; then
    msgBoth log "Warning: No applicable test was found"
  fi
  makeTempFile "logTemp0"
  local logTemp0="$RESULT"
  sort -t "	" -r -k 1,1 logSummary0 |  \
   sed -e 's/\.	\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)_\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)/ (\1-\2-\3 \4:\5:\6)./' > $logTemp0
  cut -f1 logSummary0 > logSummary
  rm -f logSummary0
  # report only the failing tests
  grep " did not meet" $logTemp0 > $logTemp2
  echo "" > $logDetail2
  makeTempFile "logTemp3"
  local logTemp3="$RESULT"
  cat $logTemp2 | sed '-e s/^LIMITATION: //' > $logTemp3
  for f in `awk '{print $1 "." $2;}' $logTemp3` ; do
    cat logDetail.$f >> $logDetail2
  done
  cat $logTemp2 $logDetail2 >> log
  rm -f $logTemp0 $logTemp2 $logDetail2 $logTemp3

  #rm -f logDetail.*
}

makeReadableDate() {
# change yyyy.mm.dd_hh.mm.ss to mm/dd/yyyy hh:mm:ss

  chkArgs 1 "$@"
  local arg="$1"
  local date=${arg%_*}
  local time=${arg##*_}
  local yyyy=${date%%.*}
  local mmdd=${date#*.}
  date="$yyyy.$mmdd"
  #date=${date//./\-}
  date=`echo "$date" | sed -e 's/\./\-/g' `
  #time=${time//./\:}
  time=`echo "$time" | sed -e 's/\./\:/g' `
  RESULT="$date $time"
}

mailDiffFromLastRun() {
# mail differences from last run

  chkArgs 1 "$@"
  local mailDest="$1"
  makeTempFile "logDiff"
  local logDiff="$RESULT"

  local old_logSummary=`find "$testLogs" -mindepth 1 -maxdepth 1 -name "logSummary.*" | sort -r | head -n 1`
  if [[ -n "$old_logSummary" ]]; then

    local oldStartDate=${old_logSummary#*logSummary.}
    makeReadableDate "$oldStartDate"
    local date1="$RESULT"
    makeReadableDate "$startDate"
    local date2="$RESULT"

    touch $logDiff
    local newFailStr=""

    if [[ -n "$NewFailures" ]]; then
        echo "+++ The following existing test case(s) stopped working, between $date1 ET and $date2 ET:" >> $logDiff
        echo "" >> $logDiff
	for f in $NewFailures ; do
		echo "    $f" >> $logDiff
	done
        echo "" >> $logDiff
	newFailStr="Test case(s) stopped working! "
    fi

    echo "+++ Differences between test run results of $date1 ET and $date2 ET:" >> $logDiff
    echo "" >> $logDiff
    NoDifferences=""
    diff -w "$old_logSummary" logSummary  >> $logDiff
    if [[ $? -eq 0 ]] ; then
      echo "There were no differences." >> $logDiff
      NoDifferences="true"
    fi

    echo "" >> $logDiff
    echo "" >> $logDiff
    echo "+++ Svn changes between $date1 ET and $date2 ET (times below are in UTC):" >> $logDiff
    echo "" >> $logDiff
		( (cd ../..; svn log -q -r "{${date1}}:{${date2}}" ) 2>&1 |awk '{print}; END {if(NR==0) print "No changes."}' ) >> $logDiff
    if [[ "$(uname -s)" == Sun* ]]; then
    mailx -s "X10: ${newFailStr}Differences between test runs started on $date1 vs. $date2" "$mailDest" < $logDiff
    else
    mail -s "X10: ${newFailStr}Differences between test runs started on $date1 vs. $date2" "$mailDest" < $logDiff
    fi
    mv $logDiff logDiff
  fi
}

mailIt() {
# mail test results if there is a destination address
  chkArgs 5 "$@"
  local mailDest="$1"
  local nTotal="$2"
  local nFail="$3"
  local nLimitation="$4"
  local nPassLim="$5"
  local nRealTotal
  local nPass
  let "nRealTotal = (( $nTotal - $nLimitation - $nPassLim ))"
  let "nPass = (( $nRealTotal - $nFail ))"
  if [[ -n "$mailDest" ]]; then
    makeReadableDate "$startDate"
    local date2="$RESULT"
    if [[ "$(uname -s)" == Sun* ]]; then
    cat log | mailx -s "X10 (started $date2): $nPass tests out of $nRealTotal met expectations. $nFail did not meet expectations." "$mailDest"
    else
    cat log | mail -s "X10 (started $date2): $nPass tests out of $nRealTotal met expectations. $nFail did not meet expectations." "$mailDest"
    fi
    mailDiffFromLastRun "$mailDest"
  fi
}

generateAndMailFinalLog() {
# generate the final log file and email it to recipient

  chkArgs 0 "$@"
  generateFinalLog "$nTotal" "$nFail" "$nLimitation" "$nPassLim"
  mailIt "$mailDest" "$nTotal" "$nFail" "$nLimitation" "$nPassLim"
}

saveLog() {
# save the log.
# do not save if the testLogs directory is not found,
# or if there were broken existing test cases (wait until they
# are fixed).

  chkArgs 0 "$@"
  if [[ ! -d "$testLogs" ]]; then
    msgBoth log "Warning: directory $testLogs was not found"
#  elif [[ -n "$shiftLog" && -z "$NewFailures" ]]; then
  elif [[ -n "$shiftLog" && -z "$NoDifferences" ]]; then
    mv logSummary "$testLogs/logSummary.$startDate"
    mv log "$testLogs/log.$startDate"
    local lastDir=`pwd`
    cd $testLogs
      svn add log*.$startDate
      makeReadableDate "$startDate"
      local date2="$RESULT"
      svn commit -m "Test run started on $date2" log*.$startDate
    cd $lastDir
  fi
}

finalCleanUp() {
# remove intermediate files

  chkArgs 0 "$@"
# cleanClasses
  saveLog
}

printInfo() {
# print information about system

  msgBoth logBegin "Starting: $0 $*"
  msgBoth logBegin "Machine name: `hostname`"
  msgBoth logBegin "Operating system: `uname`"
  JAVA=java
  if [ -n "$JAVA_HOME" ]; then
    msgBoth logBegin "Java home: $JAVA_HOME"
    JAVA="$JAVA_HOME/bin/java"
  fi
  msgBoth logBegin "Java version: `"$JAVA" -version 2>&1 | sed '2,$s/^/  /'`"
  msgBoth logBegin "Current directory: $PWD"
  msgBoth logBegin "System load: `uptime`"
  msgBoth logBegin ""
}



main() {
  checkUsage "$@" # check arguments and current directory
  [ -n "$clean" ] && clean    # clean any leftover files
  [ -n "$cleanOnly" ] && exit 0
  initAll
  printInfo "$@"
  genTest "." # run all tests in current directory and subdirectories
  generateAndMailFinalLog
  finalCleanUp
  if [[ "${__cat_opened_group}" != "invalid" ]]; then
	printf "</group>\n" >> $TLOGF
  fi
  exit 0
}

__cat_opened_group="invalid"
__cat_current_group=""
__cat_test_name=""
__cat_test_x10c_command=""
__cat_test_x10_command=""
__cat_test_parameters=""
__cat_test_exit_code=""
__cat_test_start_time=""
__cat_test_end_time=""
__cat_test_duration=""
__cat_test_result=""
__cat_test_result_explanation=""
__cat_test_output=""
__cat_test_x10c_sourcepath=""
__cat_test_x10c_classpath=""
__cat_test_x10c_directory=""
__cat_test_x10_classpath=""
__cat_test_x10_timeout=""

main "$@"
exit 0

# vim:tabstop=4:shiftwidth=4:expandtab
