vj Jan 25, 2010

Cleaned out several classes. 

Using factory methods on X10TypeMixin for most operations on types. These should be moved 
to X10TypeEnv since they will need information from the environment (e.g. type constraints)
when processing type parameters.

Need to implement consistency of type constraints. E.g. X <: C, X <: D are inconsistent
if C and D are two classes neither of which inherit from the other. 

Similarly X <: A, X <: S are inconsistent if S is a struct and A a class.

X <: A, X <: I is inconsistent if A does not implement I and A is final.

Type functionality should be removed from X10TypeSystem_c and placed in x10TypeMixin/X10TypeEnv_c.

vj Aug 25, 2009

Dont understand how TypeConstraint works. Why does entail not use any 
information about the current type, e.g. we should have  <: Y |- X <: Y.

vj Aug 2, 2009

Too much low-level code. Seems like wherever something needed to be done
with constraints, it was done in a one-off fashion. A lot of code can be 
consolidated and simplified.

Poorly organized!

  X10TypeEnv_c
  X10TypeMixin
  X10TypeSystem_c
  X10Context_c

  X10ClassDef  

How is the type of |this| represented?  In the body of a |class C[X1,.., Xn](...){T}| 
(T are the type constraints on X1,..., Xn) it must be the case that the type of |this| is
|C[X1,...,Xn]{T}|. Here the type constraints must be made available.

Ensure type arguments are represented separately.

Need to understand the LazyRef mechanism. When are these to be used? 
How does the on-demand evaluation work?

Why are macros expanded all over the place? Shouldn't one just do a recursive
macro expansion when a type is first encountered, and then forget about
macros?

Dont understand the role of TypeObject.

Where/how is the following inference handled?

   class C[X1,...,+Xi, .. Xn] {Xi <: U} implements I[Xi]
   --------------------------------------------------------
   Gamma |- C[T1,..., Ti, ..., Tn] implements I[U]


If a class C has type parameters X1,..., Xn, why is just C (with no
type parameters) permitted as a type?
  This must stand for C[X1,..., Xn].

X10ClassDef_c, obtained through t.def() (for t a type)


  ParameterType pt = ...
  Types.get(pt.def())

  if (def instanceof X10ClassDef)  ...
  if (def instanceof X10MethodDef) ...
  if (def instanceof ClosureDef) ...
  if (def instanceof TypeDef) ...
  if (def instanceof X10ConstructorDef) ...

Check: xin X10ClassDef_c:

  if (false && result.consistent()) {
				    // Verify that the realclause, as it stands, entails the assertions of the 
				    // property.
				    for (X10FieldDef fi : properties) {
					    Type ftype = fi.asInstance().type();
					    
					    XConstraint c = X10TypeMixin.realX(ftype);
					    XTerm newSelf = xts.xtypeTranslator().trans(c, c.self(), fi.asInstance());
					    c = c.substitute(newSelf, c.self());
					    
					    if (! result.entails(c, ((X10Context) ts.emptyContext()).constraintProjection(result, c))) {
						    this.rootClause = Types.ref(result);
						    this.rootClauseInvalid = 
							    new SemanticException("The real clause, " + result 
							                          + ", does not satisfy constraints from " + fi + ".", position());
					    }
				    }
			    }
=====================

Mon Aug 03 09:09:57 2009

Bug:
This does not typecheck:

public class Y {

    def m():void {
	for ((p) in 0..9);
    }
}

but this does:

public class Y {

    def m():void {
        val r = 0..9;
	for ((p) in r);
    }
}

Giving it a name seems to matter in inferring the type. 

==
Commit notes: 

Fixed several type-checking bugs.

For some reason, for loop type-checking was incompletely implemented. Code has been uncommented so that the loop is properly type-checked. 
This revealed several bugs that have been fixed.

For some reason, type bounds on classes were not making it through.

A distinction is now made between upperBound(t) and upperTypeBound(t). 
The former provides all the upper bounds for the type t which are sources for inheritance of members. 
The latter includes upper bounds on the type t that are inferred  upper bounds through variance annotations. 
These additional upper bounds do not actually supply additional members (methods, fields) -- the fields and methods they 
identify are already implemented by pre-eisting fields/methods on the class -- but need to be upper bounds because the 
type system is nominal. 

Fixed typebounds so that variance is respected. If X <: Y and M takes a type parameter with a + annotation, then M[X] <: M[Y].

Fixed X10TypeEnv_c.isSubType so that it uses upperTypeBound.

Had to substantially change the implementation of isSubType. When checking Gamma |- S <: T, the constraints in S need to be added to Gamma. 
This is necessary because T may be parametrized, and the type parameters may need the constraints for their corresponding type-check to be 
performed.

So now the following typechecks:

class ForBug {
 abstract class A(v: Int) implements Iterable[Int{self==this.v}] {
   def this(x: Int) {
     property(x);
   }
 }
 def f(a: A{self.v == 41}) {
   for (val x: Int{self == 41} in a) ;
 }
}


The following also typechecks:


public class X {
   class Row {}
   abstract class Mat[+T]{T <: Row} implements Iterable[T] {
       { 
	   for (r:Row in this) ;
       }
       incomplete def m(x:T):void;
   }

}


