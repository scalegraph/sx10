/*
 *  This file is part of the X10 project (http://x10-lang.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  (C) Copyright IBM Corporation 2006-2010.
 */
/********************************************************************
 * WARNING!  THIS JAVA FILE IS AUTO-GENERATED FROM x10/parser/x10.g *
 ********************************************************************/

package x10.parser;

public interface X10Parsersym {
    public final static int
      TK_IntegerLiteral = 13,
      TK_LongLiteral = 14,
      TK_FloatingPointLiteral = 15,
      TK_DoubleLiteral = 16,
      TK_CharacterLiteral = 17,
      TK_StringLiteral = 18,
      TK_MINUS_MINUS = 32,
      TK_OR = 78,
      TK_MINUS = 30,
      TK_MINUS_EQUAL = 86,
      TK_NOT = 35,
      TK_NOT_EQUAL = 79,
      TK_REMAINDER = 69,
      TK_REMAINDER_EQUAL = 87,
      TK_AND = 80,
      TK_AND_AND = 85,
      TK_AND_EQUAL = 88,
      TK_LPAREN = 1,
      TK_RPAREN = 7,
      TK_MULTIPLY = 67,
      TK_MULTIPLY_EQUAL = 89,
      TK_COMMA = 11,
      TK_DOT = 34,
      TK_DIVIDE = 70,
      TK_DIVIDE_EQUAL = 90,
      TK_COLON = 46,
      TK_SEMICOLON = 9,
      TK_QUESTION = 100,
      TK_AT = 6,
      TK_LBRACKET = 2,
      TK_RBRACKET = 40,
      TK_XOR = 81,
      TK_XOR_EQUAL = 91,
      TK_LBRACE = 38,
      TK_OR_OR = 92,
      TK_OR_EQUAL = 93,
      TK_RBRACE = 41,
      TK_TWIDDLE = 36,
      TK_PLUS = 31,
      TK_PLUS_PLUS = 33,
      TK_PLUS_EQUAL = 94,
      TK_LESS = 71,
      TK_LEFT_SHIFT = 64,
      TK_LEFT_SHIFT_EQUAL = 95,
      TK_RIGHT_SHIFT = 65,
      TK_RIGHT_SHIFT_EQUAL = 96,
      TK_UNSIGNED_RIGHT_SHIFT = 66,
      TK_UNSIGNED_RIGHT_SHIFT_EQUAL = 97,
      TK_LESS_EQUAL = 72,
      TK_EQUAL = 39,
      TK_EQUAL_EQUAL = 60,
      TK_GREATER = 73,
      TK_GREATER_EQUAL = 74,
      TK_ELLIPSIS = 130,
      TK_RANGE = 75,
      TK_ARROW = 68,
      TK_DARROW = 106,
      TK_SUBTYPE = 47,
      TK_SUPERTYPE = 76,
      TK_abstract = 49,
      TK_as = 101,
      TK_assert = 116,
      TK_async = 107,
      TK_at = 43,
      TK_athome = 44,
      TK_ateach = 108,
      TK_atomic = 48,
      TK_break = 117,
      TK_case = 82,
      TK_catch = 109,
      TK_class = 50,
      TK_clocked = 45,
      TK_continue = 118,
      TK_def = 110,
      TK_default = 83,
      TK_do = 111,
      TK_else = 119,
      TK_extends = 112,
      TK_false = 19,
      TK_final = 51,
      TK_finally = 113,
      TK_finish = 42,
      TK_for = 114,
      TK_goto = 131,
      TK_haszero = 77,
      TK_here = 20,
      TK_if = 120,
      TK_implements = 121,
      TK_import = 84,
      TK_in = 102,
      TK_instanceof = 98,
      TK_interface = 103,
      TK_native = 52,
      TK_new = 10,
      TK_next = 3,
      TK_null = 21,
      TK_offer = 122,
      TK_offers = 123,
      TK_operator = 124,
      TK_package = 115,
      TK_private = 53,
      TK_property = 104,
      TK_protected = 54,
      TK_public = 55,
      TK_resume = 4,
      TK_return = 125,
      TK_self = 22,
      TK_static = 56,
      TK_struct = 62,
      TK_super = 12,
      TK_switch = 126,
      TK_this = 8,
      TK_throw = 127,
      TK_transient = 57,
      TK_true = 23,
      TK_try = 128,
      TK_type = 63,
      TK_val = 58,
      TK_var = 59,
      TK_void = 37,
      TK_when = 129,
      TK_while = 105,
      TK_EOF_TOKEN = 99,
      TK_IDENTIFIER = 5,
      TK_SlComment = 132,
      TK_MlComment = 133,
      TK_DocComment = 134,
      TK_ByteLiteral = 24,
      TK_ShortLiteral = 25,
      TK_UnsignedIntegerLiteral = 26,
      TK_UnsignedLongLiteral = 27,
      TK_UnsignedByteLiteral = 28,
      TK_UnsignedShortLiteral = 29,
      TK_PseudoDoubleLiteral = 135,
      TK_ErrorId = 61,
      TK_ERROR_TOKEN = 136;

    public final static String orderedTerminalSymbols[] = {
                 "",
                 "LPAREN",
                 "LBRACKET",
                 "next",
                 "resume",
                 "IDENTIFIER",
                 "AT",
                 "RPAREN",
                 "this",
                 "SEMICOLON",
                 "new",
                 "COMMA",
                 "super",
                 "IntegerLiteral",
                 "LongLiteral",
                 "FloatingPointLiteral",
                 "DoubleLiteral",
                 "CharacterLiteral",
                 "StringLiteral",
                 "false",
                 "here",
                 "null",
                 "self",
                 "true",
                 "ByteLiteral",
                 "ShortLiteral",
                 "UnsignedIntegerLiteral",
                 "UnsignedLongLiteral",
                 "UnsignedByteLiteral",
                 "UnsignedShortLiteral",
                 "MINUS",
                 "PLUS",
                 "MINUS_MINUS",
                 "PLUS_PLUS",
                 "DOT",
                 "NOT",
                 "TWIDDLE",
                 "void",
                 "LBRACE",
                 "EQUAL",
                 "RBRACKET",
                 "RBRACE",
                 "finish",
                 "at",
                 "athome",
                 "clocked",
                 "COLON",
                 "SUBTYPE",
                 "atomic",
                 "abstract",
                 "class",
                 "final",
                 "native",
                 "private",
                 "protected",
                 "public",
                 "static",
                 "transient",
                 "val",
                 "var",
                 "EQUAL_EQUAL",
                 "ErrorId",
                 "struct",
                 "type",
                 "LEFT_SHIFT",
                 "RIGHT_SHIFT",
                 "UNSIGNED_RIGHT_SHIFT",
                 "MULTIPLY",
                 "ARROW",
                 "REMAINDER",
                 "DIVIDE",
                 "LESS",
                 "LESS_EQUAL",
                 "GREATER",
                 "GREATER_EQUAL",
                 "RANGE",
                 "SUPERTYPE",
                 "haszero",
                 "OR",
                 "NOT_EQUAL",
                 "AND",
                 "XOR",
                 "case",
                 "default",
                 "import",
                 "AND_AND",
                 "MINUS_EQUAL",
                 "REMAINDER_EQUAL",
                 "AND_EQUAL",
                 "MULTIPLY_EQUAL",
                 "DIVIDE_EQUAL",
                 "XOR_EQUAL",
                 "OR_OR",
                 "OR_EQUAL",
                 "PLUS_EQUAL",
                 "LEFT_SHIFT_EQUAL",
                 "RIGHT_SHIFT_EQUAL",
                 "UNSIGNED_RIGHT_SHIFT_EQUAL",
                 "instanceof",
                 "EOF_TOKEN",
                 "QUESTION",
                 "as",
                 "in",
                 "interface",
                 "property",
                 "while",
                 "DARROW",
                 "async",
                 "ateach",
                 "catch",
                 "def",
                 "do",
                 "extends",
                 "finally",
                 "for",
                 "package",
                 "assert",
                 "break",
                 "continue",
                 "else",
                 "if",
                 "implements",
                 "offer",
                 "offers",
                 "operator",
                 "return",
                 "switch",
                 "throw",
                 "try",
                 "when",
                 "ELLIPSIS",
                 "goto",
                 "SlComment",
                 "MlComment",
                 "DocComment",
                 "PseudoDoubleLiteral",
                 "ERROR_TOKEN"
             };

    public final static int numTokenKinds = orderedTerminalSymbols.length;
    public final static boolean isValidForParser = true;
}
