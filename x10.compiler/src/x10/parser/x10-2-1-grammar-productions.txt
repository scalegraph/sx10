Produced by vj from a run of lpg on the x10.g v 17177, as of 10:30 am Tue Oct 12, 2010
Aliases:

    '--' ::= MINUS_MINUS
    '|' ::= OR
    - ::= MINUS
    -= ::= MINUS_EQUAL
    ! ::= NOT
    != ::= NOT_EQUAL
    '%' ::= REMAINDER
    '%=' ::= REMAINDER_EQUAL
    & ::= AND
    && ::= AND_AND
    &= ::= AND_EQUAL
    ( ::= LPAREN
    ) ::= RPAREN
    * ::= MULTIPLY
    *= ::= MULTIPLY_EQUAL
    , ::= COMMA
    . ::= DOT
    / ::= DIVIDE
    /= ::= DIVIDE_EQUAL
    : ::= COLON
    ; ::= SEMICOLON
    ? ::= QUESTION
    @ ::= AT
    [ ::= LBRACKET
    ] ::= RBRACKET
    ^ ::= XOR
    ^= ::= XOR_EQUAL
    { ::= LBRACE
    || ::= OR_OR
    |= ::= OR_EQUAL
    } ::= RBRACE
    ~ ::= TWIDDLE
    + ::= PLUS
    ++ ::= PLUS_PLUS
    += ::= PLUS_EQUAL
    < ::= LESS
    << ::= LEFT_SHIFT
    <<= ::= LEFT_SHIFT_EQUAL
    >> ::= RIGHT_SHIFT
    >>= ::= RIGHT_SHIFT_EQUAL
    >>> ::= UNSIGNED_RIGHT_SHIFT
    >>>= ::= UNSIGNED_RIGHT_SHIFT_EQUAL
    <= ::= LESS_EQUAL
    = ::= EQUAL
    == ::= EQUAL_EQUAL
    > ::= GREATER
    >= ::= GREATER_EQUAL
    ... ::= ELLIPSIS
    .. ::= RANGE
    '->' ::= ARROW
    => ::= DARROW
    <: ::= SUBTYPE
    :> ::= SUPERTYPE


Start:

    CompilationUnit

Identifier:

    IDENTIFIER

Eof:

    EOF_TOKEN

Error:

    ERROR_TOKEN

Terminals:

    IntegerLiteral
    LongLiteral
    FloatingPointLiteral
    DoubleLiteral
    CharacterLiteral
    StringLiteral
    MINUS_MINUS
    OR
    MINUS
    MINUS_EQUAL
    NOT
    NOT_EQUAL
    REMAINDER
    REMAINDER_EQUAL
    AND
    AND_AND
    AND_EQUAL
    LPAREN
    RPAREN
    MULTIPLY
    MULTIPLY_EQUAL
    COMMA
    DOT
    DIVIDE
    DIVIDE_EQUAL
    COLON
    SEMICOLON
    QUESTION
    AT
    LBRACKET
    RBRACKET
    XOR
    XOR_EQUAL
    LBRACE
    OR_OR
    OR_EQUAL
    RBRACE
    TWIDDLE
    PLUS
    PLUS_PLUS
    PLUS_EQUAL
    LESS
    LEFT_SHIFT
    LEFT_SHIFT_EQUAL
    RIGHT_SHIFT
    RIGHT_SHIFT_EQUAL
    UNSIGNED_RIGHT_SHIFT
    UNSIGNED_RIGHT_SHIFT_EQUAL
    LESS_EQUAL
    EQUAL
    EQUAL_EQUAL
    GREATER
    GREATER_EQUAL
    ELLIPSIS
    RANGE
    ARROW
    DARROW
    SUBTYPE
    SUPERTYPE
    abstract
    as
    assert
    async
    ateach
    break
    case
    catch
    class
    continue
    def
    default
    do
    else
    extends
    false
    final
    finally
    finish
    for
    goto
    if
    implements
    import
    in
    instanceof
    interface
    native
    new
    null
    offers
    operator
    package
    private
    property
    protected
    public
    return
    self
    static
    struct
    super
    switch
    this
    throw
    transient
    true
    try
    var
    when
    while
    EOF_TOKEN
    IDENTIFIER
    SlComment
    MlComment
    DocComment
    UnsignedIntegerLiteral
    UnsignedLongLiteral
    ErrorId
    ERROR_TOKEN


Soft Keywords:

    at
    atomic
    await
    clocked
    here
    next
    offer
    resume
    type
    val


Rules:

0      '$accept' ::= CompilationUnit

1      TypeName ::= TypeName . ErrorId
2      PackageName ::= PackageName . ErrorId
3      ExpressionName ::= AmbiguousName . ErrorId
4      MethodName ::= AmbiguousName . ErrorId
5      PackageOrTypeName ::= PackageOrTypeName . ErrorId
6      AmbiguousName ::= AmbiguousName . ErrorId
7      FieldAccess ::= Primary . ErrorId
8                    | super . ErrorId
9                    | ClassName . super $sup . ErrorId
10     MethodInvocation ::= MethodPrimaryPrefix ( ArgumentListopt )
11                        | MethodSuperPrefix ( ArgumentListopt )
12                        | MethodClassNameSuperPrefix ( ArgumentListopt )
13     MethodPrimaryPrefix ::= Primary . ErrorId $ErrorId
14     MethodSuperPrefix ::= super . ErrorId $ErrorId
15     MethodClassNameSuperPrefix ::= ClassName . super $sup . ErrorId $ErrorId
16     Modifiersopt ::= $Empty
17                    | Modifiersopt Modifier
18     Modifier ::= abstract
19                | Annotation
20                | atomic
21                | final
22                | native
23                | private
24                | protected
25                | public
26                | static
27                | transient
28                | clocked
29     MethodModifiersopt ::= Modifiersopt
30                          | MethodModifiersopt property $property
31                          | MethodModifiersopt Modifier
32     TypeDefDeclaration ::= Modifiersopt type Identifier TypeParametersopt FormalParametersopt WhereClauseopt = Type ;
33     Properties ::= ( PropertyList )
34     PropertyList ::= Property
35                    | PropertyList , Property
36     Property ::= Annotationsopt Identifier ResultType
37     MethodDeclaration ::= MethodModifiersopt def Identifier TypeParametersopt FormalParameters WhereClauseopt HasResultTypeopt Offersopt MethodBody
38                         | MethodModifiersopt operator TypeParametersopt ( FormalParameter $fp1 ) BinOp ( FormalParameter $fp2 ) WhereClauseopt HasResultTypeopt Offersopt MethodBody
39                         | MethodModifiersopt operator TypeParametersopt PrefixOp ( FormalParameter $fp2 ) WhereClauseopt HasResultTypeopt Offersopt MethodBody
40                         | MethodModifiersopt operator TypeParametersopt this BinOp ( FormalParameter $fp2 ) WhereClauseopt HasResultTypeopt Offersopt MethodBody
41                         | MethodModifiersopt operator TypeParametersopt ( FormalParameter $fp1 ) BinOp this WhereClauseopt HasResultTypeopt Offersopt MethodBody
42                         | MethodModifiersopt operator TypeParametersopt PrefixOp this WhereClauseopt HasResultTypeopt Offersopt MethodBody
43                         | MethodModifiersopt operator this TypeParametersopt FormalParameters WhereClauseopt HasResultTypeopt Offersopt MethodBody
44                         | MethodModifiersopt operator this TypeParametersopt FormalParameters = ( FormalParameter $fp2 ) WhereClauseopt HasResultTypeopt Offersopt MethodBody
45                         | MethodModifiersopt operator TypeParametersopt ( FormalParameter $fp1 ) as Type WhereClauseopt Offersopt MethodBody
46                         | MethodModifiersopt operator TypeParametersopt ( FormalParameter $fp1 ) as ? WhereClauseopt HasResultTypeopt Offersopt MethodBody
47                         | MethodModifiersopt operator TypeParametersopt ( FormalParameter $fp1 ) WhereClauseopt HasResultTypeopt Offersopt MethodBody
48     PropertyMethodDeclaration ::= MethodModifiersopt Identifier TypeParametersopt FormalParameters WhereClauseopt HasResultTypeopt MethodBody
49                                 | MethodModifiersopt Identifier WhereClauseopt HasResultTypeopt MethodBody
50     ExplicitConstructorInvocation ::= this TypeArgumentsopt ( ArgumentListopt ) ;
51                                     | super TypeArgumentsopt ( ArgumentListopt ) ;
52                                     | Primary . this TypeArgumentsopt ( ArgumentListopt ) ;
53                                     | Primary . super TypeArgumentsopt ( ArgumentListopt ) ;
54     NormalInterfaceDeclaration ::= Modifiersopt interface Identifier TypeParamsWithVarianceopt Propertiesopt WhereClauseopt ExtendsInterfacesopt InterfaceBody
55     ClassInstanceCreationExpression ::= new TypeName TypeArgumentsopt ( ArgumentListopt ) ClassBodyopt
56                                       | new TypeName [ Type ] [ ArgumentListopt ]
57                                       | Primary . new Identifier TypeArgumentsopt ( ArgumentListopt ) ClassBodyopt
58                                       | AmbiguousName . new Identifier TypeArgumentsopt ( ArgumentListopt ) ClassBodyopt
59     AssignPropertyCall ::= property TypeArgumentsopt ( ArgumentListopt ) ;
60     Type ::= FunctionType
61            | ConstrainedType
62     FunctionType ::= TypeParametersopt ( FormalParameterListopt ) WhereClauseopt Offersopt => Type
63     ClassType ::= NamedType
64     AnnotatedType ::= Type Annotations
65     ConstrainedType ::= NamedType
66                       | AnnotatedType
67                       | ( Type )
68     PlaceType ::= PlaceExpression
69     SimpleNamedType ::= TypeName
70                       | Primary . Identifier
71                       | DepNamedType . Identifier
72     DepNamedType ::= SimpleNamedType DepParameters
73                    | SimpleNamedType Arguments
74                    | SimpleNamedType Arguments DepParameters
75                    | SimpleNamedType TypeArguments
76                    | SimpleNamedType TypeArguments DepParameters
77                    | SimpleNamedType TypeArguments Arguments
78                    | SimpleNamedType TypeArguments Arguments DepParameters
79     NamedType ::= SimpleNamedType
80                 | DepNamedType
81     DepParameters ::= { ExistentialListopt Conjunctionopt }
82     TypeParamsWithVariance ::= [ TypeParamWithVarianceList ]
83     TypeParameters ::= [ TypeParameterList ]
84     FormalParameters ::= ( FormalParameterListopt )
85     Conjunction ::= Expression
86                   | Conjunction , Expression
87     SubtypeConstraint ::= Type $t1 <: Type $t2
88                         | Type $t1 :> Type $t2
89     WhereClause ::= DepParameters
90     Conjunctionopt ::= $Empty
91                      | Conjunction
92     ExistentialListopt ::= $Empty
93                          | ExistentialList ;
94     ExistentialList ::= FormalParameter
95                       | ExistentialList ; FormalParameter
96     ClassDeclaration ::= StructDeclaration
97                        | NormalClassDeclaration
98     NormalClassDeclaration ::= Modifiersopt class Identifier TypeParamsWithVarianceopt Propertiesopt WhereClauseopt Superopt Interfacesopt ClassBody
99     StructDeclaration ::= Modifiersopt struct Identifier TypeParamsWithVarianceopt Propertiesopt WhereClauseopt Interfacesopt ClassBody
100    ConstructorDeclaration ::= Modifiersopt def this TypeParametersopt FormalParameters WhereClauseopt HasResultTypeopt Offersopt ConstructorBody
101    Super ::= extends ClassType
102    FieldKeyword ::= val
103                   | var
104    VarKeyword ::= val
105                 | var
106    FieldDeclaration ::= Modifiersopt FieldKeyword FieldDeclarators ;
107                       | Modifiersopt FieldDeclarators ;
108    Statement ::= AnnotationStatement
109                | ExpressionStatement
110    AnnotationStatement ::= Annotationsopt NonExpressionStatement
111    NonExpressionStatement ::= Block
112                             | EmptyStatement
113                             | AssertStatement
114                             | SwitchStatement
115                             | DoStatement
116                             | BreakStatement
117                             | ContinueStatement
118                             | ReturnStatement
119                             | ThrowStatement
120                             | TryStatement
121                             | LabeledStatement
122                             | IfThenStatement
123                             | IfThenElseStatement
124                             | WhileStatement
125                             | ForStatement
126                             | AsyncStatement
127                             | AtStatement
128                             | AtomicStatement
129                             | WhenStatement
130                             | AtEachStatement
131                             | FinishStatement
132                             | NextStatement
133                             | ResumeStatement
134                             | AssignPropertyCall
135                             | OfferStatement
136    OfferStatement ::= offer Expression ;
137    IfThenStatement ::= if ( Expression ) Statement
138    IfThenElseStatement ::= if ( Expression ) Statement $s1 else Statement $s2
139    EmptyStatement ::= ;
140    LabeledStatement ::= Identifier : LoopStatement
141    LoopStatement ::= ForStatement
142                    | WhileStatement
143                    | DoStatement
144                    | AtEachStatement
145    ExpressionStatement ::= StatementExpression ;
146    StatementExpression ::= Assignment
147                          | PreIncrementExpression
148                          | PreDecrementExpression
149                          | PostIncrementExpression
150                          | PostDecrementExpression
151                          | MethodInvocation
152                          | ClassInstanceCreationExpression
153    AssertStatement ::= assert Expression ;
154                      | assert Expression $expr1 : Expression $expr2 ;
155    SwitchStatement ::= switch ( Expression ) SwitchBlock
156    SwitchBlock ::= { SwitchBlockStatementGroupsopt SwitchLabelsopt }
157    SwitchBlockStatementGroups ::= SwitchBlockStatementGroup
158                                 | SwitchBlockStatementGroups SwitchBlockStatementGroup
159    SwitchBlockStatementGroup ::= SwitchLabels BlockStatements
160    SwitchLabels ::= SwitchLabel
161                   | SwitchLabels SwitchLabel
162    SwitchLabel ::= case ConstantExpression :
163                  | default :
164    WhileStatement ::= while ( Expression ) Statement
165    DoStatement ::= do Statement while ( Expression ) ;
166    ForStatement ::= BasicForStatement
167                   | EnhancedForStatement
168    BasicForStatement ::= for ( ForInitopt ; Expressionopt ; ForUpdateopt ) Statement
169    ForInit ::= StatementExpressionList
170              | LocalVariableDeclaration
171    ForUpdate ::= StatementExpressionList
172    StatementExpressionList ::= StatementExpression
173                              | StatementExpressionList , StatementExpression
174    BreakStatement ::= break Identifieropt ;
175    ContinueStatement ::= continue Identifieropt ;
176    ReturnStatement ::= return Expressionopt ;
177    ThrowStatement ::= throw Expression ;
178    TryStatement ::= try Block Catches
179                   | try Block Catchesopt Finally
180    Catches ::= CatchClause
181              | Catches CatchClause
182    CatchClause ::= catch ( FormalParameter ) Block
183    Finally ::= finally Block
184    ClockedClause ::= clocked ( ClockList )
185    AsyncStatement ::= async ClockedClauseopt Statement
186                     | clocked async Statement
187    AtStatement ::= at PlaceExpressionSingleList Statement
188    AtomicStatement ::= atomic Statement
189    WhenStatement ::= when ( Expression ) Statement
190    AtEachStatement ::= ateach ( LoopIndex in Expression ) ClockedClauseopt Statement
191                      | ateach ( Expression ) Statement
192    EnhancedForStatement ::= for ( LoopIndex in Expression ) Statement
193                           | for ( Expression ) Statement
194    FinishStatement ::= finish Statement
195                      | clocked finish Statement
196    PlaceExpressionSingleList ::= ( PlaceExpression )
197    PlaceExpression ::= Expression
198    NextStatement ::= next ;
199    ResumeStatement ::= resume ;
200    ClockList ::= Clock
201                | ClockList , Clock
202    Clock ::= Expression
203    CastExpression ::= Primary
204                     | ExpressionName
205                     | CastExpression as Type
206    TypeParamWithVarianceList ::= TypeParamWithVariance
207                                | TypeParamWithVarianceList , TypeParamWithVariance
208    TypeParameterList ::= TypeParameter
209                        | TypeParameterList , TypeParameter
210    TypeParamWithVariance ::= Identifier
211                            | + Identifier
212                            | - Identifier
213    TypeParameter ::= Identifier
214    AssignmentExpression ::= Expression $expr1 '->' Expression $expr2
215    ClosureExpression ::= FormalParameters WhereClauseopt HasResultTypeopt Offersopt => ClosureBody
216    LastExpression ::= Expression
217    ClosureBody ::= ConditionalExpression
218                  | Annotationsopt { BlockStatementsopt LastExpression }
219                  | Annotationsopt Block
220    AtExpression ::= at PlaceExpressionSingleList ClosureBody
221    FinishExpression ::= finish ( Expression ) Block
222    WhereClauseopt ::= $Empty
223                     | WhereClause
224    PlaceExpressionSingleListopt ::= $Empty
225                                   | PlaceExpressionSingleList
226    ClockedClauseopt ::= $Empty
227                       | ClockedClause
228    identifier ::= IDENTIFIER $ident
229    TypeName ::= Identifier
230               | TypeName . Identifier
231    ClassName ::= TypeName
232    TypeArguments ::= [ TypeArgumentList ]
233    TypeArgumentList ::= Type
234                       | TypeArgumentList , Type
235    PackageName ::= Identifier
236                  | PackageName . Identifier
237    ExpressionName ::= Identifier
238                     | AmbiguousName . Identifier
239    MethodName ::= Identifier
240                 | AmbiguousName . Identifier
241    PackageOrTypeName ::= Identifier
242                        | PackageOrTypeName . Identifier
243    AmbiguousName ::= Identifier
244                    | AmbiguousName . Identifier
245    CompilationUnit ::= PackageDeclarationopt TypeDeclarationsopt
246                      | PackageDeclarationopt ImportDeclarations TypeDeclarationsopt
247                      | ImportDeclarations PackageDeclaration $misplacedPackageDeclaration ImportDeclarationsopt $misplacedImportDeclarations TypeDeclarationsopt
248                      | PackageDeclaration ImportDeclarations PackageDeclaration $misplacedPackageDeclaration ImportDeclarationsopt $misplacedImportDeclarations TypeDeclarationsopt
249    ImportDeclarations ::= ImportDeclaration
250                         | ImportDeclarations ImportDeclaration
251    TypeDeclarations ::= TypeDeclaration
252                       | TypeDeclarations TypeDeclaration
253    PackageDeclaration ::= Annotationsopt package PackageName ;
254    ImportDeclaration ::= SingleTypeImportDeclaration
255                        | TypeImportOnDemandDeclaration
256    SingleTypeImportDeclaration ::= import TypeName ;
257    TypeImportOnDemandDeclaration ::= import PackageOrTypeName . * ;
258    TypeDeclaration ::= ClassDeclaration
259                      | InterfaceDeclaration
260                      | TypeDefDeclaration
261                      | ;
262    Interfaces ::= implements InterfaceTypeList
263    InterfaceTypeList ::= Type
264                        | InterfaceTypeList , Type
265    ClassBody ::= { ClassBodyDeclarationsopt }
266    ClassBodyDeclarations ::= ClassBodyDeclaration
267                            | ClassBodyDeclarations ClassBodyDeclaration
268    ClassBodyDeclaration ::= ClassMemberDeclaration
269                           | ConstructorDeclaration
270    ClassMemberDeclaration ::= FieldDeclaration
271                             | MethodDeclaration
272                             | PropertyMethodDeclaration
273                             | TypeDefDeclaration
274                             | ClassDeclaration
275                             | InterfaceDeclaration
276                             | ;
277    FormalDeclarators ::= FormalDeclarator
278                        | FormalDeclarators , FormalDeclarator
279    FieldDeclarators ::= FieldDeclarator
280                       | FieldDeclarators , FieldDeclarator
281    VariableDeclaratorsWithType ::= VariableDeclaratorWithType
282                                  | VariableDeclaratorsWithType , VariableDeclaratorWithType
283    VariableDeclarators ::= VariableDeclarator
284                          | VariableDeclarators , VariableDeclarator
285    VariableInitializer ::= Expression
286    ResultType ::= : Type
287    HasResultType ::= : Type
288                    | <: Type
289    FormalParameterList ::= FormalParameter
290                          | FormalParameterList , FormalParameter
291    LoopIndexDeclarator ::= Identifier HasResultTypeopt
292                          | [ IdentifierList ] HasResultTypeopt
293                          | Identifier [ IdentifierList ] HasResultTypeopt
294    LoopIndex ::= Modifiersopt LoopIndexDeclarator
295                | Modifiersopt VarKeyword LoopIndexDeclarator
296    FormalParameter ::= Modifiersopt FormalDeclarator
297                      | Modifiersopt VarKeyword FormalDeclarator
298                      | Type
299    Offers ::= offers Type
300    ExceptionTypeList ::= ExceptionType
301                        | ExceptionTypeList , ExceptionType
302    ExceptionType ::= ClassType
303    MethodBody ::= = LastExpression ;
304                 | = Annotationsopt { BlockStatementsopt LastExpression }
305                 | = Annotationsopt Block
306                 | Annotationsopt Block
307                 | ;
308    ConstructorBody ::= = ConstructorBlock
309                      | ConstructorBlock
310                      | = ExplicitConstructorInvocation
311                      | = AssignPropertyCall
312                      | ;
313    ConstructorBlock ::= { ExplicitConstructorInvocationopt BlockStatementsopt }
314    Arguments ::= ( ArgumentListopt )
315    InterfaceDeclaration ::= NormalInterfaceDeclaration
316    ExtendsInterfaces ::= extends Type
317                        | ExtendsInterfaces , Type
318    InterfaceBody ::= { InterfaceMemberDeclarationsopt }
319    InterfaceMemberDeclarations ::= InterfaceMemberDeclaration
320                                  | InterfaceMemberDeclarations InterfaceMemberDeclaration
321    InterfaceMemberDeclaration ::= MethodDeclaration
322                                 | PropertyMethodDeclaration
323                                 | FieldDeclaration
324                                 | ClassDeclaration
325                                 | InterfaceDeclaration
326                                 | TypeDefDeclaration
327                                 | ;
328    Annotations ::= Annotation
329                  | Annotations Annotation
330    Annotation ::= @ NamedType
331    Identifier ::= identifier
332    Block ::= { BlockStatementsopt }
333    BlockStatements ::= BlockStatement
334                      | BlockStatements BlockStatement
335    BlockStatement ::= LocalVariableDeclarationStatement
336                     | ClassDeclaration
337                     | TypeDefDeclaration
338                     | Statement
339    IdentifierList ::= Identifier
340                     | IdentifierList , Identifier
341    FormalDeclarator ::= Identifier ResultType
342                       | [ IdentifierList ] ResultType
343                       | Identifier [ IdentifierList ] ResultType
344    FieldDeclarator ::= Identifier HasResultType
345                      | Identifier HasResultTypeopt = VariableInitializer
346    VariableDeclarator ::= Identifier HasResultTypeopt = VariableInitializer
347                         | [ IdentifierList ] HasResultTypeopt = VariableInitializer
348                         | Identifier [ IdentifierList ] HasResultTypeopt = VariableInitializer
349    VariableDeclaratorWithType ::= Identifier HasResultType = VariableInitializer
350                                 | [ IdentifierList ] HasResultType = VariableInitializer
351                                 | Identifier [ IdentifierList ] HasResultType = VariableInitializer
352    LocalVariableDeclarationStatement ::= LocalVariableDeclaration ;
353    LocalVariableDeclaration ::= Modifiersopt VarKeyword VariableDeclarators
354                               | Modifiersopt VariableDeclaratorsWithType
355                               | Modifiersopt VarKeyword FormalDeclarators
356    Primary ::= here
357              | [ ArgumentListopt ]
358              | Literal
359              | self
360              | this
361              | ClassName . this
362              | ( Expression )
363              | ClassInstanceCreationExpression
364              | FieldAccess
365              | MethodInvocation
366              | MethodSelection
367              | OperatorFunction
368    OperatorFunction ::= TypeName . +
369                       | TypeName . -
370                       | TypeName . *
371                       | TypeName . /
372                       | TypeName . '%'
373                       | TypeName . &
374                       | TypeName . '|'
375                       | TypeName . ^
376                       | TypeName . <<
377                       | TypeName . >>
378                       | TypeName . >>>
379                       | TypeName . <
380                       | TypeName . <=
381                       | TypeName . >=
382                       | TypeName . >
383                       | TypeName . ==
384                       | TypeName . !=
385    Literal ::= IntegerLiteral $lit
386              | LongLiteral $lit
387              | UnsignedIntegerLiteral $lit
388              | UnsignedLongLiteral $lit
389              | FloatingPointLiteral $lit
390              | DoubleLiteral $lit
391              | BooleanLiteral
392              | CharacterLiteral $lit
393              | StringLiteral $str
394              | null
395    BooleanLiteral ::= true $trueLiteral
396                     | false $falseLiteral
397    ArgumentList ::= Expression
398                   | ArgumentList , Expression
399    FieldAccess ::= Primary . Identifier
400                  | super . Identifier
401                  | ClassName . super $sup . Identifier
402                  | Primary . class $c
403                  | super . class $c
404                  | ClassName . super $sup . class $c
405    MethodInvocation ::= MethodName TypeArgumentsopt ( ArgumentListopt )
406                       | Primary . Identifier TypeArgumentsopt ( ArgumentListopt )
407                       | super . Identifier TypeArgumentsopt ( ArgumentListopt )
408                       | ClassName . super $sup . Identifier TypeArgumentsopt ( ArgumentListopt )
409                       | Primary TypeArgumentsopt ( ArgumentListopt )
410    MethodSelection ::= MethodName . ( FormalParameterListopt )
411                      | Primary . Identifier . ( FormalParameterListopt )
412                      | super . Identifier . ( FormalParameterListopt )
413                      | ClassName . super $sup . Identifier . ( FormalParameterListopt )
414    PostfixExpression ::= CastExpression
415                        | PostIncrementExpression
416                        | PostDecrementExpression
417    PostIncrementExpression ::= PostfixExpression ++
418    PostDecrementExpression ::= PostfixExpression '--'
419    UnannotatedUnaryExpression ::= PreIncrementExpression
420                                 | PreDecrementExpression
421                                 | + UnaryExpressionNotPlusMinus
422                                 | - UnaryExpressionNotPlusMinus
423                                 | UnaryExpressionNotPlusMinus
424    UnaryExpression ::= UnannotatedUnaryExpression
425                      | Annotations UnannotatedUnaryExpression
426    PreIncrementExpression ::= ++ UnaryExpressionNotPlusMinus
427    PreDecrementExpression ::= '--' UnaryExpressionNotPlusMinus
428    UnaryExpressionNotPlusMinus ::= PostfixExpression
429                                  | ~ UnaryExpression
430                                  | ! UnaryExpression
431    MultiplicativeExpression ::= UnaryExpression
432                               | MultiplicativeExpression * UnaryExpression
433                               | MultiplicativeExpression / UnaryExpression
434                               | MultiplicativeExpression '%' UnaryExpression
435    AdditiveExpression ::= MultiplicativeExpression
436                         | AdditiveExpression + MultiplicativeExpression
437                         | AdditiveExpression - MultiplicativeExpression
438    ShiftExpression ::= AdditiveExpression
439                      | ShiftExpression << AdditiveExpression
440                      | ShiftExpression >> AdditiveExpression
441                      | ShiftExpression >>> AdditiveExpression
442    RangeExpression ::= ShiftExpression
443                      | ShiftExpression $expr1 .. ShiftExpression $expr2
444    RelationalExpression ::= RangeExpression
445                           | SubtypeConstraint
446                           | RelationalExpression < RangeExpression
447                           | RelationalExpression > RangeExpression
448                           | RelationalExpression <= RangeExpression
449                           | RelationalExpression >= RangeExpression
450                           | RelationalExpression instanceof Type
451                           | RelationalExpression in ShiftExpression
452    EqualityExpression ::= RelationalExpression
453                         | EqualityExpression == RelationalExpression
454                         | EqualityExpression != RelationalExpression
455                         | Type $t1 == Type $t2
456    AndExpression ::= EqualityExpression
457                    | AndExpression & EqualityExpression
458    ExclusiveOrExpression ::= AndExpression
459                            | ExclusiveOrExpression ^ AndExpression
460    InclusiveOrExpression ::= ExclusiveOrExpression
461                            | InclusiveOrExpression '|' ExclusiveOrExpression
462    ConditionalAndExpression ::= InclusiveOrExpression
463                               | ConditionalAndExpression && InclusiveOrExpression
464    ConditionalOrExpression ::= ConditionalAndExpression
465                              | ConditionalOrExpression || ConditionalAndExpression
466    ConditionalExpression ::= ConditionalOrExpression
467                            | ClosureExpression
468                            | AtExpression
469                            | FinishExpression
470                            | ConditionalOrExpression ? Expression : ConditionalExpression
471    AssignmentExpression ::= Assignment
472                           | ConditionalExpression
473    Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression
474                 | ExpressionName $e1 ( ArgumentListopt ) AssignmentOperator AssignmentExpression
475                 | Primary $e1 ( ArgumentListopt ) AssignmentOperator AssignmentExpression
476    LeftHandSide ::= ExpressionName
477                   | FieldAccess
478    AssignmentOperator ::= =
479                         | *=
480                         | /=
481                         | '%='
482                         | +=
483                         | -=
484                         | <<=
485                         | >>=
486                         | >>>=
487                         | &=
488                         | ^=
489                         | |=
490    Expression ::= AssignmentExpression
491    ConstantExpression ::= Expression
492    PrefixOp ::= +
493               | -
494               | !
495               | ~
496    BinOp ::= +
497            | -
498            | *
499            | /
500            | '%'
501            | &
502            | '|'
503            | ^
504            | &&
505            | ||
506            | <<
507            | >>
508            | >>>
509            | >=
510            | <=
511            | >
512            | <
513            | ==
514            | !=
515    Catchesopt ::= $Empty
516                 | Catches
517    Identifieropt ::= $Empty
518                    | Identifier
519    ForUpdateopt ::= $Empty
520                   | ForUpdate
521    Expressionopt ::= $Empty
522                    | Expression
523    ForInitopt ::= $Empty
524                 | ForInit
525    SwitchLabelsopt ::= $Empty
526                      | SwitchLabels
527    SwitchBlockStatementGroupsopt ::= $Empty
528                                    | SwitchBlockStatementGroups
529    InterfaceMemberDeclarationsopt ::= $Empty
530                                     | InterfaceMemberDeclarations
531    ExtendsInterfacesopt ::= $Empty
532                           | ExtendsInterfaces
533    ClassBodyopt ::= $Empty
534                   | ClassBody
535    ArgumentListopt ::= $Empty
536                      | ArgumentList
537    BlockStatementsopt ::= $Empty
538                         | BlockStatements
539    ExplicitConstructorInvocationopt ::= $Empty
540                                       | ExplicitConstructorInvocation
541    FormalParameterListopt ::= $Empty
542                             | FormalParameterList
543    Offersopt ::= $Empty
544                | Offers
545    ClassBodyDeclarationsopt ::= $Empty
546                               | ClassBodyDeclarations
547    Interfacesopt ::= $Empty
548                    | Interfaces
549    Superopt ::= $Empty
550               | Super
551    TypeParametersopt ::= $Empty
552                        | TypeParameters
553    FormalParametersopt ::= $Empty
554                          | FormalParameters
555    Annotationsopt ::= $Empty
556                     | Annotations
557    TypeDeclarationsopt ::= $Empty
558                          | TypeDeclarations
559    ImportDeclarationsopt ::= $Empty
560                            | ImportDeclarations
561    PackageDeclarationopt ::= $Empty
562                            | PackageDeclaration
563    HasResultTypeopt ::= $Empty
564                       | HasResultType
565    TypeArgumentsopt ::= $Empty
566                       | TypeArguments
567    TypeParamsWithVarianceopt ::= $Empty
568                                | TypeParamsWithVariance
569    Propertiesopt ::= $Empty
570                    | Properties

