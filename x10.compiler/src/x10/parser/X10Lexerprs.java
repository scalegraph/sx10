/*
 *  This file is part of the X10 project (http://x10-lang.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  (C) Copyright IBM Corporation 2006-2010.
 */
/**************************************************************************
 * WARNING!  THIS JAVA FILE IS AUTO-GENERATED FROM x10/parser/X10Lexer.gi *
 **************************************************************************/

package x10.parser;

public class X10Lexerprs implements lpg.runtime.ParseTable, X10Lexersym {
    public final static int ERROR_SYMBOL = 0;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 0;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 0;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 0;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 90;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 102;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 1151;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 2;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 446;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 56;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 158;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 447;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 99;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 103;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 704;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 705;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return X10Lexersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,1,1,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,1,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            40,41,47,43,44,45,21,46,27,29,
            31,42,55,24,25,26,30,32,35,48,
            50,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            22,23,28,33,34,36,37,38,39,49,
            51,52,53,56,1,54
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,3,3,3,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,2,2,2,2,2,2,2,
            2,3,2,2,2,2,2,2,2,2,
            3,3,4,2,2,3,1,3,2,2,
            2,2,3,3,3,3,3,3,2,3,
            3,2,1,2,2,2,3,3,2,2,
            5,3,2,2,0,1,2,1,2,2,
            0,2,0,2,1,2,1,2,2,2,
            3,2,3,3,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2,
            3,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,2,1,
            2,2,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,6,2,1,1,1,1,
            1,1,1,6,2,1,1,1,1,1,
            1,1,6,2,2,2,2,2,2,2,
            2,2,2,1,2,2,2,2,2,2,
            2,2,2,2,2,2,3,3,3,2,
            3,3,3,3,3,3
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            22,22,22,22,22,22,22,22,22,22,
            22,22,22,22,22,22,22,22,22,22,
            22,22,22,22,22,22,22,22,22,22,
            22,22,22,22,22,22,22,22,22,22,
            22,22,22,22,22,22,22,22,22,22,
            22,22,22,22,22,22,22,22,22,22,
            22,22,22,22,22,22,22,27,27,28,
            29,30,31,32,32,33,33,34,34,35,
            35,35,35,36,36,36,36,36,36,36,
            37,38,44,44,44,44,45,45,39,46,
            46,24,24,25,25,7,7,42,42,43,
            43,43,17,17,17,12,12,12,12,12,
            4,4,4,4,4,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,6,6,6,6,6,6,6,6,6,
            6,6,6,6,6,6,6,6,6,6,
            6,6,6,6,6,6,6,1,1,1,
            1,1,1,1,1,1,1,8,8,8,
            8,8,8,8,8,3,3,3,3,3,
            3,3,3,3,3,3,3,2,2,20,
            20,20,10,10,11,11,14,14,15,15,
            16,16,9,9,18,18,41,41,40,40,
            23,23,23,50,50,50,50,50,50,50,
            50,50,50,50,50,50,50,50,50,50,
            50,50,50,50,50,50,50,50,50,50,
            50,50,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,21,21,21,
            51,51,51,51,51,51,51,51,51,51,
            51,51,51,51,51,51,51,51,51,51,
            51,51,51,51,51,51,51,51,52,52,
            52,52,52,52,52,52,52,52,52,52,
            52,52,52,52,52,52,52,52,52,52,
            52,52,52,52,52,52,53,53,53,53,
            53,53,53,53,53,53,53,53,53,53,
            53,53,53,53,53,53,53,53,53,53,
            53,53,53,53,19,19,19,19,56,56,
            47,47,47,47,47,47,47,47,49,49,
            49,49,49,49,49,49,49,26,26,26,
            26,26,26,26,26,26,48,48,48,48,
            48,48,48,48,48,13,13,13,13,13,
            13,13,13,13,22,22,22,22,22,22,
            22,22,22,22,22,22,22,22,22,22,
            22,22,22,22,22,22,54,308,693,749,
            1517,692,692,692,488,813,582,582,582,694,
            410,104,229,1276,104,104,104,1332,106,449,
            575,304,1155,104,507,6,7,8,9,10,
            11,12,13,14,15,16,17,450,1125,106,
            556,1,94,549,1530,94,94,94,82,89,
            1144,424,100,94,568,598,647,1285,535,104,
            94,104,94,608,689,491,548,689,689,689,
            405,656,655,542,509,102,689,460,102,102,
            102,837,108,108,108,1421,540,102,1529,689,
            103,92,1163,660,92,92,92,733,1516,205,
            100,78,92,100,100,100,1274,80,87,92,
            1154,92,73,75,77,689,79,86,789,531,
            531,531,102,547,637,707,232,102,1211,231,
            231,231,861,600,600,600,885,604,604,604,
            909,611,611,611,1376,106,100,1215,740,100,
            933,615,615,615,957,619,619,619,81,88,
            531,981,623,623,623,1005,404,404,404,1029,
            627,627,627,1053,631,631,631,1077,395,395,
            395,1101,413,413,413,1262,467,1240,594,1321,
            662,1194,467,202,594,1216,662,1251,594,535,
            1343,669,1359,671,594,1167,1535,669,1169,671,
            1430,414,1387,106,76,74,396,524,211,1398,
            106,1409,106,1220,718,1212,1539,1542,1558,1538,
            1283,1566,1561,1567,1579,1580,1581,1582,1586,785,
            1153,1588,1219,1420,1275,1453,1462,1471,1480,1489,
            1498,1507,1520,705,705
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,98,0,
            100,101,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            98,0,100,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,97,98,0,0,0,102,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,0,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,97,0,0,100,101,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,
            91,92,93,94,95,96,97,98,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,78,79,80,81,
            82,83,84,85,86,87,88,89,90,91,
            92,93,94,95,96,97,98,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,0,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,97,98,0,1,2,3,
            4,5,6,7,8,9,10,0,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,0,27,28,29,30,31,32,0,
            34,35,36,26,12,13,14,15,0,43,
            44,12,13,14,15,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,0,0,0,81,0,1,
            2,3,4,5,6,7,8,9,10,0,
            12,13,14,15,16,17,18,19,20,21,
            22,23,0,1,2,3,4,5,6,7,
            8,9,10,39,12,13,14,15,16,17,
            18,19,20,21,22,23,0,1,2,3,
            4,5,6,7,8,9,10,99,12,13,
            14,15,16,17,18,19,20,21,22,23,
            0,1,2,3,4,5,6,7,8,9,
            10,0,12,13,14,15,16,17,18,19,
            20,21,22,23,0,1,2,3,4,5,
            6,7,8,9,10,0,12,13,14,15,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,5,6,7,8,9,10,0,
            12,13,14,15,16,17,18,19,20,21,
            22,23,0,1,2,3,4,5,6,7,
            8,9,10,0,12,13,14,15,16,17,
            18,19,20,21,22,23,0,1,2,3,
            4,5,6,7,8,9,10,0,12,13,
            14,15,16,17,18,19,20,21,22,23,
            0,1,2,3,4,5,6,7,8,9,
            10,0,12,13,14,15,16,17,18,19,
            20,21,22,23,0,1,2,3,4,5,
            6,7,8,9,10,0,12,13,14,15,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,5,6,7,8,9,10,0,
            12,13,14,15,16,17,18,19,20,21,
            22,23,0,1,2,3,4,5,6,7,
            8,9,10,0,12,13,14,15,16,17,
            18,19,20,21,22,23,0,1,2,3,
            4,5,6,7,8,9,10,0,12,13,
            14,15,16,17,18,19,20,21,22,23,
            0,1,2,3,4,5,6,7,8,9,
            10,0,12,13,14,15,16,17,18,19,
            20,21,22,23,0,1,2,3,4,5,
            6,7,8,9,10,0,12,13,14,15,
            0,17,18,0,1,2,3,4,5,6,
            7,8,0,0,0,12,0,0,0,16,
            0,37,0,11,11,11,0,24,0,1,
            2,3,4,5,6,7,8,34,35,36,
            12,38,39,40,16,0,24,25,45,37,
            24,25,24,0,1,2,3,4,5,6,
            7,8,34,35,36,12,38,39,40,16,
            0,0,0,45,0,0,0,24,0,0,
            0,11,11,99,0,11,11,34,35,36,
            11,38,39,40,80,82,0,26,45,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,33,0,0,0,0,0,0,0,
            0,42,0,33,0,12,13,14,15,79,
            17,18,42,11,0,0,0,0,37,24,
            25,0,27,28,29,30,31,32,24,25,
            0,27,28,29,30,31,32,99,43,44,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,0,0,0,37,0,1,
            2,3,4,5,6,7,8,9,10,0,
            0,0,0,99,99,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            0,1,2,3,4,5,6,7,8,0,
            1,2,3,4,5,6,7,8,0,0,
            0,0,0,24,25,0,27,28,29,30,
            31,32,0,1,2,3,4,5,6,7,
            8,0,1,2,3,4,5,6,7,8,
            0,1,2,3,4,5,6,7,8,0,
            1,2,3,4,5,6,7,8,0,1,
            2,3,4,5,6,7,8,0,1,2,
            3,4,5,6,7,8,0,1,2,3,
            4,5,6,7,8,0,0,0,99,0,
            1,2,3,4,5,6,7,8,0,0,
            0,0,0,0,0,0,0,0,0,11,
            11,0,27,28,29,30,31,32,11,11,
            0,0,11,0,26,26,0,0,24,25,
            0,33,33,47,48,0,0,26,11,41,
            41,11,0,0,33,0,11,11,0,0,
            0,0,41,46,46,0,26,0,0,11,
            11,11,11,0,78,0,11,0,11,42,
            0,0,0,0,0,0,0,0,0,0,
            0,83,0,0,0,0,100,101,0,0,
            0,84,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            705,799,799,799,799,799,799,799,799,799,
            799,799,799,799,799,799,799,799,799,799,
            799,799,799,799,799,799,799,799,799,799,
            799,799,799,799,799,799,799,799,799,799,
            799,799,799,799,799,799,540,799,799,799,
            799,799,799,799,799,799,799,799,799,799,
            799,799,799,799,799,799,799,799,799,799,
            799,799,799,799,799,799,799,799,799,799,
            799,799,799,799,798,799,799,799,799,799,
            799,799,799,799,799,799,799,799,799,103,
            799,799,705,797,797,797,797,797,797,797,
            797,797,797,797,797,797,797,797,797,797,
            797,797,797,797,797,797,797,797,797,797,
            797,797,797,797,797,797,797,797,797,797,
            797,797,797,797,797,797,797,797,802,797,
            797,797,797,797,797,797,797,797,797,797,
            797,797,797,797,797,797,797,797,797,797,
            797,797,797,797,797,797,797,797,797,797,
            797,797,797,797,797,797,796,797,797,797,
            797,797,797,797,797,797,797,797,797,797,
            797,101,797,797,98,805,805,805,805,805,
            805,805,805,805,805,805,805,805,805,805,
            805,805,805,805,805,805,805,805,805,805,
            805,805,805,805,805,805,805,805,805,805,
            805,805,805,805,805,805,805,805,805,805,
            805,805,805,805,805,805,805,805,805,805,
            805,805,805,805,805,805,805,805,805,805,
            805,805,805,805,805,805,805,805,805,805,
            805,805,805,805,805,805,805,805,805,805,
            805,805,805,805,805,805,805,805,805,805,
            805,805,805,95,705,705,805,705,463,693,
            693,693,693,693,693,693,693,693,675,692,
            692,692,692,692,692,692,692,692,692,692,
            692,692,692,494,692,692,692,692,692,692,
            677,692,692,692,635,502,513,643,538,678,
            692,692,705,676,694,694,692,692,692,692,
            692,692,692,692,692,692,692,692,692,692,
            692,692,692,692,692,692,692,692,692,692,
            692,692,692,692,692,694,578,597,692,560,
            674,679,645,472,748,673,733,745,746,743,
            744,747,731,728,729,705,705,694,694,705,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,708,809,809,
            809,809,809,809,658,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,705,807,
            807,807,807,807,807,807,807,807,807,807,
            807,807,807,807,807,807,807,807,807,807,
            807,807,807,807,807,807,807,807,807,807,
            807,807,807,807,807,807,807,807,707,807,
            807,807,807,641,807,807,807,807,807,807,
            807,807,807,807,807,807,807,807,807,807,
            807,807,807,807,807,807,807,807,807,807,
            807,807,807,807,807,807,807,807,807,807,
            807,807,807,807,807,807,807,807,807,807,
            807,807,807,807,807,807,807,705,689,689,
            689,689,689,689,689,689,689,689,689,689,
            689,689,689,689,689,689,689,689,689,689,
            689,689,689,689,689,689,689,689,689,689,
            689,689,689,689,689,689,705,689,689,689,
            689,689,500,689,689,689,689,689,689,689,
            689,689,689,689,689,689,689,689,689,689,
            689,689,689,689,689,689,689,689,689,689,
            689,689,689,689,689,689,689,689,689,689,
            689,689,689,689,689,689,689,689,689,689,
            689,689,689,689,689,689,1,937,937,937,
            937,937,937,937,937,937,937,27,936,936,
            936,936,936,936,936,936,936,936,936,936,
            936,936,84,936,936,936,936,936,936,85,
            936,936,936,1134,785,792,792,785,705,936,
            936,786,793,793,786,936,936,936,936,936,
            936,936,936,936,936,936,936,936,936,936,
            936,936,936,936,936,936,936,936,936,936,
            936,936,936,936,705,705,705,936,705,531,
            531,531,531,531,531,531,531,531,531,705,
            531,531,531,531,531,531,531,531,531,531,
            531,531,705,582,582,582,582,582,582,582,
            582,582,582,709,582,582,582,582,582,582,
            582,582,582,582,582,582,68,813,813,813,
            813,813,813,813,813,813,813,704,813,813,
            813,813,813,813,813,813,813,813,813,813,
            705,600,600,600,600,600,600,600,600,600,
            600,705,600,600,600,600,600,600,600,600,
            600,600,600,600,705,604,604,604,604,604,
            604,604,604,604,604,705,604,604,604,604,
            604,604,604,604,604,604,604,604,705,611,
            611,611,611,611,611,611,611,611,611,705,
            611,611,611,611,611,611,611,611,611,611,
            611,611,705,615,615,615,615,615,615,615,
            615,615,615,705,615,615,615,615,615,615,
            615,615,615,615,615,615,705,619,619,619,
            619,619,619,619,619,619,619,705,619,619,
            619,619,619,619,619,619,619,619,619,619,
            705,623,623,623,623,623,623,623,623,623,
            623,705,623,623,623,623,623,623,623,623,
            623,623,623,623,705,1109,1109,1109,1109,1109,
            1109,1109,1109,1109,1109,705,1109,1109,1109,1109,
            1109,1109,1109,1109,1109,1109,1109,1109,705,627,
            627,627,627,627,627,627,627,627,627,705,
            627,627,627,627,627,627,627,627,627,627,
            627,627,705,631,631,631,631,631,631,631,
            631,631,631,705,631,631,631,631,631,631,
            631,631,631,631,631,631,705,1100,1100,1100,
            1100,1100,1100,1100,1100,1100,1100,705,1100,1100,
            1100,1100,1100,1100,1100,1100,1100,1100,1100,1100,
            705,1118,1118,1118,1118,1118,1118,1118,1118,1118,
            1118,705,1118,1118,1118,1118,1118,1118,1118,1118,
            1118,1118,1118,1118,67,811,811,811,811,811,
            811,811,811,811,811,705,787,794,794,787,
            705,647,647,705,695,696,697,698,699,700,
            701,702,425,33,37,1123,705,705,705,1120,
            705,639,71,1142,762,754,70,455,705,1101,
            1101,1101,1101,1101,1101,1101,1101,1122,1124,1121,
            1123,1125,1126,1127,1120,705,783,783,1128,771,
            781,781,586,705,695,696,697,698,699,700,
            701,702,1122,1124,1121,1123,1125,1126,1127,1120,
            32,25,705,1128,31,30,705,590,230,29,
            705,763,751,5,705,1145,765,1122,1124,1121,
            764,1125,1126,1127,1136,770,705,1132,1128,90,
            594,594,594,594,594,594,594,594,594,594,
            705,594,594,594,594,594,594,594,594,594,
            594,36,467,467,467,467,467,467,467,467,
            467,467,650,14,228,105,705,705,705,705,
            705,652,436,650,5,784,791,791,784,769,
            637,637,652,1150,705,705,705,705,690,67,
            67,705,67,67,67,67,67,67,548,548,
            705,656,542,655,656,542,655,1,568,568,
            110,662,662,662,662,662,662,662,662,662,
            662,109,811,811,811,811,811,811,811,811,
            811,811,705,669,669,669,669,669,669,669,
            669,669,669,705,705,705,705,1151,705,671,
            671,671,671,671,671,671,671,671,671,705,
            705,705,705,18,5,112,811,811,811,811,
            811,811,811,811,811,811,111,811,811,811,
            811,811,811,811,811,811,811,114,811,811,
            811,811,811,811,811,811,811,811,113,811,
            811,811,811,811,811,811,811,811,811,105,
            209,892,893,894,895,896,897,898,899,210,
            892,893,894,895,896,897,898,899,705,705,
            705,705,705,67,67,705,67,67,67,67,
            67,67,209,187,187,187,187,187,187,187,
            187,209,188,188,188,188,188,188,188,188,
            209,189,189,189,189,189,189,189,189,209,
            190,190,190,190,190,190,190,190,209,191,
            191,191,191,191,191,191,191,209,192,192,
            192,192,192,192,192,192,209,193,193,193,
            193,193,193,193,193,72,18,705,5,209,
            194,194,194,194,194,194,194,194,34,35,
            705,705,705,705,69,705,705,22,21,752,
            753,20,778,782,780,778,782,780,761,760,
            705,705,759,705,683,682,705,19,779,779,
            51,684,681,934,934,434,435,688,758,685,
            680,767,705,705,750,705,1148,1149,432,50,
            430,433,687,471,686,426,691,52,705,1146,
            766,1144,1147,705,934,705,1143,705,768,749,
            705,705,705,705,705,705,705,705,705,705,
            705,1133,705,705,705,705,934,934,705,705,
            705,804
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
