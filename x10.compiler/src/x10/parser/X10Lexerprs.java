/*
 *  This file is part of the X10 project (http://x10-lang.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  (C) Copyright IBM Corporation 2006-2010.
 */
/*****************************************************
 * WARNING!  THIS IS A GENERATED FILE.  DO NOT EDIT! *
 *****************************************************/

package x10.parser;

public class X10Lexerprs implements lpg.runtime.ParseTable, X10Lexersym {
    public final static int ERROR_SYMBOL = 0;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 0;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 0;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 0;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 73;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 102;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 960;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 1;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 375;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 47;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 149;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 376;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 97;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 103;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 584;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 585;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return X10Lexersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,1,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,1,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            32,33,39,16,35,36,37,22,24,34,
            38,19,20,23,25,28,42,46,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,17,18,21,26,27,29,30,31,
            40,41,43,44,47,1,45
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,3,3,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,2,2,
            2,2,2,2,2,2,3,2,2,2,
            2,2,2,2,2,3,3,4,2,2,
            3,1,3,2,2,3,3,2,3,3,
            2,1,2,2,2,3,3,2,2,5,
            3,2,2,0,1,2,1,2,2,0,
            2,1,2,1,2,2,2,3,2,3,
            3,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,2,3,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2,1,2,2,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,6,
            2,1,1,1,1,1,1,1,6,2,
            2,2,2,2,2,2,2,2,1,2,
            2,2,2,2,3
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,23,23,24,25,26,26,27,27,
            27,27,28,28,28,28,28,28,28,29,
            30,36,36,36,36,37,37,31,38,38,
            21,21,4,4,34,34,35,35,35,14,
            14,14,10,10,10,10,10,5,5,5,
            5,5,6,6,6,6,6,6,6,6,
            6,6,6,6,6,6,6,6,6,6,
            6,6,6,6,6,6,6,6,7,7,
            7,7,7,7,7,7,7,7,7,7,
            7,7,7,7,7,7,7,7,7,7,
            7,7,7,7,1,1,1,1,1,1,
            1,1,1,1,11,11,11,11,11,11,
            11,11,3,3,3,3,3,3,3,3,
            3,3,3,3,2,2,41,41,41,8,
            8,9,9,12,12,13,13,15,15,33,
            33,32,32,20,20,20,42,42,42,42,
            42,42,42,42,42,42,42,42,42,42,
            42,42,42,42,42,42,42,42,42,42,
            42,42,42,42,42,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,43,43,43,43,43,43,43,
            43,43,43,43,43,43,43,43,43,43,
            43,43,43,43,43,43,43,43,43,43,
            43,44,44,44,44,44,44,44,44,44,
            44,44,44,44,44,44,44,44,44,44,
            44,44,44,44,44,44,44,44,44,16,
            16,16,16,47,47,39,39,39,39,39,
            39,39,39,40,40,40,40,40,40,40,
            40,40,22,22,22,22,22,22,22,22,
            22,18,18,18,18,18,18,18,18,19,
            19,19,19,19,19,45,408,573,846,956,
            477,572,572,572,610,215,574,68,75,214,
            214,214,634,436,533,378,384,1077,946,397,
            5,6,7,8,9,10,11,12,453,484,
            446,379,1,83,474,1198,98,83,83,83,
            625,369,83,1049,514,510,569,514,83,83,
            569,569,569,308,91,1200,1002,433,91,91,
            91,947,984,569,69,76,1212,569,1197,454,
            1195,91,538,1196,103,81,70,77,66,81,
            81,81,200,212,81,687,493,493,493,569,
            81,81,1060,91,205,89,91,927,93,89,
            89,89,360,465,976,71,78,711,500,500,
            500,448,540,735,95,95,95,67,412,493,
            759,508,508,508,783,517,517,517,807,521,
            521,521,505,89,1091,93,89,831,525,525,
            525,855,359,359,359,879,529,529,529,903,
            350,350,350,1027,552,1080,554,552,1177,554,
            1038,552,1111,557,552,987,557,1122,559,550,
            1186,559,1133,93,1144,93,351,1155,93,1166,
            93,198,1201,1202,1199,962,982,1204,1203,726,
            1076,1225,1010,981,1108,774,870,918,959,1224,
            1226,1227,1229,585,585
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,0,98,99,
            100,101,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,0,
            98,99,100,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,0,98,99,0,0,102,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,0,98,99,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,0,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,0,0,0,100,101,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,29,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,
            91,92,93,94,95,96,0,98,99,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,0,16,17,18,19,20,
            21,22,23,0,25,26,27,28,0,15,
            31,32,33,0,0,36,37,0,15,0,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,0,0,76,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,77,16,17,18,19,20,21,22,23,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,0,16,17,18,19,
            20,21,22,23,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,24,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,0,16,17,18,19,20,21,
            22,23,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,24,16,17,
            18,19,20,21,22,23,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,0,16,17,18,19,20,21,22,23,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,0,16,17,18,19,
            20,21,22,23,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,0,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,24,16,17,18,19,20,21,
            22,23,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,0,16,17,
            18,19,20,21,22,23,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,24,97,17,18,0,0,1,2,3,
            4,5,6,7,8,0,30,11,0,0,
            15,0,16,0,0,0,11,12,13,14,
            24,25,17,18,29,0,15,31,32,33,
            0,0,24,0,38,0,0,1,2,3,
            4,5,6,7,8,34,15,11,15,0,
            25,0,16,28,0,25,26,27,28,0,
            24,25,11,12,13,14,0,31,32,33,
            0,0,0,97,38,79,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            34,35,81,82,0,79,0,0,0,0,
            0,34,35,0,15,0,0,97,30,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,25,26,27,28,30,97,0,0,30,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,0,1,2,3,4,
            5,6,7,8,0,0,0,0,0,0,
            0,0,0,0,97,0,0,11,12,13,
            14,0,15,15,15,15,15,15,15,25,
            26,27,28,0,0,0,0,29,0,29,
            36,37,29,35,39,40,0,26,27,15,
            0,0,0,0,0,0,0,24,0,24,
            24,0,24,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,74,
            0,0,0,0,75,78,0,80,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,97,0,0,0,100,101,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            585,668,668,668,668,668,668,668,668,668,
            668,668,668,668,668,668,668,668,668,668,
            668,668,668,668,668,668,668,668,668,668,
            668,668,668,668,668,668,668,668,668,668,
            668,668,668,668,668,668,668,668,668,668,
            668,668,668,668,668,668,668,668,668,668,
            668,668,668,668,668,668,668,668,668,668,
            668,668,668,668,668,668,668,668,668,668,
            668,667,454,668,668,668,668,668,668,668,
            668,668,668,668,668,668,668,90,668,668,
            668,668,585,666,666,666,666,666,666,666,
            666,666,666,666,666,666,666,666,666,666,
            666,666,666,666,666,666,666,666,666,666,
            666,666,666,666,666,666,666,666,666,666,
            666,666,666,666,666,666,666,666,666,666,
            666,666,666,666,666,666,666,666,666,666,
            666,666,666,666,666,666,666,666,666,666,
            666,666,666,666,666,666,666,666,666,666,
            666,666,666,665,671,666,666,666,666,666,
            666,666,666,666,666,666,666,666,666,84,
            666,666,666,666,87,674,674,674,674,674,
            674,674,674,674,674,674,674,674,674,674,
            674,674,674,674,674,674,674,674,674,674,
            674,674,674,674,674,674,674,674,674,674,
            674,674,674,674,674,674,674,674,674,674,
            674,674,674,674,674,674,674,674,674,674,
            674,674,674,674,674,674,674,674,674,674,
            674,674,674,674,674,674,674,674,674,674,
            674,674,674,674,674,674,674,674,674,674,
            674,674,674,674,674,674,674,674,674,674,
            674,585,674,674,585,585,674,585,676,676,
            676,676,676,676,676,676,676,676,676,676,
            676,676,676,676,676,676,676,676,676,676,
            676,676,676,676,676,676,676,676,676,676,
            676,676,676,676,676,587,676,676,676,676,
            676,676,676,676,676,676,676,676,676,676,
            676,676,676,676,676,676,676,676,676,676,
            676,676,676,676,676,676,676,676,676,676,
            676,676,676,676,676,676,545,676,676,676,
            676,676,676,676,676,676,676,676,676,676,
            676,676,676,676,585,676,676,585,450,573,
            573,573,573,573,573,573,573,573,572,572,
            572,572,562,572,572,572,572,572,572,572,
            572,425,572,572,572,572,398,423,572,572,
            572,565,564,572,572,416,574,574,572,572,
            572,572,572,572,572,572,572,572,572,572,
            572,572,572,572,572,572,572,572,572,572,
            572,572,572,572,572,572,572,572,572,572,
            572,574,435,572,420,512,585,415,566,563,
            442,392,623,611,472,608,620,621,618,619,
            622,606,603,604,22,585,585,574,574,585,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,959,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,441,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,585,569,569,1,
            800,800,800,800,800,800,800,800,800,800,
            799,799,799,799,28,799,799,799,799,799,
            799,799,799,32,799,799,799,799,585,637,
            799,799,799,585,585,799,799,585,629,585,
            799,799,799,799,799,799,799,799,799,799,
            799,799,799,799,799,799,799,799,799,799,
            799,799,799,799,799,799,799,799,799,799,
            799,799,799,585,585,799,585,493,493,493,
            493,493,493,493,493,493,493,493,493,493,
            493,645,493,493,493,493,493,493,493,493,
            585,500,500,500,500,500,500,500,500,500,
            500,500,500,500,500,585,500,500,500,500,
            500,500,500,500,63,680,680,680,680,680,
            680,680,680,680,680,680,680,680,680,588,
            680,680,680,680,680,680,680,680,585,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,174,508,508,508,508,508,508,
            508,508,585,517,517,517,517,517,517,517,
            517,517,517,517,517,517,517,196,517,517,
            517,517,517,517,517,517,585,521,521,521,
            521,521,521,521,521,521,521,521,521,521,
            521,585,521,521,521,521,521,521,521,521,
            585,525,525,525,525,525,525,525,525,525,
            525,525,525,525,525,585,525,525,525,525,
            525,525,525,525,585,944,944,944,944,944,
            944,944,944,944,944,944,944,944,944,175,
            944,944,944,944,944,944,944,944,585,529,
            529,529,529,529,529,529,529,529,529,529,
            529,529,529,196,529,529,529,529,529,529,
            529,529,585,935,935,935,935,935,935,935,
            935,935,935,935,935,935,935,176,935,935,
            935,935,935,935,935,935,62,678,678,678,
            678,678,678,678,678,678,678,656,663,663,
            656,196,584,540,540,30,585,575,576,577,
            578,579,580,581,582,9,535,949,177,585,
            628,14,946,585,585,585,653,660,660,653,
            952,487,533,533,567,64,633,948,950,947,
            92,17,196,25,951,585,585,936,936,936,
            936,936,936,936,936,624,636,949,640,585,
            652,73,946,652,585,62,62,62,62,213,
            952,504,654,661,661,654,585,948,950,947,
            585,585,585,4,951,953,79,552,552,552,
            552,552,552,552,552,552,552,585,552,552,
            552,552,552,552,552,552,552,552,31,514,
            514,514,514,514,514,514,514,514,514,24,
            547,542,673,462,585,953,585,585,585,585,
            585,547,542,585,639,370,4,4,570,97,
            554,554,554,554,554,554,554,554,554,554,
            96,678,678,678,678,678,678,678,678,678,
            678,446,484,484,446,646,1,211,585,960,
            585,557,557,557,557,557,557,557,557,557,
            557,585,559,559,559,559,559,559,559,559,
            559,559,99,678,678,678,678,678,678,678,
            678,678,678,98,678,678,678,678,678,678,
            678,678,678,678,101,678,678,678,678,678,
            678,678,678,678,678,100,678,678,678,678,
            678,678,678,678,678,678,196,550,550,550,
            550,550,550,550,550,197,783,783,783,783,
            783,783,783,783,92,13,74,29,15,27,
            20,16,45,46,13,585,585,655,662,662,
            655,65,627,634,638,626,635,641,642,62,
            62,62,62,178,47,179,180,956,181,957,
            465,465,571,625,797,797,585,651,651,643,
            585,585,585,585,585,585,585,196,585,196,
            196,585,196,585,585,585,585,585,585,585,
            585,585,585,585,585,585,585,585,585,797,
            585,585,585,585,644,958,585,568,585,585,
            585,585,585,585,585,585,585,585,585,585,
            585,4,585,585,585,797,797
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
