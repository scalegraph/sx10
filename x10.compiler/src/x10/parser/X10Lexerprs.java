/*
 *  This file is part of the X10 project (http://x10-lang.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  (C) Copyright IBM Corporation 2006-2010.
 */
/*****************************************************
 * WARNING!  THIS IS A GENERATED FILE.  DO NOT EDIT! *
 *****************************************************/

package x10.parser;

public class X10Lexerprs implements lpg.runtime.ParseTable, X10Lexersym {
    public final static int ERROR_SYMBOL = 0;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 0;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 0;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 0;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 80;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 102;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 1071;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 2;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 416;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 50;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 152;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 417;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 99;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 103;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 654;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 655;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return X10Lexersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,1,1,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,1,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            34,35,41,37,38,39,17,40,23,25,
            36,49,20,21,24,26,29,42,44,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,18,19,22,27,28,30,
            31,32,33,43,45,46,47,50,1,48
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,3,3,3,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2,
            2,2,2,2,2,2,2,3,2,2,
            2,2,2,2,2,2,3,3,4,2,
            2,3,1,3,2,2,3,3,2,3,
            3,2,1,2,2,2,3,3,2,2,
            5,3,2,2,0,1,2,1,2,2,
            0,2,0,2,1,2,1,2,2,2,
            3,2,3,3,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2,
            3,1,1,1,1,1,1,1,1,1,
            1,1,1,1,2,1,2,2,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            6,2,1,1,1,1,1,1,1,6,
            2,1,1,1,1,1,1,1,6,2,
            2,2,2,2,2,2,2,2,2,1,
            2,2,2,2,2,3
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,25,25,26,27,28,28,29,
            29,29,29,30,30,30,30,30,30,30,
            31,32,38,38,38,38,39,39,33,40,
            40,22,22,23,23,7,7,36,36,37,
            37,37,15,15,15,11,11,11,11,11,
            4,4,4,4,4,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,6,6,6,6,6,6,6,6,6,
            6,6,6,6,6,6,6,6,6,6,
            6,6,6,6,6,6,6,1,1,1,
            1,1,1,1,1,1,1,8,8,8,
            8,8,8,8,8,3,3,3,3,3,
            3,3,3,3,3,3,3,2,2,18,
            18,18,9,9,10,10,13,13,14,14,
            16,16,35,35,34,34,21,21,21,44,
            44,44,44,44,44,44,44,44,44,44,
            44,44,44,44,44,44,44,44,44,44,
            44,44,44,44,44,44,44,44,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,45,45,45,45,
            45,45,45,45,45,45,45,45,45,45,
            45,45,45,45,45,45,45,45,45,45,
            45,45,45,45,46,46,46,46,46,46,
            46,46,46,46,46,46,46,46,46,46,
            46,46,46,46,46,46,46,46,46,46,
            46,46,47,47,47,47,47,47,47,47,
            47,47,47,47,47,47,47,47,47,47,
            47,47,47,47,47,47,47,47,47,47,
            17,17,17,17,50,50,41,41,41,41,
            41,41,41,41,43,43,43,43,43,43,
            43,43,43,24,24,24,24,24,24,24,
            24,24,42,42,42,42,42,42,42,42,
            42,12,12,12,12,12,12,12,12,12,
            20,20,20,20,20,20,48,308,643,1272,
            431,642,642,642,508,1123,431,1180,644,608,
            639,1316,96,639,639,639,202,425,533,100,
            67,639,470,6,7,8,9,10,11,12,
            13,487,1196,639,520,1,84,463,485,84,
            84,84,476,205,90,410,84,90,90,90,
            1204,1288,84,304,84,639,410,94,1476,619,
            94,94,94,616,427,509,92,1145,94,92,
            92,92,1482,730,495,103,82,92,215,82,
            82,82,70,77,90,1481,82,90,1108,96,
            1484,455,82,540,82,1250,525,72,79,94,
            1135,94,525,598,602,1360,96,92,1158,69,
            76,1225,92,707,218,493,515,217,217,217,
            786,548,548,548,809,552,552,552,832,98,
            98,98,855,564,564,564,878,568,568,568,
            901,572,572,572,924,577,577,577,947,581,
            581,581,970,585,585,585,548,993,390,390,
            390,1016,589,589,589,1039,593,593,593,1062,
            381,381,381,1085,399,399,399,1126,1177,1305,
            623,1486,1261,525,1209,471,623,71,78,525,
            1338,628,471,1349,631,391,1492,628,1168,1327,
            631,1154,400,1371,96,1483,382,201,1382,96,
            68,1393,96,1490,1195,1485,1144,1489,1495,749,
            1153,1497,1142,1138,1184,1404,1413,1422,1431,1440,
            1449,1458,1467,655,655
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,98,0,
            100,101,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            98,0,100,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,97,98,0,0,0,102,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,0,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,97,0,0,100,101,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,
            91,92,93,94,95,96,97,98,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,78,79,80,81,
            82,83,84,85,86,87,88,89,90,91,
            92,93,94,95,96,97,98,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,0,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,97,98,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,0,
            24,25,26,27,0,29,30,31,0,0,
            11,12,13,14,38,39,0,0,0,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,34,0,78,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,0,16,17,0,1,2,3,4,
            5,6,7,8,0,0,11,0,0,32,
            15,0,0,0,0,11,12,13,14,24,
            16,17,0,0,29,30,31,0,33,34,
            35,24,25,26,27,40,23,0,1,2,
            3,4,5,6,7,8,0,0,11,0,
            23,28,15,0,32,41,42,11,12,13,
            14,24,0,0,0,0,29,30,31,0,
            33,34,35,0,25,26,99,40,0,1,
            2,3,4,5,6,7,8,23,23,11,
            76,99,28,15,0,82,83,24,25,26,
            27,37,24,0,77,0,99,29,30,31,
            99,33,34,35,100,101,0,23,40,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,99,0,0,36,37,0,1,2,
            3,4,5,6,7,8,36,37,0,0,
            0,0,0,32,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,0,32,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,0,1,2,3,4,5,6,7,
            8,0,1,2,3,4,5,6,7,8,
            0,1,2,3,4,5,6,7,8,0,
            1,2,3,4,5,6,7,8,0,1,
            2,3,4,5,6,7,8,0,1,2,
            3,4,5,6,7,8,0,1,2,3,
            4,5,6,7,8,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,24,
            25,26,27,23,23,23,23,23,23,28,
            28,23,23,38,39,24,28,23,27,23,
            36,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            80,81,79,0,0,0,0,0,0,0,
            0,0,0,0,99,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            655,739,739,739,739,739,739,739,739,739,
            739,739,739,739,739,739,739,739,739,739,
            739,739,739,739,739,739,739,739,739,739,
            739,739,739,739,739,739,739,739,739,739,
            739,739,739,739,739,739,739,739,739,739,
            739,739,739,739,739,739,739,739,739,739,
            739,739,739,739,739,739,739,739,739,739,
            739,739,739,739,739,739,739,739,739,739,
            739,739,738,495,739,739,739,739,739,739,
            739,739,739,739,739,739,739,739,739,93,
            739,739,655,737,737,737,737,737,737,737,
            737,737,737,737,737,737,737,737,737,737,
            737,737,737,737,737,737,737,737,737,737,
            737,737,737,737,737,737,737,737,737,737,
            737,737,737,737,737,737,737,737,737,737,
            737,737,737,737,737,737,737,737,737,737,
            737,737,737,737,737,737,737,737,737,737,
            737,737,737,737,737,737,737,737,737,737,
            737,737,737,737,736,742,737,737,737,737,
            737,737,737,737,737,737,737,737,737,737,
            737,91,737,737,88,745,745,745,745,745,
            745,745,745,745,745,745,745,745,745,745,
            745,745,745,745,745,745,745,745,745,745,
            745,745,745,745,745,745,745,745,745,745,
            745,745,745,745,745,745,745,745,745,745,
            745,745,745,745,745,745,745,745,745,745,
            745,745,745,745,745,745,745,745,745,745,
            745,745,745,745,745,745,745,745,745,745,
            745,745,745,745,745,745,745,745,745,745,
            745,745,745,745,745,745,745,745,745,745,
            745,745,745,85,655,655,745,655,478,643,
            643,643,643,643,643,643,643,643,642,642,
            642,642,642,642,642,642,642,642,642,642,
            625,642,642,642,642,492,642,642,642,419,
            439,429,436,635,634,642,642,655,644,644,
            642,642,642,642,642,642,642,642,642,642,
            642,642,642,642,642,642,642,642,642,642,
            642,642,642,642,642,642,642,642,642,642,
            642,642,642,644,528,642,510,621,505,636,
            633,531,452,694,682,601,679,691,692,689,
            690,693,677,674,675,655,655,644,644,655,
            749,749,749,749,749,749,749,749,749,749,
            749,749,749,749,749,749,749,749,749,749,
            749,749,749,749,749,749,749,749,749,749,
            749,749,658,749,749,749,749,749,749,618,
            749,749,749,749,749,749,749,749,749,749,
            749,749,749,749,749,749,749,749,749,749,
            749,749,749,749,749,749,749,749,749,749,
            749,749,749,749,749,749,749,749,749,749,
            749,749,749,749,749,749,749,749,749,749,
            749,749,749,749,749,749,749,749,655,747,
            747,747,747,747,747,747,747,747,747,747,
            747,747,747,747,747,747,747,747,747,747,
            747,747,747,747,747,747,747,747,747,747,
            747,747,747,657,747,747,747,747,604,747,
            747,747,747,747,747,747,747,747,747,747,
            747,747,747,747,747,747,747,747,747,747,
            747,747,747,747,747,747,747,747,747,747,
            747,747,747,747,747,747,747,747,747,747,
            747,747,747,747,747,747,747,747,747,747,
            747,747,747,747,747,747,747,655,639,639,
            639,639,639,639,639,639,639,639,639,639,
            639,639,639,639,639,639,639,639,639,639,
            639,639,639,639,639,639,639,639,639,639,
            639,655,639,639,639,639,639,597,639,639,
            639,639,639,639,639,639,639,639,639,639,
            639,639,639,639,639,639,639,639,639,639,
            639,639,639,639,639,639,639,639,639,639,
            639,639,639,639,639,639,639,639,639,639,
            639,639,639,639,639,639,639,639,639,639,
            639,639,639,639,639,639,1,873,873,873,
            873,873,873,873,873,873,873,872,872,872,
            872,872,872,872,872,872,872,872,872,74,
            872,872,872,872,655,872,872,872,655,655,
            725,732,732,725,872,872,655,655,655,872,
            872,872,872,872,872,872,872,872,872,872,
            872,872,872,872,872,872,872,872,872,872,
            872,872,872,872,872,872,872,872,872,872,
            872,872,659,655,872,655,548,548,548,548,
            548,548,548,548,548,548,548,548,548,548,
            548,548,548,548,548,548,548,548,655,552,
            552,552,552,552,552,552,552,552,552,552,
            552,552,552,552,552,552,552,552,552,552,
            552,64,753,753,753,753,753,753,753,753,
            753,753,753,753,753,753,753,753,753,753,
            753,753,753,753,655,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,655,568,568,
            568,568,568,568,568,568,568,568,568,568,
            568,568,568,568,568,568,568,568,568,568,
            655,572,572,572,572,572,572,572,572,572,
            572,572,572,572,572,572,572,572,572,572,
            572,572,572,655,577,577,577,577,577,577,
            577,577,577,577,577,577,577,577,577,577,
            577,577,577,577,577,577,655,581,581,581,
            581,581,581,581,581,581,581,581,581,581,
            581,581,581,581,581,581,581,581,581,655,
            585,585,585,585,585,585,585,585,585,585,
            585,585,585,585,585,585,585,585,585,585,
            585,585,655,1045,1045,1045,1045,1045,1045,1045,
            1045,1045,1045,1045,1045,1045,1045,1045,1045,1045,
            1045,1045,1045,1045,1045,655,589,589,589,589,
            589,589,589,589,589,589,589,589,589,589,
            589,589,589,589,589,589,589,589,655,593,
            593,593,593,593,593,593,593,593,593,593,
            593,593,593,593,593,593,593,593,593,593,
            593,655,1036,1036,1036,1036,1036,1036,1036,1036,
            1036,1036,1036,1036,1036,1036,1036,1036,1036,1036,
            1036,1036,1036,1036,655,1054,1054,1054,1054,1054,
            1054,1054,1054,1054,1054,1054,1054,1054,1054,1054,
            1054,1054,1054,1054,1054,1054,1054,63,751,751,
            751,751,751,751,751,751,751,751,727,734,
            734,727,655,602,602,655,645,646,647,648,
            649,650,651,652,10,655,1059,95,655,599,
            1056,216,655,18,14,724,731,731,724,544,
            515,515,411,23,1058,1060,1057,28,1061,1062,
            1063,63,63,63,63,1064,707,655,1037,1037,
            1037,1037,1037,1037,1037,1037,75,655,1059,66,
            709,1070,1056,214,717,870,870,726,733,733,
            726,556,655,655,16,33,1058,1060,1057,655,
            1061,1062,1063,5,722,722,5,1064,655,645,
            646,647,648,649,650,651,652,705,700,1059,
            870,654,1067,1056,26,744,473,427,616,616,
            427,696,560,655,715,655,5,1058,1060,1057,
            1,1061,1062,1063,870,870,655,711,1064,80,
            525,525,525,525,525,525,525,525,525,525,
            655,525,525,525,525,525,525,525,525,525,
            525,32,431,431,431,431,431,431,431,431,
            431,431,14,655,655,613,610,199,832,833,
            834,835,836,837,838,839,613,610,655,655,
            655,655,655,640,100,623,623,623,623,623,
            623,623,623,623,623,99,751,751,751,751,
            751,751,751,751,751,751,200,832,833,834,
            835,836,837,838,839,655,1071,655,628,628,
            628,628,628,628,628,628,628,628,655,631,
            631,631,631,631,631,631,631,631,631,102,
            751,751,751,751,751,751,751,751,751,751,
            101,751,751,751,751,751,751,751,751,751,
            751,104,751,751,751,751,751,751,751,751,
            751,751,103,751,751,751,751,751,751,751,
            751,751,751,199,177,177,177,177,177,177,
            177,177,199,178,178,178,178,178,178,178,
            178,199,179,179,179,179,179,179,179,179,
            199,180,180,180,180,180,180,180,180,199,
            181,181,181,181,181,181,181,181,199,182,
            182,182,182,182,182,182,182,199,183,183,
            183,183,183,183,183,183,199,184,184,184,
            184,184,184,184,184,95,655,655,655,655,
            30,31,21,29,15,25,655,655,47,17,
            655,65,655,655,46,655,48,655,655,63,
            63,63,63,698,699,697,708,704,710,637,
            1068,713,706,540,540,723,641,712,723,714,
            695,655,655,655,655,655,655,655,655,655,
            655,655,655,655,655,655,655,655,655,655,
            655,655,655,655,655,655,655,655,655,655,
            655,655,655,655,655,655,655,655,655,655,
            1069,638,716,655,655,655,655,655,655,655,
            655,655,655,655,5
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
