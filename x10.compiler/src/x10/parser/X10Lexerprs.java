/*
 *  This file is part of the X10 project (http://x10-lang.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  (C) Copyright IBM Corporation 2006-2010.
 */
/*****************************************************
 * WARNING!  THIS IS A GENERATED FILE.  DO NOT EDIT! *
 *****************************************************/

package x10.parser;

public class X10Lexerprs implements lpg.runtime.ParseTable, X10Lexersym {
    public final static int ERROR_SYMBOL = 0;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 0;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 0;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 0;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 72;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 102;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 952;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 1;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 373;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 46;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 148;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 374;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 97;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 103;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 578;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 579;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return X10Lexersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,1,0,0,0,0,0,0,0,
            0,0,0,0,0,0,1,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            30,31,38,34,35,36,15,21,23,33,
            37,18,19,22,26,32,41,45,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,16,17,20,24,25,27,28,29,39,
            40,42,43,46,1,44
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,3,3,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,2,2,2,
            2,2,2,2,2,3,2,2,2,2,
            2,2,2,2,3,3,4,2,2,3,
            1,3,2,2,3,3,2,3,3,2,
            1,2,2,2,3,3,2,5,3,2,
            2,0,1,2,1,2,2,0,2,1,
            2,1,2,2,2,3,2,3,3,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,2,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2,
            1,2,2,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,6,2,1,
            1,1,1,1,1,1,6,2,2,2,
            2,2,2,2,2,2,1,2,2,2,
            2,2,3
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,23,23,24,25,26,26,27,27,27,
            27,28,28,28,28,28,28,28,29,35,
            35,35,35,36,36,30,37,37,21,21,
            7,7,33,33,34,34,34,14,14,14,
            10,10,10,10,10,4,4,4,4,4,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,6,6,6,6,
            6,6,6,6,6,6,6,6,6,6,
            6,6,6,6,6,6,6,6,6,6,
            6,6,1,1,1,1,1,1,1,1,
            1,1,11,11,11,11,11,11,11,11,
            3,3,3,3,3,3,3,3,3,3,
            3,3,2,2,40,40,40,8,8,9,
            9,12,12,13,13,16,16,32,32,31,
            31,20,20,20,41,41,41,41,41,41,
            41,41,41,41,41,41,41,41,41,41,
            41,41,41,41,41,41,41,41,41,41,
            41,41,41,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,42,42,42,42,42,42,42,42,42,
            42,42,42,42,42,42,42,42,42,42,
            42,42,42,42,42,42,42,42,42,43,
            43,43,43,43,43,43,43,43,43,43,
            43,43,43,43,43,43,43,43,43,43,
            43,43,43,43,43,43,43,15,15,15,
            15,46,46,38,38,38,38,38,38,38,
            38,39,39,39,39,39,39,39,39,39,
            22,22,22,22,22,22,22,22,22,18,
            18,18,18,18,18,18,18,19,19,19,
            19,19,19,44,408,567,1080,91,566,566,
            566,478,610,213,568,947,212,212,212,711,
            464,464,464,406,382,1187,458,468,5,6,
            7,8,9,10,11,443,846,65,474,1,
            81,471,98,81,81,81,510,563,367,81,
            563,563,563,1166,81,358,81,687,439,439,
            439,308,89,431,563,89,89,89,563,735,
            93,93,93,1167,994,446,103,79,634,89,
            79,79,79,210,200,427,79,66,1069,563,
            439,79,946,79,759,499,499,499,976,544,
            89,205,87,89,956,87,87,87,927,91,
            444,395,67,74,1038,376,70,77,525,409,
            528,376,532,982,528,783,503,503,503,807,
            513,513,513,831,517,517,517,1113,91,87,
            1124,91,87,855,357,357,357,879,521,521,
            521,903,348,348,348,999,1135,91,1027,507,
            1049,510,1168,68,75,507,984,510,1091,526,
            69,76,1102,550,1157,526,625,349,1171,550,
            1146,91,962,1006,505,196,1183,1173,1170,981,
            1169,1195,1174,726,993,1175,964,1177,1172,774,
            870,918,1196,1197,1209,1211,1215,579,579
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,0,98,99,
            100,101,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,0,
            98,99,100,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,0,98,99,0,0,102,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,0,98,99,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,0,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,0,0,0,100,101,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,29,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,
            91,92,93,94,95,96,0,98,99,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,0,16,17,18,19,20,
            21,22,23,0,25,26,27,28,0,15,
            31,32,33,34,35,0,0,0,15,0,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,0,0,76,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,77,16,17,18,19,20,21,22,23,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,0,16,17,18,19,
            20,21,22,23,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,24,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,0,16,17,18,19,20,21,
            22,23,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,24,16,17,
            18,19,20,21,22,23,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,0,16,17,18,19,20,21,22,23,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,0,16,17,18,19,
            20,21,22,23,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,0,
            16,17,18,19,20,21,22,23,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,24,16,17,18,19,20,21,
            22,23,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,0,16,17,
            18,19,20,21,22,23,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,24,97,17,18,0,0,1,2,3,
            4,5,6,7,8,0,30,11,0,0,
            15,0,16,0,0,0,11,12,13,14,
            24,25,17,18,29,0,15,31,32,33,
            0,0,36,0,1,2,3,4,5,6,
            7,8,0,0,11,15,15,0,0,16,
            25,26,27,28,0,0,0,24,25,11,
            12,13,14,0,31,32,33,37,25,36,
            15,28,30,97,0,79,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,78,
            97,80,79,37,38,0,0,30,0,1,
            2,3,4,5,6,7,8,0,30,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,0,0,0,0,0,
            0,0,0,0,0,0,0,0,11,12,
            13,14,0,15,15,15,0,15,15,15,
            25,26,27,28,0,0,0,15,29,34,
            35,25,26,27,28,39,40,38,0,15,
            0,29,26,27,0,0,0,0,0,24,
            24,0,0,29,0,0,0,0,0,0,
            0,0,24,0,24,0,0,0,24,0,
            74,0,0,0,0,75,0,0,0,81,
            82,0,0,0,0,0,0,0,0,0,
            0,0,97,0,0,0,100,101,97,0,
            0,0,0,97,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            579,660,660,660,660,660,660,660,660,660,
            660,660,660,660,660,660,660,660,660,660,
            660,660,660,660,660,660,660,660,660,660,
            660,660,660,660,660,660,660,660,660,660,
            660,660,660,660,660,660,660,660,660,660,
            660,660,660,660,660,660,660,660,660,660,
            660,660,660,660,660,660,660,660,660,660,
            660,660,660,660,660,660,660,660,660,660,
            660,659,446,660,660,660,660,660,660,660,
            660,660,660,660,660,660,660,88,660,660,
            660,660,579,658,658,658,658,658,658,658,
            658,658,658,658,658,658,658,658,658,658,
            658,658,658,658,658,658,658,658,658,658,
            658,658,658,658,658,658,658,658,658,658,
            658,658,658,658,658,658,658,658,658,658,
            658,658,658,658,658,658,658,658,658,658,
            658,658,658,658,658,658,658,658,658,658,
            658,658,658,658,658,658,658,658,658,658,
            658,658,658,657,663,658,658,658,658,658,
            658,658,658,658,658,658,658,658,658,82,
            658,658,658,658,85,666,666,666,666,666,
            666,666,666,666,666,666,666,666,666,666,
            666,666,666,666,666,666,666,666,666,666,
            666,666,666,666,666,666,666,666,666,666,
            666,666,666,666,666,666,666,666,666,666,
            666,666,666,666,666,666,666,666,666,666,
            666,666,666,666,666,666,666,666,666,666,
            666,666,666,666,666,666,666,666,666,666,
            666,666,666,666,666,666,666,666,666,666,
            666,666,666,666,666,666,666,666,666,666,
            666,579,666,666,579,579,666,579,668,668,
            668,668,668,668,668,668,668,668,668,668,
            668,668,668,668,668,668,668,668,668,668,
            668,668,668,668,668,668,668,668,668,668,
            668,668,668,581,668,668,668,668,668,668,
            668,668,668,668,668,668,668,668,668,668,
            668,668,668,668,668,668,668,668,668,668,
            668,668,668,668,668,668,668,668,668,668,
            668,668,668,668,668,668,536,668,668,668,
            668,668,668,668,668,668,668,668,668,668,
            668,668,668,668,579,668,668,579,423,567,
            567,567,567,567,567,567,567,567,566,566,
            566,566,556,566,566,566,566,566,566,566,
            566,416,566,566,566,566,462,484,566,566,
            566,566,566,412,559,558,568,568,566,566,
            566,566,566,566,566,566,566,566,566,566,
            566,566,566,566,566,566,566,566,566,566,
            566,566,566,566,566,566,566,566,566,566,
            566,568,548,566,546,554,579,493,560,557,
            552,448,616,604,553,601,613,614,611,612,
            615,599,596,597,21,579,579,568,568,579,
            563,563,563,563,563,563,563,563,563,563,
            563,563,563,563,563,563,563,563,563,563,
            563,563,563,951,563,563,563,563,563,563,
            563,563,563,563,563,563,563,563,563,563,
            563,563,563,563,563,563,563,563,563,563,
            563,563,563,563,563,563,563,563,563,563,
            563,563,563,563,563,563,563,563,563,563,
            563,563,563,563,563,563,563,563,385,563,
            563,563,563,563,563,563,563,563,563,563,
            563,563,563,563,563,563,579,563,563,1,
            792,792,792,792,792,792,792,792,792,792,
            791,791,791,791,27,791,791,791,791,791,
            791,791,791,31,791,791,791,791,579,630,
            791,791,791,791,791,579,579,579,622,579,
            791,791,791,791,791,791,791,791,791,791,
            791,791,791,791,791,791,791,791,791,791,
            791,791,791,791,791,791,791,791,791,791,
            791,791,791,579,579,791,579,439,439,439,
            439,439,439,439,439,439,439,439,439,439,
            439,638,439,439,439,439,439,439,439,439,
            579,464,464,464,464,464,464,464,464,464,
            464,464,464,464,464,579,464,464,464,464,
            464,464,464,464,62,672,672,672,672,672,
            672,672,672,672,672,672,672,672,672,582,
            672,672,672,672,672,672,672,672,579,499,
            499,499,499,499,499,499,499,499,499,499,
            499,499,499,172,499,499,499,499,499,499,
            499,499,579,503,503,503,503,503,503,503,
            503,503,503,503,503,503,503,194,503,503,
            503,503,503,503,503,503,579,513,513,513,
            513,513,513,513,513,513,513,513,513,513,
            513,579,513,513,513,513,513,513,513,513,
            579,517,517,517,517,517,517,517,517,517,
            517,517,517,517,517,579,517,517,517,517,
            517,517,517,517,579,936,936,936,936,936,
            936,936,936,936,936,936,936,936,936,173,
            936,936,936,936,936,936,936,936,579,521,
            521,521,521,521,521,521,521,521,521,521,
            521,521,521,194,521,521,521,521,521,521,
            521,521,579,927,927,927,927,927,927,927,
            927,927,927,927,927,927,927,174,927,927,
            927,927,927,927,927,927,61,670,670,670,
            670,670,670,670,670,670,670,649,656,656,
            649,194,578,528,528,29,579,569,570,571,
            572,573,574,575,576,9,530,941,579,579,
            621,24,938,211,579,579,646,653,653,646,
            944,389,528,528,561,4,633,940,942,939,
            13,28,943,579,928,928,928,928,928,928,
            928,928,368,63,941,626,620,579,72,938,
            395,444,444,395,579,23,579,944,495,647,
            654,654,647,579,940,942,939,617,645,943,
            632,645,639,4,579,945,579,507,507,507,
            507,507,507,507,507,507,507,30,376,376,
            376,376,376,376,376,376,376,376,95,510,
            510,510,510,510,510,510,510,510,510,950,
            1,562,945,542,538,579,579,564,194,544,
            544,544,544,544,544,544,544,579,952,94,
            670,670,670,670,670,670,670,670,670,670,
            579,526,526,526,526,526,526,526,526,526,
            526,579,550,550,550,550,550,550,550,550,
            550,550,97,670,670,670,670,670,670,670,
            670,670,670,96,670,670,670,670,670,670,
            670,670,670,670,99,670,670,670,670,670,
            670,670,670,670,670,98,670,670,670,670,
            670,670,670,670,670,670,195,775,775,775,
            775,775,775,775,775,90,12,73,16,14,
            26,209,15,44,46,579,90,579,648,655,
            655,648,19,629,627,631,64,628,634,636,
            61,61,61,61,45,175,176,619,948,427,
            427,61,61,61,61,789,789,618,177,635,
            178,949,644,644,179,579,579,579,579,194,
            194,579,579,565,579,579,579,579,579,579,
            579,579,194,579,194,579,579,579,194,579,
            789,579,579,579,579,637,579,579,579,665,
            454,579,579,579,579,579,579,579,579,579,
            579,579,4,579,579,579,789,789,12,579,
            579,579,579,4
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
